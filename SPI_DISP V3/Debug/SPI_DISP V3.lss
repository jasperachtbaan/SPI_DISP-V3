
SPI_DISP V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  000019c4  00001a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007b  0080211c  0080211c  00001b74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044c6  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a91  00000000  00000000  00006236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013dc  00000000  00000000  00008cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  0000a0a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003950  00000000  00000000  0000a588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ad  00000000  00000000  0000ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000f485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_10>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_14>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_20>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_77>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_79>
     140:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_80>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_88>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e4 ec       	ldi	r30, 0xC4	; 196
     210:	f9 e1       	ldi	r31, 0x19	; 25
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ac 31       	cpi	r26, 0x1C	; 28
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	21 e2       	ldi	r18, 0x21	; 33
     220:	ac e1       	ldi	r26, 0x1C	; 28
     222:	b1 e2       	ldi	r27, 0x21	; 33
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a7 39       	cpi	r26, 0x97	; 151
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <main>
     232:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <_Z13clk_set_32MHzv>:
		return 1;
	}
	else{
		return result;
	}
}
     23a:	e0 e5       	ldi	r30, 0x50	; 80
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
     244:	e1 e5       	ldi	r30, 0x51	; 81
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	81 ff       	sbrs	r24, 1
     24c:	fd cf       	rjmp	.-6      	; 0x248 <_Z13clk_set_32MHzv+0xe>
     24e:	88 ed       	ldi	r24, 0xD8	; 216
     250:	84 bf       	out	0x34, r24	; 52
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     258:	08 95       	ret

0000025a <_Z11setup_blinkv>:
     25a:	e0 e5       	ldi	r30, 0x50	; 80
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	84 60       	ori	r24, 0x04	; 4
     262:	80 83       	st	Z, r24
     264:	e1 e5       	ldi	r30, 0x51	; 81
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	82 ff       	sbrs	r24, 2
     26c:	fd cf       	rjmp	.-6      	; 0x268 <_Z11setup_blinkv+0xe>
     26e:	85 e0       	ldi	r24, 0x05	; 5
     270:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     274:	e1 e0       	ldi	r30, 0x01	; 1
     276:	f4 e0       	ldi	r31, 0x04	; 4
     278:	80 81       	ld	r24, Z
     27a:	80 fd       	sbrc	r24, 0
     27c:	fd cf       	rjmp	.-6      	; 0x278 <_Z11setup_blinkv+0x1e>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     284:	e1 e0       	ldi	r30, 0x01	; 1
     286:	f4 e0       	ldi	r31, 0x04	; 4
     288:	80 81       	ld	r24, Z
     28a:	80 fd       	sbrc	r24, 0
     28c:	fd cf       	rjmp	.-6      	; 0x288 <_Z11setup_blinkv+0x2e>
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
     29c:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
     2a0:	e1 e0       	ldi	r30, 0x01	; 1
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	80 81       	ld	r24, Z
     2a6:	80 fd       	sbrc	r24, 0
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <_Z11setup_blinkv+0x4a>
     2aa:	08 95       	ret

000002ac <_Z9setup_SPIv>:
     2ac:	8e e5       	ldi	r24, 0x5E	; 94
     2ae:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     2b2:	80 e1       	ldi	r24, 0x10	; 16
     2b4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2b8:	08 95       	ret

000002ba <_Z10setup_dispv>:
     2ba:	88 eb       	ldi	r24, 0xB8	; 184
     2bc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     2c0:	80 e1       	ldi	r24, 0x10	; 16
     2c2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     2c6:	8c e0       	ldi	r24, 0x0C	; 12
     2c8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2cc:	e2 ec       	ldi	r30, 0xC2	; 194
     2ce:	f8 e0       	ldi	r31, 0x08	; 8
     2d0:	80 81       	ld	r24, Z
     2d2:	88 23       	and	r24, r24
     2d4:	ec f7       	brge	.-6      	; 0x2d0 <_Z10setup_dispv+0x16>
     2d6:	e2 ec       	ldi	r30, 0xC2	; 194
     2d8:	f8 e0       	ldi	r31, 0x08	; 8
     2da:	80 81       	ld	r24, Z
     2dc:	80 68       	ori	r24, 0x80	; 128
     2de:	80 83       	st	Z, r24
     2e0:	80 e1       	ldi	r24, 0x10	; 16
     2e2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2e6:	e7 ec       	ldi	r30, 0xC7	; 199
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <_Z10setup_dispv+0x30>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <_Z10setup_dispv+0x36>
     2f0:	00 00       	nop
     2f2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     2f6:	88 e3       	ldi	r24, 0x38	; 56
     2f8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2fc:	e2 ec       	ldi	r30, 0xC2	; 194
     2fe:	f8 e0       	ldi	r31, 0x08	; 8
     300:	80 81       	ld	r24, Z
     302:	88 23       	and	r24, r24
     304:	ec f7       	brge	.-6      	; 0x300 <_Z10setup_dispv+0x46>
     306:	e2 ec       	ldi	r30, 0xC2	; 194
     308:	f8 e0       	ldi	r31, 0x08	; 8
     30a:	80 81       	ld	r24, Z
     30c:	80 68       	ori	r24, 0x80	; 128
     30e:	80 83       	st	Z, r24
     310:	80 e1       	ldi	r24, 0x10	; 16
     312:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     316:	e7 ec       	ldi	r30, 0xC7	; 199
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <_Z10setup_dispv+0x60>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <_Z10setup_dispv+0x66>
     320:	00 00       	nop
     322:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     32c:	e2 ec       	ldi	r30, 0xC2	; 194
     32e:	f8 e0       	ldi	r31, 0x08	; 8
     330:	80 81       	ld	r24, Z
     332:	88 23       	and	r24, r24
     334:	ec f7       	brge	.-6      	; 0x330 <_Z10setup_dispv+0x76>
     336:	e2 ec       	ldi	r30, 0xC2	; 194
     338:	f8 e0       	ldi	r31, 0x08	; 8
     33a:	80 81       	ld	r24, Z
     33c:	80 68       	ori	r24, 0x80	; 128
     33e:	80 83       	st	Z, r24
     340:	80 e1       	ldi	r24, 0x10	; 16
     342:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     346:	87 ec       	ldi	r24, 0xC7	; 199
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <_Z10setup_dispv+0x90>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_Z10setup_dispv+0x96>
     350:	00 00       	nop
     352:	ef e9       	ldi	r30, 0x9F	; 159
     354:	f8 e2       	ldi	r31, 0x28	; 40
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <_Z10setup_dispv+0x9c>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <_Z10setup_dispv+0xa2>
     35c:	00 00       	nop
     35e:	08 95       	ret

00000360 <_Z9setup_btnv>:
     360:	87 e0       	ldi	r24, 0x07	; 7
     362:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
     366:	8b e8       	ldi	r24, 0x8B	; 139
     368:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <__TEXT_REGION_LENGTH__+0x700903>
     36c:	84 e8       	ldi	r24, 0x84	; 132
     36e:	9e e1       	ldi	r25, 0x1E	; 30
     370:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     374:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x700906>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     386:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     38a:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     38e:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
     392:	84 e0       	ldi	r24, 0x04	; 4
     394:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     398:	e2 e5       	ldi	r30, 0x52	; 82
     39a:	f6 e0       	ldi	r31, 0x06	; 6
     39c:	8b e1       	ldi	r24, 0x1B	; 27
     39e:	80 83       	st	Z, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	80 64       	ori	r24, 0x40	; 64
     3a4:	80 83       	st	Z, r24
     3a6:	82 e6       	ldi	r24, 0x62	; 98
     3a8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__TEXT_REGION_LENGTH__+0x700183>
     3ac:	08 95       	ret

000003ae <_Z9setup_intv>:
     3ae:	87 e0       	ldi	r24, 0x07	; 7
     3b0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     3b4:	78 94       	sei
     3b6:	08 95       	ret

000003b8 <_Z9setup_PWMv>:
     3b8:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     3bc:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3cc:	83 e1       	ldi	r24, 0x13	; 19
     3ce:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     3d2:	8e ef       	ldi	r24, 0xFE	; 254
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
     3d6:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     3da:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     3de:	08 95       	ret

000003e0 <_Z9QDEC_INITv>:
     3e0:	80 e3       	ldi	r24, 0x30	; 48
     3e2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     3ec:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__TEXT_REGION_LENGTH__+0x700675>
     3f0:	8c e6       	ldi	r24, 0x6C	; 108
     3f2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
     3f6:	8d e6       	ldi	r24, 0x6D	; 109
     3f8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x700181>
     3fc:	89 e0       	ldi	r24, 0x09	; 9
     3fe:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__TEXT_REGION_LENGTH__+0x700188>
     402:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__TEXT_REGION_LENGTH__+0x700189>
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     40c:	88 e6       	ldi	r24, 0x68	; 104
     40e:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <__TEXT_REGION_LENGTH__+0x700803>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     41a:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     41e:	8f e3       	ldi	r24, 0x3F	; 63
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
     426:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
     42a:	08 95       	ret

0000042c <_Z8DMX_initv>:
     42c:	84 e0       	ldi	r24, 0x04	; 4
     42e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
     432:	88 e5       	ldi	r24, 0x58	; 88
     434:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     438:	8a e6       	ldi	r24, 0x6A	; 106
     43a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
     43e:	85 e0       	ldi	r24, 0x05	; 5
     440:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     444:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
     448:	8a e8       	ldi	r24, 0x8A	; 138
     44a:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <__TEXT_REGION_LENGTH__+0x700843>
     44e:	87 e5       	ldi	r24, 0x57	; 87
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
     456:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
     45a:	8b e0       	ldi	r24, 0x0B	; 11
     45c:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
     460:	80 e8       	ldi	r24, 0x80	; 128
     462:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
     466:	83 e9       	ldi	r24, 0x93	; 147
     468:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
     46c:	08 95       	ret

0000046e <_Z17update_EEPROM_RAMv>:
     46e:	cf 93       	push	r28
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	09 f0       	breq	.+2      	; 0x47c <_Z17update_EEPROM_RAMv+0xe>
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	c6 2f       	mov	r28, r22
     47e:	c1 95       	neg	r28
     480:	83 e1       	ldi	r24, 0x13	; 19
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 b3 0c 	call	0x1966	; 0x1966 <eeprom_read_word>
     488:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <brightness>
     48c:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <brightness+0x1>
     490:	82 17       	cp	r24, r18
     492:	93 07       	cpc	r25, r19
     494:	41 f0       	breq	.+16     	; 0x4a6 <_Z17update_EEPROM_RAMv+0x38>
     496:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <brightness>
     49a:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <brightness+0x1>
     49e:	83 e1       	ldi	r24, 0x13	; 19
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_write_word>
     4a6:	85 e1       	ldi	r24, 0x15	; 21
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 b3 0c 	call	0x1966	; 0x1966 <eeprom_read_word>
     4ae:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
     4b2:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
     4b6:	82 17       	cp	r24, r18
     4b8:	93 07       	cpc	r25, r19
     4ba:	41 f0       	breq	.+16     	; 0x4cc <_Z17update_EEPROM_RAMv+0x5e>
     4bc:	60 91 01 20 	lds	r22, 0x2001	; 0x802001 <DMXChan>
     4c0:	70 91 02 20 	lds	r23, 0x2002	; 0x802002 <DMXChan+0x1>
     4c4:	85 e1       	ldi	r24, 0x15	; 21
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_write_word>
     4cc:	80 e1       	ldi	r24, 0x10	; 16
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <eeprom_read_byte>
     4d4:	8c 17       	cp	r24, r28
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <_Z17update_EEPROM_RAMv+0x74>
     4d8:	6c 2f       	mov	r22, r28
     4da:	80 e1       	ldi	r24, 0x10	; 16
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 b8 0c 	call	0x1970	; 0x1970 <eeprom_write_byte>
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <_Z10updateDispv>:
inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

void updateDisp(){
     4e6:	4f 92       	push	r4
     4e8:	5f 92       	push	r5
     4ea:	6f 92       	push	r6
     4ec:	7f 92       	push	r7
     4ee:	8f 92       	push	r8
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	a1 97       	sbiw	r28, 0x21	; 33
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	de bf       	out	0x3e, r29	; 62
     510:	8b e2       	ldi	r24, 0x2B	; 43
     512:	91 e2       	ldi	r25, 0x21	; 33
     514:	4b e4       	ldi	r20, 0x4B	; 75
     516:	51 e2       	ldi	r21, 0x21	; 33
     518:	dc 01       	movw	r26, r24
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     51a:	bc 01       	movw	r22, r24
     51c:	60 95       	com	r22
     51e:	70 95       	com	r23
			RTC_CNT = 0;
     520:	08 e0       	ldi	r16, 0x08	; 8
     522:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     524:	3d 91       	ld	r19, X+
     526:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     52a:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     52e:	ea 0f       	add	r30, r26
     530:	fb 1f       	adc	r31, r27
     532:	e6 0f       	add	r30, r22
     534:	f7 1f       	adc	r31, r23
     536:	20 81       	ld	r18, Z
     538:	32 17       	cp	r19, r18
     53a:	39 f0       	breq	.+14     	; 0x54a <_Z10updateDispv+0x64>
			RTC_CNT = 0;
     53c:	f8 01       	movw	r30, r16
     53e:	10 82       	st	Z, r1
     540:	11 82       	std	Z+1, r1	; 0x01
			editCounter = 0;
     542:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     546:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	uint8_t lowBound = 0xFF; //Lowest number in what the two arrays differ
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
     54a:	4a 17       	cp	r20, r26
     54c:	5b 07       	cpc	r21, r27
     54e:	51 f7       	brne	.-44     	; 0x524 <_Z10updateDispv+0x3e>
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
			RTC_CNT = 0;
			editCounter = 0;
		}
	}
	if(RTC_CNT > 512){
     550:	a0 90 08 04 	lds	r10, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     554:	b0 90 09 04 	lds	r11, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     558:	c0 90 4c 21 	lds	r12, 0x214C	; 0x80214c <toBeDispPtr>
     55c:	d0 90 4d 21 	lds	r13, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <currBlinkMaskPtr>
     56a:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <currBlinkMaskPtr+0x1>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     56e:	fb 01       	movw	r30, r22
     570:	46 01       	movw	r8, r12
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     572:	68 94       	set
     574:	ee 24       	eor	r14, r14
     576:	e5 f8       	bld	r14, 5
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
     578:	11 e0       	ldi	r17, 0x01	; 1
     57a:	a1 16       	cp	r10, r17
     57c:	12 e0       	ldi	r17, 0x02	; 2
     57e:	b1 06       	cpc	r11, r17
     580:	08 f4       	brcc	.+2      	; 0x584 <_Z10updateDispv+0x9e>
     582:	d0 c0       	rjmp	.+416    	; 0x724 <_Z10updateDispv+0x23e>
     584:	d9 01       	movw	r26, r18
     586:	fc 90       	ld	r15, X
     588:	ff 20       	and	r15, r15
     58a:	09 f4       	brne	.+2      	; 0x58e <_Z10updateDispv+0xa8>
     58c:	cb c0       	rjmp	.+406    	; 0x724 <_Z10updateDispv+0x23e>
     58e:	f0 90 93 21 	lds	r15, 0x2193	; 0x802193 <editMode>
     592:	f1 10       	cpse	r15, r1
     594:	cb c0       	rjmp	.+406    	; 0x72c <_Z10updateDispv+0x246>
     596:	c6 c0       	rjmp	.+396    	; 0x724 <_Z10updateDispv+0x23e>
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
     598:	d4 01       	movw	r26, r8
     59a:	fd 90       	ld	r15, X+
     59c:	4d 01       	movw	r8, r26
     59e:	dc 01       	movw	r26, r24
     5a0:	fd 92       	st	X+, r15
     5a2:	cd 01       	movw	r24, r26
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	bf ef       	ldi	r27, 0xFF	; 255
     5a8:	cb 1a       	sub	r12, r27
     5aa:	db 0a       	sbc	r13, r27
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
     5b0:	48 17       	cp	r20, r24
     5b2:	59 07       	cpc	r21, r25
     5b4:	09 f7       	brne	.-62     	; 0x578 <_Z10updateDispv+0x92>
     5b6:	e1 e5       	ldi	r30, 0x51	; 81
     5b8:	f1 e2       	ldi	r31, 0x21	; 33
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	d1 2c       	mov	r13, r1
     5be:	3f ef       	ldi	r19, 0xFF	; 255
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
     5c0:	db 01       	movw	r26, r22
     5c2:	9d 91       	ld	r25, X+
     5c4:	bd 01       	movw	r22, r26
     5c6:	20 81       	ld	r18, Z
     5c8:	29 17       	cp	r18, r25
     5ca:	39 f0       	breq	.+14     	; 0x5da <_Z10updateDispv+0xf4>
			currDispData[i] = temp[i];
     5cc:	90 83       	st	Z, r25
			highBound = i;
			if(lowBound == 0xFF){
     5ce:	3f 3f       	cpi	r19, 0xFF	; 255
     5d0:	19 f4       	brne	.+6      	; 0x5d8 <_Z10updateDispv+0xf2>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     5d2:	d8 2e       	mov	r13, r24
			if(lowBound == 0xFF){
				lowBound = i;
     5d4:	38 2f       	mov	r19, r24
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <_Z10updateDispv+0xf4>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     5d8:	d8 2e       	mov	r13, r24
     5da:	31 96       	adiw	r30, 0x01	; 1
     5dc:	8f 5f       	subi	r24, 0xFF	; 255
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
     5de:	80 32       	cpi	r24, 0x20	; 32
     5e0:	79 f7       	brne	.-34     	; 0x5c0 <_Z10updateDispv+0xda>
			if(lowBound == 0xFF){
				lowBound = i;
			}
		}
	}
	if(lowBound != 0xFF){ //If anything has changed on the display
     5e2:	3f 3f       	cpi	r19, 0xFF	; 255
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <_Z10updateDispv+0x102>
     5e6:	a4 c0       	rjmp	.+328    	; 0x730 <_Z10updateDispv+0x24a>
		uint8_t tempPos = lowBound;
		if(tempPos > 15){
     5e8:	30 31       	cpi	r19, 0x10	; 16
     5ea:	18 f0       	brcs	.+6      	; 0x5f2 <_Z10updateDispv+0x10c>
			tempPos += 48;
     5ec:	80 e3       	ldi	r24, 0x30	; 48
     5ee:	83 0f       	add	r24, r19
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <_Z10updateDispv+0x10e>
     5f2:	83 2f       	mov	r24, r19
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
     5f4:	80 68       	ori	r24, 0x80	; 128
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     5f6:	90 e1       	ldi	r25, 0x10	; 16
     5f8:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	SPIC_DATA = SPIdata;
     5fc:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     600:	e2 ec       	ldi	r30, 0xC2	; 194
     602:	f8 e0       	ldi	r31, 0x08	; 8
     604:	80 81       	ld	r24, Z
     606:	88 23       	and	r24, r24
     608:	ec f7       	brge	.-6      	; 0x604 <_Z10updateDispv+0x11e>
	SPIC_STATUS |= SPI_IF_bm;
     60a:	e2 ec       	ldi	r30, 0xC2	; 194
     60c:	f8 e0       	ldi	r31, 0x08	; 8
     60e:	80 81       	ld	r24, Z
     610:	80 68       	ori	r24, 0x80	; 128
     612:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     614:	e5 e4       	ldi	r30, 0x45	; 69
     616:	f6 e0       	ldi	r31, 0x06	; 6
     618:	80 e1       	ldi	r24, 0x10	; 16
     61a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61c:	87 ec       	ldi	r24, 0xC7	; 199
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <_Z10updateDispv+0x13a>
     624:	00 c0       	rjmp	.+0      	; 0x626 <_Z10updateDispv+0x140>
     626:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     628:	88 e0       	ldi	r24, 0x08	; 8
     62a:	80 83       	st	Z, r24
     62c:	9a e0       	ldi	r25, 0x0A	; 10
     62e:	9a 95       	dec	r25
     630:	f1 f7       	brne	.-4      	; 0x62e <_Z10updateDispv+0x148>
     632:	00 c0       	rjmp	.+0      	; 0x634 <_Z10updateDispv+0x14e>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     634:	43 2f       	mov	r20, r19
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	8d 2c       	mov	r8, r13
     63e:	91 2c       	mov	r9, r1
     640:	a1 2c       	mov	r10, r1
     642:	b1 2c       	mov	r11, r1
     644:	84 16       	cp	r8, r20
     646:	95 06       	cpc	r9, r21
     648:	a6 06       	cpc	r10, r22
     64a:	b7 06       	cpc	r11, r23
     64c:	08 f4       	brcc	.+2      	; 0x650 <_Z10updateDispv+0x16a>
     64e:	62 c0       	rjmp	.+196    	; 0x714 <_Z10updateDispv+0x22e>
     650:	a3 2f       	mov	r26, r19
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	fd 01       	movw	r30, r26
     656:	ef 5a       	subi	r30, 0xAF	; 175
     658:	fe 4d       	sbci	r31, 0xDE	; 222
     65a:	2f 01       	movw	r4, r30
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     65c:	06 e4       	ldi	r16, 0x46	; 70
     65e:	16 e0       	ldi	r17, 0x06	; 6
     660:	68 94       	set
     662:	cc 24       	eor	r12, r12
     664:	c4 f8       	bld	r12, 4
     666:	9c 2d       	mov	r25, r12
	SPIC_DATA = SPIdata;
     668:	0f 2e       	mov	r0, r31
     66a:	f3 ec       	ldi	r31, 0xC3	; 195
     66c:	ef 2e       	mov	r14, r31
     66e:	f8 e0       	ldi	r31, 0x08	; 8
     670:	ff 2e       	mov	r15, r31
     672:	f0 2d       	mov	r31, r0
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     674:	e2 ec       	ldi	r30, 0xC2	; 194
     676:	f8 e0       	ldi	r31, 0x08	; 8
	SPIC_STATUS |= SPI_IF_bm;
	PORTC_OUTSET = (1 << SS_PIN);
     678:	25 e4       	ldi	r18, 0x45	; 69
     67a:	36 e0       	ldi	r19, 0x06	; 6
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     67c:	68 94       	set
     67e:	77 24       	eor	r7, r7
     680:	73 f8       	bld	r7, 3
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
	SPIC_DATA = SPIdata;
     682:	0f 2e       	mov	r0, r31
     684:	f0 ec       	ldi	r31, 0xC0	; 192
     686:	6f 2e       	mov	r6, r31
     688:	f0 2d       	mov	r31, r0
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
     68a:	d2 01       	movw	r26, r4
     68c:	8d 91       	ld	r24, X+
     68e:	2d 01       	movw	r4, r26
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     690:	d8 01       	movw	r26, r16
     692:	9c 93       	st	X, r25
	SPIC_DATA = SPIdata;
     694:	d7 01       	movw	r26, r14
     696:	8c 93       	st	X, r24
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     698:	80 81       	ld	r24, Z
     69a:	88 23       	and	r24, r24
     69c:	ec f7       	brge	.-6      	; 0x698 <_Z10updateDispv+0x1b2>
	SPIC_STATUS |= SPI_IF_bm;
     69e:	80 81       	ld	r24, Z
     6a0:	80 68       	ori	r24, 0x80	; 128
     6a2:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     6a4:	d9 01       	movw	r26, r18
     6a6:	9c 93       	st	X, r25
     6a8:	a7 ec       	ldi	r26, 0xC7	; 199
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	11 97       	sbiw	r26, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <_Z10updateDispv+0x1c6>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <_Z10updateDispv+0x1cc>
     6b2:	00 00       	nop
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
			if(i == 15 && highBound != 15){
     6b4:	4f 30       	cpi	r20, 0x0F	; 15
     6b6:	51 05       	cpc	r21, r1
     6b8:	61 05       	cpc	r22, r1
     6ba:	71 05       	cpc	r23, r1
     6bc:	09 f5       	brne	.+66     	; 0x700 <_Z10updateDispv+0x21a>
     6be:	bf e0       	ldi	r27, 0x0F	; 15
     6c0:	db 16       	cp	r13, r27
     6c2:	41 f1       	breq	.+80     	; 0x714 <_Z10updateDispv+0x22e>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     6c4:	d8 01       	movw	r26, r16
     6c6:	7c 92       	st	X, r7
     6c8:	ba e0       	ldi	r27, 0x0A	; 10
     6ca:	ba 95       	dec	r27
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <_Z10updateDispv+0x1e4>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <_Z10updateDispv+0x1ea>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     6d0:	d8 01       	movw	r26, r16
     6d2:	cc 92       	st	X, r12
	SPIC_DATA = SPIdata;
     6d4:	d7 01       	movw	r26, r14
     6d6:	6c 92       	st	X, r6
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     6d8:	80 81       	ld	r24, Z
     6da:	88 23       	and	r24, r24
     6dc:	ec f7       	brge	.-6      	; 0x6d8 <_Z10updateDispv+0x1f2>
	SPIC_STATUS |= SPI_IF_bm;
     6de:	80 81       	ld	r24, Z
     6e0:	80 68       	ori	r24, 0x80	; 128
     6e2:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     6e4:	d9 01       	movw	r26, r18
     6e6:	cc 92       	st	X, r12
     6e8:	a7 ec       	ldi	r26, 0xC7	; 199
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	11 97       	sbiw	r26, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <_Z10updateDispv+0x206>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <_Z10updateDispv+0x20c>
     6f2:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     6f4:	d9 01       	movw	r26, r18
     6f6:	7c 92       	st	X, r7
     6f8:	ba e0       	ldi	r27, 0x0A	; 10
     6fa:	ba 95       	dec	r27
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <_Z10updateDispv+0x214>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <_Z10updateDispv+0x21a>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     700:	4f 5f       	subi	r20, 0xFF	; 255
     702:	5f 4f       	sbci	r21, 0xFF	; 255
     704:	6f 4f       	sbci	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	84 16       	cp	r8, r20
     70a:	95 06       	cpc	r9, r21
     70c:	a6 06       	cpc	r10, r22
     70e:	b7 06       	cpc	r11, r23
     710:	08 f0       	brcs	.+2      	; 0x714 <_Z10updateDispv+0x22e>
     712:	bb cf       	rjmp	.-138    	; 0x68a <_Z10updateDispv+0x1a4>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     714:	88 e0       	ldi	r24, 0x08	; 8
     716:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     71a:	ea e0       	ldi	r30, 0x0A	; 10
     71c:	ea 95       	dec	r30
     71e:	f1 f7       	brne	.-4      	; 0x71c <_Z10updateDispv+0x236>
     720:	00 c0       	rjmp	.+0      	; 0x722 <_Z10updateDispv+0x23c>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     722:	06 c0       	rjmp	.+12     	; 0x730 <_Z10updateDispv+0x24a>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     724:	d6 01       	movw	r26, r12
     726:	fc 90       	ld	r15, X
     728:	f0 82       	st	Z, r15
     72a:	36 cf       	rjmp	.-404    	; 0x598 <_Z10updateDispv+0xb2>
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     72c:	e0 82       	st	Z, r14
     72e:	34 cf       	rjmp	.-408    	; 0x598 <_Z10updateDispv+0xb2>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     730:	a1 96       	adiw	r28, 0x21	; 33
     732:	cd bf       	out	0x3d, r28	; 61
     734:	de bf       	out	0x3e, r29	; 62
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	08 95       	ret

00000758 <_Z12LCD_PRINTDECjhh>:
inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
	currCursorPos++;
}

void LCD_PRINTDEC(uint16_t numToPrint, uint8_t pos, uint8_t noOfDigits){
     758:	2f 92       	push	r2
     75a:	3f 92       	push	r3
     75c:	4f 92       	push	r4
     75e:	5f 92       	push	r5
     760:	6f 92       	push	r6
     762:	7f 92       	push	r7
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	2e 97       	sbiw	r28, 0x0e	; 14
     782:	cd bf       	out	0x3d, r28	; 61
     784:	de bf       	out	0x3e, r29	; 62
     786:	56 2e       	mov	r5, r22
	//currCursorPos = pos;
	//WR_CHAR();
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
     788:	6c 01       	movw	r12, r24
     78a:	e1 2c       	mov	r14, r1
     78c:	f1 2c       	mov	r15, r1
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	98 01       	movw	r18, r16
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	da 82       	std	Y+2, r13	; 0x02
     798:	eb 82       	std	Y+3, r14	; 0x03
     79a:	fc 82       	std	Y+4, r15	; 0x04
     79c:	0d 83       	std	Y+5, r16	; 0x05
     79e:	1e 83       	std	Y+6, r17	; 0x06
     7a0:	2f 83       	std	Y+7, r18	; 0x07
     7a2:	38 87       	std	Y+8, r19	; 0x08
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
     7a4:	4f 3f       	cpi	r20, 0xFF	; 255
     7a6:	09 f0       	breq	.+2      	; 0x7aa <_Z12LCD_PRINTDECjhh+0x52>
     7a8:	6c c0       	rjmp	.+216    	; 0x882 <_Z12LCD_PRINTDECjhh+0x12a>
     7aa:	3e c0       	rjmp	.+124    	; 0x828 <_Z12LCD_PRINTDECjhh+0xd0>

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
		result *= gnd;
     7ac:	2a 2f       	mov	r18, r26
     7ae:	3b 2d       	mov	r19, r11
     7b0:	4c 2d       	mov	r20, r12
     7b2:	5d 2d       	mov	r21, r13
     7b4:	6e 2d       	mov	r22, r14
     7b6:	7f 2d       	mov	r23, r15
     7b8:	80 2f       	mov	r24, r16
     7ba:	91 2f       	mov	r25, r17
     7bc:	01 e0       	ldi	r16, 0x01	; 1
     7be:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__ashldi3>
     7c2:	32 2e       	mov	r3, r18
     7c4:	43 2e       	mov	r4, r19
     7c6:	64 2e       	mov	r6, r20
     7c8:	75 2e       	mov	r7, r21
     7ca:	6a 87       	std	Y+10, r22	; 0x0a
     7cc:	79 87       	std	Y+9, r23	; 0x09
     7ce:	b8 2f       	mov	r27, r24
     7d0:	a9 2f       	mov	r26, r25
     7d2:	02 e0       	ldi	r16, 0x02	; 2
     7d4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__ashldi3>
     7d8:	a2 2e       	mov	r10, r18
     7da:	b3 2e       	mov	r11, r19
     7dc:	c4 2e       	mov	r12, r20
     7de:	d5 2e       	mov	r13, r21
     7e0:	e6 2e       	mov	r14, r22
     7e2:	f7 2e       	mov	r15, r23
     7e4:	08 2f       	mov	r16, r24
     7e6:	19 2f       	mov	r17, r25
     7e8:	23 2d       	mov	r18, r3
     7ea:	34 2d       	mov	r19, r4
     7ec:	46 2d       	mov	r20, r6
     7ee:	57 2d       	mov	r21, r7
     7f0:	6a 85       	ldd	r22, Y+10	; 0x0a
     7f2:	79 85       	ldd	r23, Y+9	; 0x09
     7f4:	8b 2f       	mov	r24, r27
     7f6:	9a 2f       	mov	r25, r26
     7f8:	0e 94 6d 0c 	call	0x18da	; 0x18da <__adddi3>
     7fc:	a2 2f       	mov	r26, r18
     7fe:	b3 2e       	mov	r11, r19
     800:	c4 2e       	mov	r12, r20
     802:	d5 2e       	mov	r13, r21
     804:	e6 2e       	mov	r14, r22
     806:	f7 2e       	mov	r15, r23
     808:	08 2f       	mov	r16, r24
     80a:	19 2f       	mov	r17, r25
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     80c:	31 96       	adiw	r30, 0x01	; 1
     80e:	e8 15       	cp	r30, r8
     810:	f9 05       	cpc	r31, r9
     812:	64 f2       	brlt	.-104    	; 0x7ac <_Z12LCD_PRINTDECjhh+0x54>
     814:	13 c0       	rjmp	.+38     	; 0x83c <_Z12LCD_PRINTDECjhh+0xe4>
     816:	aa e0       	ldi	r26, 0x0A	; 10
     818:	b1 2c       	mov	r11, r1
     81a:	c1 2c       	mov	r12, r1
     81c:	d1 2c       	mov	r13, r1
     81e:	e1 2c       	mov	r14, r1
     820:	f1 2c       	mov	r15, r1
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	0a c0       	rjmp	.+20     	; 0x83c <_Z12LCD_PRINTDECjhh+0xe4>
     828:	81 2c       	mov	r8, r1
     82a:	91 2c       	mov	r9, r1
     82c:	aa e0       	ldi	r26, 0x0A	; 10
     82e:	b1 2c       	mov	r11, r1
     830:	c1 2c       	mov	r12, r1
     832:	d1 2c       	mov	r13, r1
     834:	e1 2c       	mov	r14, r1
     836:	f1 2c       	mov	r15, r1
     838:	00 e0       	ldi	r16, 0x00	; 0
     83a:	10 e0       	ldi	r17, 0x00	; 0
		result *= gnd;
	}
	if(exp == 0){
     83c:	81 14       	cp	r8, r1
     83e:	91 04       	cpc	r9, r1
     840:	09 f4       	brne	.+2      	; 0x844 <_Z12LCD_PRINTDECjhh+0xec>
     842:	1b c1       	rjmp	.+566    	; 0xa7a <_Z12LCD_PRINTDECjhh+0x322>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     844:	29 81       	ldd	r18, Y+1	; 0x01
     846:	3a 81       	ldd	r19, Y+2	; 0x02
     848:	4b 81       	ldd	r20, Y+3	; 0x03
     84a:	5c 81       	ldd	r21, Y+4	; 0x04
     84c:	6d 81       	ldd	r22, Y+5	; 0x05
     84e:	7e 81       	ldd	r23, Y+6	; 0x06
     850:	8f 81       	ldd	r24, Y+7	; 0x07
     852:	98 85       	ldd	r25, Y+8	; 0x08
     854:	aa 2e       	mov	r10, r26
     856:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__cmpdi2>
     85a:	0c f4       	brge	.+2      	; 0x85e <_Z12LCD_PRINTDECjhh+0x106>
     85c:	fd c0       	rjmp	.+506    	; 0xa58 <_Z12LCD_PRINTDECjhh+0x300>
				check = true;
			}
			decCounter++;
     85e:	0f ef       	ldi	r16, 0xFF	; 255
     860:	80 1a       	sub	r8, r16
     862:	90 0a       	sbc	r9, r16
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     864:	12 e0       	ldi	r17, 0x02	; 2
     866:	81 16       	cp	r8, r17
     868:	91 04       	cpc	r9, r1
     86a:	ac f2       	brlt	.-86     	; 0x816 <_Z12LCD_PRINTDECjhh+0xbe>
     86c:	aa e0       	ldi	r26, 0x0A	; 10
     86e:	b1 2c       	mov	r11, r1
     870:	c1 2c       	mov	r12, r1
     872:	d1 2c       	mov	r13, r1
     874:	e1 2c       	mov	r14, r1
     876:	f1 2c       	mov	r15, r1
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	e1 e0       	ldi	r30, 0x01	; 1
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	95 cf       	rjmp	.-214    	; 0x7ac <_Z12LCD_PRINTDECjhh+0x54>
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
	}
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
     882:	84 2f       	mov	r24, r20
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	1c 01       	movw	r2, r24
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	22 1a       	sub	r2, r18
     88c:	31 08       	sbc	r3, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     88e:	33 20       	and	r3, r3
     890:	0c f4       	brge	.+2      	; 0x894 <_Z12LCD_PRINTDECjhh+0x13c>
     892:	01 c1       	rjmp	.+514    	; 0xa96 <_Z12LCD_PRINTDECjhh+0x33e>
     894:	85 2d       	mov	r24, r5
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	8b 87       	std	Y+11, r24	; 0x0b
     89a:	9c 87       	std	Y+12, r25	; 0x0c
     89c:	41 2c       	mov	r4, r1
     89e:	51 2c       	mov	r5, r1
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	29 16       	cp	r2, r25
     8a4:	31 04       	cpc	r3, r1
     8a6:	7c f1       	brlt	.+94     	; 0x906 <_Z12LCD_PRINTDECjhh+0x1ae>
     8a8:	2a e0       	ldi	r18, 0x0A	; 10
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	e1 e0       	ldi	r30, 0x01	; 1
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
		result *= gnd;
     8bc:	01 e0       	ldi	r16, 0x01	; 1
     8be:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__ashldi3>
     8c2:	62 2e       	mov	r6, r18
     8c4:	73 2e       	mov	r7, r19
     8c6:	84 2e       	mov	r8, r20
     8c8:	95 2e       	mov	r9, r21
     8ca:	6a 87       	std	Y+10, r22	; 0x0a
     8cc:	79 87       	std	Y+9, r23	; 0x09
     8ce:	b8 2f       	mov	r27, r24
     8d0:	a9 2f       	mov	r26, r25
     8d2:	02 e0       	ldi	r16, 0x02	; 2
     8d4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__ashldi3>
     8d8:	a2 2e       	mov	r10, r18
     8da:	b3 2e       	mov	r11, r19
     8dc:	c4 2e       	mov	r12, r20
     8de:	d5 2e       	mov	r13, r21
     8e0:	e6 2e       	mov	r14, r22
     8e2:	f7 2e       	mov	r15, r23
     8e4:	08 2f       	mov	r16, r24
     8e6:	19 2f       	mov	r17, r25
     8e8:	26 2d       	mov	r18, r6
     8ea:	37 2d       	mov	r19, r7
     8ec:	48 2d       	mov	r20, r8
     8ee:	59 2d       	mov	r21, r9
     8f0:	6a 85       	ldd	r22, Y+10	; 0x0a
     8f2:	79 85       	ldd	r23, Y+9	; 0x09
     8f4:	8b 2f       	mov	r24, r27
     8f6:	9a 2f       	mov	r25, r26
     8f8:	0e 94 6d 0c 	call	0x18da	; 0x18da <__adddi3>
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     8fc:	31 96       	adiw	r30, 0x01	; 1
     8fe:	e2 15       	cp	r30, r2
     900:	f3 05       	cpc	r31, r3
     902:	e1 f6       	brne	.-72     	; 0x8bc <_Z12LCD_PRINTDECjhh+0x164>
     904:	08 c0       	rjmp	.+16     	; 0x916 <_Z12LCD_PRINTDECjhh+0x1be>
	//PORTD_INTCTRL |= PORT_INT0LVL_HI_gc;
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
     906:	2a e0       	ldi	r18, 0x0A	; 10
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 1; i < exp; i++){
		result *= gnd;
	}
	if(exp == 0){
     916:	21 14       	cp	r2, r1
     918:	31 04       	cpc	r3, r1
     91a:	49 f0       	breq	.+18     	; 0x92e <_Z12LCD_PRINTDECjhh+0x1d6>
     91c:	2d 87       	std	Y+13, r18	; 0x0d
     91e:	73 2e       	mov	r7, r19
     920:	84 2e       	mov	r8, r20
     922:	95 2e       	mov	r9, r21
     924:	6e 87       	std	Y+14, r22	; 0x0e
     926:	79 87       	std	Y+9, r23	; 0x09
     928:	8a 87       	std	Y+10, r24	; 0x0a
     92a:	69 2e       	mov	r6, r25
     92c:	09 c0       	rjmp	.+18     	; 0x940 <_Z12LCD_PRINTDECjhh+0x1e8>
		return 1;
     92e:	01 e0       	ldi	r16, 0x01	; 1
     930:	0d 87       	std	Y+13, r16	; 0x0d
     932:	71 2c       	mov	r7, r1
     934:	81 2c       	mov	r8, r1
     936:	91 2c       	mov	r9, r1
     938:	1e 86       	std	Y+14, r1	; 0x0e
     93a:	19 86       	std	Y+9, r1	; 0x09
     93c:	1a 86       	std	Y+10, r1	; 0x0a
     93e:	61 2c       	mov	r6, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
		int16_t t;
		for(t = 0; startNum - (mathPow(10, i) * t) >= 0; t++){} //t = 9 if i = 1 and startnum = 90, t = 3 if i = 2 and startnum is 356
     940:	ad 84       	ldd	r10, Y+13	; 0x0d
     942:	b7 2c       	mov	r11, r7
     944:	c8 2c       	mov	r12, r8
     946:	d9 2c       	mov	r13, r9
     948:	ee 84       	ldd	r14, Y+14	; 0x0e
     94a:	f9 84       	ldd	r15, Y+9	; 0x09
     94c:	0a 85       	ldd	r16, Y+10	; 0x0a
     94e:	16 2d       	mov	r17, r6
     950:	24 2d       	mov	r18, r4
     952:	35 2d       	mov	r19, r5
     954:	95 2d       	mov	r25, r5
     956:	99 0f       	add	r25, r25
     958:	99 0b       	sbc	r25, r25
     95a:	49 2f       	mov	r20, r25
     95c:	59 2f       	mov	r21, r25
     95e:	69 2f       	mov	r22, r25
     960:	79 2f       	mov	r23, r25
     962:	89 2f       	mov	r24, r25
     964:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__muldi3>
     968:	a2 2e       	mov	r10, r18
     96a:	b3 2e       	mov	r11, r19
     96c:	c4 2e       	mov	r12, r20
     96e:	d5 2e       	mov	r13, r21
     970:	e6 2e       	mov	r14, r22
     972:	f7 2e       	mov	r15, r23
     974:	08 2f       	mov	r16, r24
     976:	19 2f       	mov	r17, r25
     978:	29 81       	ldd	r18, Y+1	; 0x01
     97a:	3a 81       	ldd	r19, Y+2	; 0x02
     97c:	4b 81       	ldd	r20, Y+3	; 0x03
     97e:	5c 81       	ldd	r21, Y+4	; 0x04
     980:	6d 81       	ldd	r22, Y+5	; 0x05
     982:	7e 81       	ldd	r23, Y+6	; 0x06
     984:	8f 81       	ldd	r24, Y+7	; 0x07
     986:	98 85       	ldd	r25, Y+8	; 0x08
     988:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__subdi3>
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpdi2_s8>
     992:	24 f0       	brlt	.+8      	; 0x99c <_Z12LCD_PRINTDECjhh+0x244>
     994:	1f ef       	ldi	r17, 0xFF	; 255
     996:	41 1a       	sub	r4, r17
     998:	51 0a       	sbc	r5, r17
     99a:	82 cf       	rjmp	.-252    	; 0x8a0 <_Z12LCD_PRINTDECjhh+0x148>
     99c:	2d 85       	ldd	r18, Y+13	; 0x0d
     99e:	3e 85       	ldd	r19, Y+14	; 0x0e
		if(t > 0){
     9a0:	14 14       	cp	r1, r4
     9a2:	15 04       	cpc	r1, r5
     9a4:	ec f5       	brge	.+122    	; 0xa20 <_Z12LCD_PRINTDECjhh+0x2c8>
			startNum -= mathPow(10, i) * (t - 1); //Subtract the printed number from the start number
     9a6:	a2 01       	movw	r20, r4
     9a8:	41 50       	subi	r20, 0x01	; 1
     9aa:	51 09       	sbc	r21, r1
     9ac:	95 2f       	mov	r25, r21
     9ae:	99 0f       	add	r25, r25
     9b0:	99 0b       	sbc	r25, r25
     9b2:	a2 2e       	mov	r10, r18
     9b4:	b7 2c       	mov	r11, r7
     9b6:	c8 2c       	mov	r12, r8
     9b8:	d9 2c       	mov	r13, r9
     9ba:	e3 2e       	mov	r14, r19
     9bc:	f9 84       	ldd	r15, Y+9	; 0x09
     9be:	0a 85       	ldd	r16, Y+10	; 0x0a
     9c0:	16 2d       	mov	r17, r6
     9c2:	24 2f       	mov	r18, r20
     9c4:	35 2f       	mov	r19, r21
     9c6:	49 2f       	mov	r20, r25
     9c8:	59 2f       	mov	r21, r25
     9ca:	69 2f       	mov	r22, r25
     9cc:	79 2f       	mov	r23, r25
     9ce:	89 2f       	mov	r24, r25
     9d0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__muldi3>
     9d4:	a2 2e       	mov	r10, r18
     9d6:	b3 2e       	mov	r11, r19
     9d8:	c4 2e       	mov	r12, r20
     9da:	d5 2e       	mov	r13, r21
     9dc:	e6 2e       	mov	r14, r22
     9de:	f7 2e       	mov	r15, r23
     9e0:	08 2f       	mov	r16, r24
     9e2:	19 2f       	mov	r17, r25
     9e4:	29 81       	ldd	r18, Y+1	; 0x01
     9e6:	3a 81       	ldd	r19, Y+2	; 0x02
     9e8:	4b 81       	ldd	r20, Y+3	; 0x03
     9ea:	5c 81       	ldd	r21, Y+4	; 0x04
     9ec:	6d 81       	ldd	r22, Y+5	; 0x05
     9ee:	7e 81       	ldd	r23, Y+6	; 0x06
     9f0:	8f 81       	ldd	r24, Y+7	; 0x07
     9f2:	98 85       	ldd	r25, Y+8	; 0x08
     9f4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__subdi3>
     9f8:	29 83       	std	Y+1, r18	; 0x01
     9fa:	3a 83       	std	Y+2, r19	; 0x02
     9fc:	4b 83       	std	Y+3, r20	; 0x03
     9fe:	5c 83       	std	Y+4, r21	; 0x04
     a00:	6d 83       	std	Y+5, r22	; 0x05
     a02:	7e 83       	std	Y+6, r23	; 0x06
     a04:	8f 83       	std	Y+7, r24	; 0x07
     a06:	98 87       	std	Y+8, r25	; 0x08
			*(toBeDispPtr + pos + decCounter - i) = 0x2F + t;
     a08:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     a0c:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a10:	8b 85       	ldd	r24, Y+11	; 0x0b
     a12:	9c 85       	ldd	r25, Y+12	; 0x0c
     a14:	e8 0f       	add	r30, r24
     a16:	f9 1f       	adc	r31, r25
     a18:	8f e2       	ldi	r24, 0x2F	; 47
     a1a:	84 0d       	add	r24, r4
     a1c:	80 83       	st	Z, r24
     a1e:	0d c0       	rjmp	.+26     	; 0xa3a <_Z12LCD_PRINTDECjhh+0x2e2>
		}
		else{
			*(toBeDispPtr + pos + decCounter - i) = 0x30;
     a20:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     a24:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a28:	cb 84       	ldd	r12, Y+11	; 0x0b
     a2a:	dc 84       	ldd	r13, Y+12	; 0x0c
     a2c:	ec 0d       	add	r30, r12
     a2e:	fd 1d       	adc	r31, r13
     a30:	0f 2e       	mov	r0, r31
     a32:	f0 e3       	ldi	r31, 0x30	; 48
     a34:	df 2e       	mov	r13, r31
     a36:	f0 2d       	mov	r31, r0
     a38:	d0 82       	st	Z, r13
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     a3a:	01 e0       	ldi	r16, 0x01	; 1
     a3c:	20 1a       	sub	r2, r16
     a3e:	31 08       	sbc	r3, r1
     a40:	2b 85       	ldd	r18, Y+11	; 0x0b
     a42:	3c 85       	ldd	r19, Y+12	; 0x0c
     a44:	2f 5f       	subi	r18, 0xFF	; 255
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	2b 87       	std	Y+11, r18	; 0x0b
     a4a:	3c 87       	std	Y+12, r19	; 0x0c
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	23 16       	cp	r2, r19
     a50:	33 06       	cpc	r3, r19
     a52:	09 f0       	breq	.+2      	; 0xa56 <_Z12LCD_PRINTDECjhh+0x2fe>
     a54:	23 cf       	rjmp	.-442    	; 0x89c <_Z12LCD_PRINTDECjhh+0x144>
     a56:	1f c0       	rjmp	.+62     	; 0xa96 <_Z12LCD_PRINTDECjhh+0x33e>
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
     a58:	14 01       	movw	r2, r8
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	28 1a       	sub	r2, r24
     a5e:	31 08       	sbc	r3, r1
     a60:	16 cf       	rjmp	.-468    	; 0x88e <_Z12LCD_PRINTDECjhh+0x136>
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
     a62:	9f ef       	ldi	r25, 0xFF	; 255
     a64:	89 1a       	sub	r8, r25
     a66:	99 0a       	sbc	r9, r25
     a68:	aa e0       	ldi	r26, 0x0A	; 10
     a6a:	b1 2c       	mov	r11, r1
     a6c:	c1 2c       	mov	r12, r1
     a6e:	d1 2c       	mov	r13, r1
     a70:	e1 2c       	mov	r14, r1
     a72:	f1 2c       	mov	r15, r1
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	e1 ce       	rjmp	.-574    	; 0x83c <_Z12LCD_PRINTDECjhh+0xe4>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     a7a:	29 81       	ldd	r18, Y+1	; 0x01
     a7c:	3a 81       	ldd	r19, Y+2	; 0x02
     a7e:	4b 81       	ldd	r20, Y+3	; 0x03
     a80:	5c 81       	ldd	r21, Y+4	; 0x04
     a82:	6d 81       	ldd	r22, Y+5	; 0x05
     a84:	7e 81       	ldd	r23, Y+6	; 0x06
     a86:	8f 81       	ldd	r24, Y+7	; 0x07
     a88:	98 85       	ldd	r25, Y+8	; 0x08
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpdi2_s8>
     a90:	19 f3       	breq	.-58     	; 0xa58 <_Z12LCD_PRINTDECjhh+0x300>
     a92:	14 f3       	brlt	.-60     	; 0xa58 <_Z12LCD_PRINTDECjhh+0x300>
     a94:	e6 cf       	rjmp	.-52     	; 0xa62 <_Z12LCD_PRINTDECjhh+0x30a>
		}
		
		
	}
	//NWR_CHAR();
}
     a96:	2e 96       	adiw	r28, 0x0e	; 14
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	cf 90       	pop	r12
     aac:	bf 90       	pop	r11
     aae:	af 90       	pop	r10
     ab0:	9f 90       	pop	r9
     ab2:	8f 90       	pop	r8
     ab4:	7f 90       	pop	r7
     ab6:	6f 90       	pop	r6
     ab8:	5f 90       	pop	r5
     aba:	4f 90       	pop	r4
     abc:	3f 90       	pop	r3
     abe:	2f 90       	pop	r2
     ac0:	08 95       	ret

00000ac2 <_Z9LCD_PRINTPch>:

void LCD_PRINT(char charBuf[32], uint8_t pos){
	currCursorPos = pos;
     ac2:	60 93 4e 21 	sts	0x214E, r22	; 0x80214e <currCursorPos>
     ac6:	fc 01       	movw	r30, r24
	int i = 0;
	bool NULL_FOUND = false;
	for(i = 0; !NULL_FOUND; i++){
		if(charBuf[i] == '\0'){
     ac8:	91 91       	ld	r25, Z+
     aca:	99 23       	and	r25, r25
     acc:	79 f0       	breq	.+30     	; 0xaec <_Z9LCD_PRINTPch+0x2a>
		NWR_CHAR();
	}
}

inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
     ace:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     ad2:	a0 91 4c 21 	lds	r26, 0x214C	; 0x80214c <toBeDispPtr>
     ad6:	b0 91 4d 21 	lds	r27, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     ada:	a8 0f       	add	r26, r24
     adc:	b1 1d       	adc	r27, r1
     ade:	9c 93       	st	X, r25
	currCursorPos++;
     ae0:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <currCursorPos>
     aea:	ee cf       	rjmp	.-36     	; 0xac8 <_Z9LCD_PRINTPch+0x6>
     aec:	08 95       	ret

00000aee <_Z13setScrnAndPWMj>:
			setCharInToBe(charBuf[i]);
		}
	}
}

void setScrnAndPWM(uint16_t tempVal){ //Update screen with brightness value and update PWM
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
	uint16_t fullTemp = (double)tempVal * (double)tempVal * 0.11111;
     af6:	bc 01       	movw	r22, r24
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     b00:	6b 01       	movw	r12, r22
     b02:	7c 01       	movw	r14, r24
     b04:	9b 01       	movw	r18, r22
     b06:	ac 01       	movw	r20, r24
     b08:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>
     b0c:	24 ea       	ldi	r18, 0xA4	; 164
     b0e:	3d e8       	ldi	r19, 0x8D	; 141
     b10:	43 ee       	ldi	r20, 0xE3	; 227
     b12:	5d e3       	ldi	r21, 0x3D	; 61
     b14:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>
     b18:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
	TCE0_CCABUF = fullTemp;
     b1c:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
     b20:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
	uint16_t dispVal = (double)tempVal / 7.68;
	LCD_PRINTDEC(dispVal, 28, 0x3);
     b24:	2f e8       	ldi	r18, 0x8F	; 143
     b26:	32 ec       	ldi	r19, 0xC2	; 194
     b28:	45 ef       	ldi	r20, 0xF5	; 245
     b2a:	50 e4       	ldi	r21, 0x40	; 64
     b2c:	c7 01       	movw	r24, r14
     b2e:	b6 01       	movw	r22, r12
     b30:	0e 94 36 0a 	call	0x146c	; 0x146c <__divsf3>
     b34:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	43 e0       	ldi	r20, 0x03	; 3
     b3e:	6c e1       	ldi	r22, 0x1C	; 28
     b40:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12LCD_PRINTDECjhh>
}
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	08 95       	ret

00000b4e <_Z16updateBrightnessv>:

void updateBrightness(){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
	uint16_t tempStore = TCC0_CNT;
     b52:	c0 91 20 08 	lds	r28, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     b56:	d0 91 21 08 	lds	r29, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
     b5a:	be 01       	movw	r22, r28
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     b64:	27 ed       	ldi	r18, 0xD7	; 215
     b66:	3f ed       	ldi	r19, 0xDF	; 223
     b68:	4f e3       	ldi	r20, 0x3F	; 63
     b6a:	55 e4       	ldi	r21, 0x45	; 69
     b6c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__gesf2>
     b70:	18 16       	cp	r1, r24
     b72:	34 f0       	brlt	.+12     	; 0xb80 <_Z16updateBrightnessv+0x32>
		tempStore = (int)MAX_CNT_BRIGHTNESS;
	}
	//Set a minimum brightness threshold
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
     b74:	c8 30       	cpi	r28, 0x08	; 8
     b76:	d1 05       	cpc	r29, r1
     b78:	28 f4       	brcc	.+10     	; 0xb84 <_Z16updateBrightnessv+0x36>
		tempStore = 0;
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <_Z16updateBrightnessv+0x36>
void updateBrightness(){
	uint16_t tempStore = TCC0_CNT;
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
		tempStore = (int)MAX_CNT_BRIGHTNESS;
     b80:	c0 e0       	ldi	r28, 0x00	; 0
     b82:	dc e0       	ldi	r29, 0x0C	; 12
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
		tempStore = 0;
	}
	#define BRIGHTNESS_FINAL_DIV (BRIGHTNESS_DIV * 4)
	brightness = tempStore / BRIGHTNESS_FINAL_DIV;
     b84:	d6 95       	lsr	r29
     b86:	c7 95       	ror	r28
     b88:	d6 95       	lsr	r29
     b8a:	c7 95       	ror	r28
     b8c:	c0 93 23 21 	sts	0x2123, r28	; 0x802123 <brightness>
     b90:	d0 93 24 21 	sts	0x2124, r29	; 0x802124 <brightness+0x1>
	setScrnAndPWM(brightness);
     b94:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     b98:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     b9c:	0e 94 77 05 	call	0xaee	; 0xaee <_Z13setScrnAndPWMj>
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <_Z7setMode10DMXMANMode>:

//Mode control functions
void setMode(DMXMANMode tempMode){
	if(tempMode == DMX){
     ba6:	81 11       	cpse	r24, r1
     ba8:	33 c0       	rjmp	.+102    	; 0xc10 <_Z7setMode10DMXMANMode+0x6a>
		if(editMode){
     baa:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     bae:	88 23       	and	r24, r24
     bb0:	31 f0       	breq	.+12     	; 0xbbe <_Z7setMode10DMXMANMode+0x18>
			currBlinkMaskPtr = DMXBlinkVal0;
     bb2:	8a ee       	ldi	r24, 0xEA	; 234
     bb4:	90 e2       	ldi	r25, 0x20	; 32
     bb6:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     bba:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = DMXdisp;
     bbe:	84 e2       	ldi	r24, 0x24	; 36
     bc0:	90 e2       	ldi	r25, 0x20	; 32
     bc2:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     bc6:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = DMX;
     bca:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <currentMode>
	USARTD0_CTRLB &= ~USART_RXEN_bm;
	//PORTD_INTCTRL &= ~PORT_INT0LVL_HI_gc;
}

inline void DMX_ENABLE(){//Enable all DMX interrupts
	TCC1_INTCTRLA |= TC_OVFINTLVL_HI_gc;//Enable timer0 interrupt
     bce:	e6 e4       	ldi	r30, 0x46	; 70
     bd0:	f8 e0       	ldi	r31, 0x08	; 8
     bd2:	80 81       	ld	r24, Z
     bd4:	83 60       	ori	r24, 0x03	; 3
     bd6:	80 83       	st	Z, r24
	USARTD0_CTRLA |= USART_RXCINTLVL_MED_gc;//Enable USART interrupt
     bd8:	e3 ea       	ldi	r30, 0xA3	; 163
     bda:	f9 e0       	ldi	r31, 0x09	; 9
     bdc:	80 81       	ld	r24, Z
     bde:	80 62       	ori	r24, 0x20	; 32
     be0:	80 83       	st	Z, r24
	USARTD0_CTRLB |= USART_RXEN_bm;
     be2:	e4 ea       	ldi	r30, 0xA4	; 164
     be4:	f9 e0       	ldi	r31, 0x09	; 9
     be6:	80 81       	ld	r24, Z
     be8:	80 61       	ori	r24, 0x10	; 16
     bea:	80 83       	st	Z, r24
			currBlinkMaskPtr = DMXBlinkVal0;
		}
		toBeDispPtr = DMXdisp;
		currentMode = DMX;
		DMX_ENABLE();
		LCD_PRINTDEC(DMXChan, 22, 3);
     bec:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     bf0:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     bf4:	43 e0       	ldi	r20, 0x03	; 3
     bf6:	66 e1       	ldi	r22, 0x16	; 22
     bf8:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12LCD_PRINTDECjhh>
		LCD_PRINTDEC(DMXChan + 1, 28, 3);
     bfc:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     c00:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     c04:	43 e0       	ldi	r20, 0x03	; 3
     c06:	6c e1       	ldi	r22, 0x1C	; 28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12LCD_PRINTDECjhh>
     c0e:	08 95       	ret
	}
	if(tempMode == MAN){
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	41 f5       	brne	.+80     	; 0xc64 <_Z7setMode10DMXMANMode+0xbe>
		if(editMode){
     c14:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     c18:	88 23       	and	r24, r24
     c1a:	31 f0       	breq	.+12     	; 0xc28 <_Z7setMode10DMXMANMode+0x82>
			currBlinkMaskPtr = MANBlinkVal0;
     c1c:	86 e6       	ldi	r24, 0x66	; 102
     c1e:	90 e2       	ldi	r25, 0x20	; 32
     c20:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     c24:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = MANdisp;
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	90 e2       	ldi	r25, 0x20	; 32
     c2c:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     c30:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = MAN;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <currentMode>
		eeprom_write_byte(MODE_addr, modeByte);
	}
}

inline void DMX_DISABLE(){//Disable all DMX interrupts
	TCC1_INTCTRLA &= ~TC_OVFINTLVL_HI_gc;//Disable timer0 interrupt
     c3a:	e6 e4       	ldi	r30, 0x46	; 70
     c3c:	f8 e0       	ldi	r31, 0x08	; 8
     c3e:	80 81       	ld	r24, Z
     c40:	8c 7f       	andi	r24, 0xFC	; 252
     c42:	80 83       	st	Z, r24
	USARTD0_CTRLA &= ~USART_RXCINTLVL_MED_gc;//Disable USART interrupt
     c44:	e3 ea       	ldi	r30, 0xA3	; 163
     c46:	f9 e0       	ldi	r31, 0x09	; 9
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	80 83       	st	Z, r24
	USARTD0_CTRLB &= ~USART_RXEN_bm;
     c4e:	e4 ea       	ldi	r30, 0xA4	; 164
     c50:	f9 e0       	ldi	r31, 0x09	; 9
     c52:	80 81       	ld	r24, Z
     c54:	8f 7e       	andi	r24, 0xEF	; 239
     c56:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal0;
		}
		toBeDispPtr = MANdisp;
		currentMode = MAN;
		DMX_DISABLE();
		setScrnAndPWM(brightness);
     c58:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     c5c:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     c60:	0e 94 77 05 	call	0xaee	; 0xaee <_Z13setScrnAndPWMj>
     c64:	08 95       	ret

00000c66 <_Z17update_RAM_EEPROMv>:
	}
}

void update_RAM_EEPROM(){ //Updates RAM with all brightness, mode and DMX information from values stored in the EEPROM
	brightness = eeprom_read_word(BRIGHTNESS_addr);
     c66:	83 e1       	ldi	r24, 0x13	; 19
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <eeprom_read_word>
     c6e:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <brightness>
     c72:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <brightness+0x1>
	DMXChan = eeprom_read_word(DMX_addr);
     c76:	85 e1       	ldi	r24, 0x15	; 21
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <eeprom_read_word>
     c7e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
     c82:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
	if(eeprom_read_byte(MODE_addr)){
     c86:	80 e1       	ldi	r24, 0x10	; 16
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <eeprom_read_byte>
     c8e:	88 23       	and	r24, r24
     c90:	51 f0       	breq	.+20     	; 0xca6 <_Z17update_RAM_EEPROMv+0x40>
		setScrnAndPWM(brightness);
     c92:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     c96:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     c9a:	0e 94 77 05 	call	0xaee	; 0xaee <_Z13setScrnAndPWMj>
		setMode(MAN);
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z7setMode10DMXMANMode>
     ca4:	08 95       	ret
	}
	else{
		setMode(DMX);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z7setMode10DMXMANMode>
     cac:	08 95       	ret

00000cae <_Z16setPermanentModeb>:
	}
}

void setPermanentMode(bool temp){
     cae:	cf 93       	push	r28
	if(blinkTimeoutIgnore != temp){
     cb0:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <blinkTimeoutIgnore>
     cb4:	98 17       	cp	r25, r24
     cb6:	81 f0       	breq	.+32     	; 0xcd8 <_Z16setPermanentModeb+0x2a>
     cb8:	c8 2f       	mov	r28, r24
		if(temp){
     cba:	88 23       	and	r24, r24
     cbc:	31 f0       	breq	.+12     	; 0xcca <_Z16setPermanentModeb+0x1c>
			LCD_PRINT("P", 15);
     cbe:	6f e0       	ldi	r22, 0x0F	; 15
     cc0:	8b e0       	ldi	r24, 0x0B	; 11
     cc2:	91 e2       	ldi	r25, 0x21	; 33
     cc4:	0e 94 61 05 	call	0xac2	; 0xac2 <_Z9LCD_PRINTPch>
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <_Z16setPermanentModeb+0x26>
		}
		else{
			LCD_PRINT(" ", 15);
     cca:	6f e0       	ldi	r22, 0x0F	; 15
     ccc:	82 e1       	ldi	r24, 0x12	; 18
     cce:	91 e2       	ldi	r25, 0x21	; 33
     cd0:	0e 94 61 05 	call	0xac2	; 0xac2 <_Z9LCD_PRINTPch>
		}
		blinkTimeoutIgnore = temp;
     cd4:	c0 93 1d 21 	sts	0x211D, r28	; 0x80211d <blinkTimeoutIgnore>
	}
}
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <_Z10setEncMode11encoderMode>:

void setEncMode(encoderMode tempMode){
	switch(tempMode){
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	d9 f0       	breq	.+54     	; 0xd16 <_Z10setEncMode11encoderMode+0x3a>
     ce0:	30 f0       	brcs	.+12     	; 0xcee <_Z10setEncMode11encoderMode+0x12>
     ce2:	82 30       	cpi	r24, 0x02	; 2
     ce4:	f1 f1       	breq	.+124    	; 0xd62 <_Z10setEncMode11encoderMode+0x86>
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	09 f4       	brne	.+2      	; 0xcec <_Z10setEncMode11encoderMode+0x10>
     cea:	62 c0       	rjmp	.+196    	; 0xdb0 <_Z10setEncMode11encoderMode+0xd4>
     cec:	08 95       	ret
		case OFF:
		EncoderMode = OFF;
     cee:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <EncoderMode>
		TCC0_CTRLA &= ~TC_CLKSEL_DIV1_gc;
     cf2:	e0 e0       	ldi	r30, 0x00	; 0
     cf4:	f8 e0       	ldi	r31, 0x08	; 8
     cf6:	80 81       	ld	r24, Z
     cf8:	8e 7f       	andi	r24, 0xFE	; 254
     cfa:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     cfc:	e6 e0       	ldi	r30, 0x06	; 6
     cfe:	f8 e0       	ldi	r31, 0x08	; 8
     d00:	80 81       	ld	r24, Z
     d02:	8e 7f       	andi	r24, 0xFE	; 254
     d04:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d06:	e7 e0       	ldi	r30, 0x07	; 7
     d08:	f8 e0       	ldi	r31, 0x08	; 8
     d0a:	80 81       	ld	r24, Z
     d0c:	8a 7f       	andi	r24, 0xFA	; 250
     d0e:	80 83       	st	Z, r24
		update_EEPROM_RAM();
     d10:	0e 94 37 02 	call	0x46e	; 0x46e <_Z17update_EEPROM_RAMv>
		break;
     d14:	08 95       	ret

		case MODESEL:
		#define TCC0_CNT_MODE (int)(160 * MODE_DIV)
		#define TCC0_PER_MODE (int)(320 * MODE_DIV)
		TCC0_CNT = TCC0_CNT_MODE;
     d16:	80 ea       	ldi	r24, 0xA0	; 160
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d1e:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     d22:	e1 e0       	ldi	r30, 0x01	; 1
     d24:	f8 e0       	ldi	r31, 0x08	; 8
     d26:	80 81       	ld	r24, Z
     d28:	88 7f       	andi	r24, 0xF8	; 248
     d2a:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_MODE;
     d2c:	80 e4       	ldi	r24, 0x40	; 64
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d34:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     d38:	e6 e0       	ldi	r30, 0x06	; 6
     d3a:	f8 e0       	ldi	r31, 0x08	; 8
     d3c:	80 81       	ld	r24, Z
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	80 83       	st	Z, r24
		OVF_firstSam = true;
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <OVF_firstSam>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d48:	e7 e0       	ldi	r30, 0x07	; 7
     d4a:	f8 e0       	ldi	r31, 0x08	; 8
     d4c:	80 81       	ld	r24, Z
     d4e:	8a 7f       	andi	r24, 0xFA	; 250
     d50:	80 83       	st	Z, r24
		EncoderMode = MODESEL;
     d52:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     d56:	e0 e0       	ldi	r30, 0x00	; 0
     d58:	f8 e0       	ldi	r31, 0x08	; 8
     d5a:	80 81       	ld	r24, Z
     d5c:	81 60       	ori	r24, 0x01	; 1
     d5e:	80 83       	st	Z, r24
		break;
     d60:	08 95       	ret

		case CHANSEL:
		#define TCC0_CNT_CHAN (int)(160 * CHANNEL_DIV)
		#define TCC0_PER_CHAN (int)(320 * CHANNEL_DIV)
		TCC0_CNT = TCC0_CNT_CHAN;
     d62:	80 ea       	ldi	r24, 0xA0	; 160
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d6a:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     d6e:	e1 e0       	ldi	r30, 0x01	; 1
     d70:	f8 e0       	ldi	r31, 0x08	; 8
     d72:	80 81       	ld	r24, Z
     d74:	88 7f       	andi	r24, 0xF8	; 248
     d76:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_CHAN;
     d78:	80 e4       	ldi	r24, 0x40	; 64
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d80:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     d84:	e6 e0       	ldi	r30, 0x06	; 6
     d86:	f8 e0       	ldi	r31, 0x08	; 8
     d88:	80 81       	ld	r24, Z
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	80 83       	st	Z, r24
		OVF_firstSam = true;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <OVF_firstSam>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d94:	e7 e0       	ldi	r30, 0x07	; 7
     d96:	f8 e0       	ldi	r31, 0x08	; 8
     d98:	80 81       	ld	r24, Z
     d9a:	8a 7f       	andi	r24, 0xFA	; 250
     d9c:	80 83       	st	Z, r24
		EncoderMode = CHANSEL;
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     da4:	e0 e0       	ldi	r30, 0x00	; 0
     da6:	f8 e0       	ldi	r31, 0x08	; 8
     da8:	80 81       	ld	r24, Z
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	80 83       	st	Z, r24
		break;
     dae:	08 95       	ret

		case BRIGHTSEL:
		EncoderMode = BRIGHTSEL;
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     db6:	e0 e0       	ldi	r30, 0x00	; 0
     db8:	f8 e0       	ldi	r31, 0x08	; 8
     dba:	80 81       	ld	r24, Z
     dbc:	81 60       	ori	r24, 0x01	; 1
     dbe:	80 83       	st	Z, r24
		TCC0_CTRLB |= TC_WGMODE_DS_B_gc;
     dc0:	e1 e0       	ldi	r30, 0x01	; 1
     dc2:	f8 e0       	ldi	r31, 0x08	; 8
     dc4:	80 81       	ld	r24, Z
     dc6:	87 60       	ori	r24, 0x07	; 7
     dc8:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     dca:	e6 e0       	ldi	r30, 0x06	; 6
     dcc:	f8 e0       	ldi	r31, 0x08	; 8
     dce:	80 81       	ld	r24, Z
     dd0:	8e 7f       	andi	r24, 0xFE	; 254
     dd2:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     dd4:	e7 e0       	ldi	r30, 0x07	; 7
     dd6:	f8 e0       	ldi	r31, 0x08	; 8
     dd8:	80 81       	ld	r24, Z
     dda:	8a 7f       	andi	r24, 0xFA	; 250
     ddc:	80 83       	st	Z, r24
		#define TCC0_PER_BRIGHTNESS (3080 * BRIGHTNESS_DIV)
		TCC0_PER = TCC0_PER_BRIGHTNESS;
     dde:	88 e0       	ldi	r24, 0x08	; 8
     de0:	9c e0       	ldi	r25, 0x0C	; 12
     de2:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     de6:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = (int)(brightness * BRIGHTNESS_FINAL_DIV);
     dea:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     dee:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     dfe:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     e02:	08 95       	ret

00000e04 <_Z12exitEditModev>:
		break;
	}
}

void exitEditMode(){
	setEncMode(OFF);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z10setEncMode11encoderMode>
	currBlinkMaskPtr = NULLBlinkVal;
     e0a:	82 e7       	ldi	r24, 0x72	; 114
     e0c:	91 e2       	ldi	r25, 0x21	; 33
     e0e:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e12:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
	editMode = false;
     e16:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
	TCD0_PER = BUTTON_DELAY;
     e1a:	84 e8       	ldi	r24, 0x84	; 132
     e1c:	9e e1       	ldi	r25, 0x1E	; 30
     e1e:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e22:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	setPermanentMode(false);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 57 06 	call	0xcae	; 0xcae <_Z16setPermanentModeb>
     e2c:	08 95       	ret

00000e2e <__vector_79>:
}



//All ISR
ISR(TCD0_CCA_vect){
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	8f 93       	push	r24
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
	#ifdef INVERT_BUTTON
		PORTC_PIN2CTRL |= PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
     e3e:	e2 e5       	ldi	r30, 0x52	; 82
     e40:	f6 e0       	ldi	r31, 0x06	; 6
     e42:	80 81       	ld	r24, Z
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	80 83       	st	Z, r24
	#else
		PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
    #endif
	
	TCD0_INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
     e48:	e7 e0       	ldi	r30, 0x07	; 7
     e4a:	f9 e0       	ldi	r31, 0x09	; 9
     e4c:	80 81       	ld	r24, Z
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	80 83       	st	Z, r24
} 
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	8f 91       	pop	r24
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <__vector_80>:

ISR(TCD0_CCB_vect){
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
	TCD0_PER = 1000; //Set debounce timer for short press detection
     e74:	88 ee       	ldi	r24, 0xE8	; 232
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e7c:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	longPressDetection = false;
     e80:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
	TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
     e84:	e7 e0       	ldi	r30, 0x07	; 7
     e86:	f9 e0       	ldi	r31, 0x09	; 9
     e88:	80 81       	ld	r24, Z
     e8a:	8b 7f       	andi	r24, 0xFB	; 251
     e8c:	80 83       	st	Z, r24
}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <_Z21buttonRegularResponsev>:

void buttonRegularResponse(){
	if(!editMode){
     ea0:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     ea4:	81 11       	cpse	r24, r1
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <_Z21buttonRegularResponsev+0x26>
		TCD0_PER = 1000; //Set debounce timer for short press detection
     ea8:	88 ee       	ldi	r24, 0xE8	; 232
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     eb0:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
		editMode = true;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <editMode>
		currentSelector = 0;
     eba:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <currentSelector>
		editCounter = 0;
     ebe:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     ec2:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	}
	if(currentMode == DMX){
     ec6:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     eca:	81 11       	cpse	r24, r1
     ecc:	3c c0       	rjmp	.+120    	; 0xf46 <_Z21buttonRegularResponsev+0xa6>
		switch(currentSelector){
     ece:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	11 f1       	breq	.+68     	; 0xf1a <_Z21buttonRegularResponsev+0x7a>
     ed6:	28 f4       	brcc	.+10     	; 0xee2 <_Z21buttonRegularResponsev+0x42>
     ed8:	88 23       	and	r24, r24
     eda:	41 f0       	breq	.+16     	; 0xeec <_Z21buttonRegularResponsev+0x4c>
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	81 f0       	breq	.+32     	; 0xf00 <_Z21buttonRegularResponsev+0x60>
     ee0:	32 c0       	rjmp	.+100    	; 0xf46 <_Z21buttonRegularResponsev+0xa6>
     ee2:	83 30       	cpi	r24, 0x03	; 3
     ee4:	21 f1       	breq	.+72     	; 0xf2e <_Z21buttonRegularResponsev+0x8e>
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	61 f1       	breq	.+88     	; 0xf42 <_Z21buttonRegularResponsev+0xa2>
     eea:	2d c0       	rjmp	.+90     	; 0xf46 <_Z21buttonRegularResponsev+0xa6>
			case 0:
			currBlinkMaskPtr = DMXBlinkVal0;
     eec:	8a ee       	ldi	r24, 0xEA	; 234
     eee:	90 e2       	ldi	r25, 0x20	; 32
     ef0:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     ef4:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z10setEncMode11encoderMode>
			break;
     efe:	23 c0       	rjmp	.+70     	; 0xf46 <_Z21buttonRegularResponsev+0xa6>
			case 1:
			currBlinkMaskPtr = DMXBlinkVal1;
     f00:	89 ec       	ldi	r24, 0xC9	; 201
     f02:	90 e2       	ldi	r25, 0x20	; 32
     f04:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f08:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 100;
     f0c:	84 e6       	ldi	r24, 0x64	; 100
     f0e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			setEncMode(CHANSEL);
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z10setEncMode11encoderMode>
			break;
     f18:	16 c0       	rjmp	.+44     	; 0xf46 <_Z21buttonRegularResponsev+0xa6>
			case 2:
			currBlinkMaskPtr = DMXBlinkVal2;
     f1a:	88 ea       	ldi	r24, 0xA8	; 168
     f1c:	90 e2       	ldi	r25, 0x20	; 32
     f1e:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f22:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 10;
     f26:	8a e0       	ldi	r24, 0x0A	; 10
     f28:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     f2c:	4b c0       	rjmp	.+150    	; 0xfc4 <_Z21buttonRegularResponsev+0x124>
			case 3:
			currBlinkMaskPtr = DMXBlinkVal3;
     f2e:	87 e8       	ldi	r24, 0x87	; 135
     f30:	90 e2       	ldi	r25, 0x20	; 32
     f32:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f36:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     f40:	41 c0       	rjmp	.+130    	; 0xfc4 <_Z21buttonRegularResponsev+0x124>
			case 4:
			exitEditMode();
     f42:	0e 94 02 07 	call	0xe04	; 0xe04 <_Z12exitEditModev>
			break;
		}
	}
	if(currentMode == MAN){
     f46:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	d9 f5       	brne	.+118    	; 0xfc4 <_Z21buttonRegularResponsev+0x124>
		switch(currentSelector){
     f4e:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	71 f0       	breq	.+28     	; 0xf72 <_Z21buttonRegularResponsev+0xd2>
     f56:	18 f0       	brcs	.+6      	; 0xf5e <_Z21buttonRegularResponsev+0xbe>
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	91 f1       	breq	.+100    	; 0xfc0 <_Z21buttonRegularResponsev+0x120>
     f5c:	33 c0       	rjmp	.+102    	; 0xfc4 <_Z21buttonRegularResponsev+0x124>
			case 0:
			currBlinkMaskPtr = MANBlinkVal0;
     f5e:	86 e6       	ldi	r24, 0x66	; 102
     f60:	90 e2       	ldi	r25, 0x20	; 32
     f62:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f66:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z10setEncMode11encoderMode>
			break;
     f70:	29 c0       	rjmp	.+82     	; 0xfc4 <_Z21buttonRegularResponsev+0x124>
			case 1:
			TCD0_CNT = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
     f7a:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
			TCD0_PER = 46875;
     f7e:	8b e1       	ldi	r24, 0x1B	; 27
     f80:	97 eb       	ldi	r25, 0xB7	; 183
     f82:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     f86:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
			TCD0_CCB = 0;
     f8a:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     f8e:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
			TCD0_INTFLAGS |= (1 << 5); //Clear flag because the timer was just at 0
     f92:	ec e0       	ldi	r30, 0x0C	; 12
     f94:	f9 e0       	ldi	r31, 0x09	; 9
     f96:	80 81       	ld	r24, Z
     f98:	80 62       	ori	r24, 0x20	; 32
     f9a:	80 83       	st	Z, r24
			longPressDetection = true;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <__data_end>
			TCD0_INTCTRLB |= TC_CCBINTLVL_LO_gc; //When the button is released before the longPress mark, return to normal operation
     fa2:	e7 e0       	ldi	r30, 0x07	; 7
     fa4:	f9 e0       	ldi	r31, 0x09	; 9
     fa6:	80 81       	ld	r24, Z
     fa8:	84 60       	ori	r24, 0x04	; 4
     faa:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal1;
     fac:	85 e4       	ldi	r24, 0x45	; 69
     fae:	90 e2       	ldi	r25, 0x20	; 32
     fb0:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     fb4:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(BRIGHTSEL);
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z10setEncMode11encoderMode>
			break;
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <_Z21buttonRegularResponsev+0x124>
			case 2:
			exitEditMode();
     fc0:	0e 94 02 07 	call	0xe04	; 0xe04 <_Z12exitEditModev>
			break;
		}
	}
	currentSelector++;
     fc4:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <currentSelector>
     fce:	08 95       	ret

00000fd0 <__vector_77>:
}

//PC2 interrupt when button is pressed
ISR(TCD0_OVF_vect){
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
	
	if(longPressDetection){
     ff2:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
     ff6:	88 23       	and	r24, r24
     ff8:	89 f0       	breq	.+34     	; 0x101c <__vector_77+0x4c>
		setPermanentMode(true);
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	0e 94 57 06 	call	0xcae	; 0xcae <_Z16setPermanentModeb>
		
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc;
    1000:	e7 e0       	ldi	r30, 0x07	; 7
    1002:	f9 e0       	ldi	r31, 0x09	; 9
    1004:	80 81       	ld	r24, Z
    1006:	8b 7f       	andi	r24, 0xFB	; 251
    1008:	80 83       	st	Z, r24
		longPressDetection = false;
    100a:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		//Short press detection again
		TCD0_PER = 1000;
    100e:	88 ee       	ldi	r24, 0xE8	; 232
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    1016:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <__vector_77+0x50>
	}
	else{
		buttonRegularResponse();
    101c:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z21buttonRegularResponsev>
	}
	if(!longPressDetection){
    1020:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
    1024:	81 11       	cpse	r24, r1
    1026:	0a c0       	rjmp	.+20     	; 0x103c <__vector_77+0x6c>
		#ifdef INVERT_BUTTON
			PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //Invert button behaviour
    1028:	e2 e5       	ldi	r30, 0x52	; 82
    102a:	f6 e0       	ldi	r31, 0x06	; 6
    102c:	80 81       	ld	r24, Z
    102e:	8f 7b       	andi	r24, 0xBF	; 191
    1030:	80 83       	st	Z, r24
		#else
			PORTC_PIN2CTRL |= PORT_INVEN_bm;
		#endif
		TCD0_INTCTRLB |= TC_CCAINTLVL_LO_gc; //Setup compare interrupt so input will be un-inverted after release
    1032:	e7 e0       	ldi	r30, 0x07	; 7
    1034:	f9 e0       	ldi	r31, 0x09	; 9
    1036:	80 81       	ld	r24, Z
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	80 83       	st	Z, r24
	}
	
}
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_14>:

ISR(TCC0_OVF_vect){
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
	if(!OVF_firstSam){
    1080:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <OVF_firstSam>
    1084:	81 11       	cpse	r24, r1
    1086:	3c c0       	rjmp	.+120    	; 0x1100 <__vector_14+0xa2>
		if(EncoderMode == CHANSEL){
    1088:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	19 f5       	brne	.+70     	; 0x10d6 <__vector_14+0x78>
			if(DMXChan - dmxMult >= DMXmin && TCC0_CNT >= TCC0_CNT_CHAN){
    1090:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1094:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1098:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    109c:	82 1b       	sub	r24, r18
    109e:	91 09       	sbc	r25, r1
    10a0:	18 16       	cp	r1, r24
    10a2:	19 06       	cpc	r1, r25
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <__vector_14+0x4a>
    10a6:	4d c0       	rjmp	.+154    	; 0x1142 <__vector_14+0xe4>
    10a8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10ac:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10b0:	80 3a       	cpi	r24, 0xA0	; 160
    10b2:	91 05       	cpc	r25, r1
    10b4:	40 f5       	brcc	.+80     	; 0x1106 <__vector_14+0xa8>
    10b6:	45 c0       	rjmp	.+138    	; 0x1142 <__vector_14+0xe4>
				DMXChan -= dmxMult;
				LCD_PRINTDEC(DMXChan, 22, 3);
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
			}
			else if(DMXChan + dmxMult <= DMXMax && TCC0_CNT < TCC0_CNT_CHAN){
    10b8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10bc:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10c0:	80 3a       	cpi	r24, 0xA0	; 160
    10c2:	91 05       	cpc	r25, r1
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <__vector_14+0x6a>
    10c6:	4a c0       	rjmp	.+148    	; 0x115c <__vector_14+0xfe>
				DMXChan += dmxMult;
				LCD_PRINTDEC(DMXChan, 22, 3);
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
			}
			TCC0_CNT = TCC0_CNT_CHAN;
    10c8:	80 ea       	ldi	r24, 0xA0	; 160
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10d0:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10d4:	61 c0       	rjmp	.+194    	; 0x1198 <__vector_14+0x13a>
		}
		else{
			
			if(TCC0_CNT < TCC0_CNT_MODE){
    10d6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10da:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10de:	80 3a       	cpi	r24, 0xA0	; 160
    10e0:	91 05       	cpc	r25, r1
    10e2:	20 f4       	brcc	.+8      	; 0x10ec <__vector_14+0x8e>
				setMode(DMX);
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z7setMode10DMXMANMode>
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <__vector_14+0x94>
			}
			else{
				setMode(MAN);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z7setMode10DMXMANMode>
			}
			TCC0_CNT = TCC0_CNT_MODE;
    10f2:	80 ea       	ldi	r24, 0xA0	; 160
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10fa:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10fe:	4c c0       	rjmp	.+152    	; 0x1198 <__vector_14+0x13a>
		}

	}
	else{
		
		OVF_firstSam = false;
    1100:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <OVF_firstSam>
	}
	
}
    1104:	49 c0       	rjmp	.+146    	; 0x1198 <__vector_14+0x13a>

ISR(TCC0_OVF_vect){
	if(!OVF_firstSam){
		if(EncoderMode == CHANSEL){
			if(DMXChan - dmxMult >= DMXmin && TCC0_CNT >= TCC0_CNT_CHAN){
				DMXChan -= dmxMult;
    1106:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    110a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    110e:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1112:	82 1b       	sub	r24, r18
    1114:	91 09       	sbc	r25, r1
    1116:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    111a:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    111e:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1122:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1126:	43 e0       	ldi	r20, 0x03	; 3
    1128:	66 e1       	ldi	r22, 0x16	; 22
    112a:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    112e:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1132:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1136:	43 e0       	ldi	r20, 0x03	; 3
    1138:	6c e1       	ldi	r22, 0x1C	; 28
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12LCD_PRINTDECjhh>
    1140:	c3 cf       	rjmp	.-122    	; 0x10c8 <__vector_14+0x6a>
			}
			else if(DMXChan + dmxMult <= DMXMax && TCC0_CNT < TCC0_CNT_CHAN){
    1142:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1146:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    114a:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    114e:	82 0f       	add	r24, r18
    1150:	91 1d       	adc	r25, r1
    1152:	81 15       	cp	r24, r1
    1154:	92 40       	sbci	r25, 0x02	; 2
    1156:	0c f4       	brge	.+2      	; 0x115a <__vector_14+0xfc>
    1158:	af cf       	rjmp	.-162    	; 0x10b8 <__vector_14+0x5a>
    115a:	b6 cf       	rjmp	.-148    	; 0x10c8 <__vector_14+0x6a>
				DMXChan += dmxMult;
    115c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1160:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1164:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1168:	82 0f       	add	r24, r18
    116a:	91 1d       	adc	r25, r1
    116c:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    1170:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    1174:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1178:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    117c:	43 e0       	ldi	r20, 0x03	; 3
    117e:	66 e1       	ldi	r22, 0x16	; 22
    1180:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    1184:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1188:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    118c:	43 e0       	ldi	r20, 0x03	; 3
    118e:	6c e1       	ldi	r22, 0x1C	; 28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12LCD_PRINTDECjhh>
    1196:	98 cf       	rjmp	.-208    	; 0x10c8 <__vector_14+0x6a>
	else{
		
		OVF_firstSam = false;
	}
	
}
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <__vector_10>:

ISR(RTC_OVF_vect){
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
	
	if(blinkTimeoutIgnore){
    11dc:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <blinkTimeoutIgnore>
    11e0:	88 23       	and	r24, r24
    11e2:	29 f0       	breq	.+10     	; 0x11ee <__vector_10+0x34>
		editCounter = 0;
    11e4:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
    11e8:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <__vector_10+0x46>
	}
	else
	{
		editCounter++;
    11ee:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    11f2:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <editCounter>
    11fc:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <editCounter+0x1>
	}
	if(editCounter > 15){
    1200:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    1204:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    1208:	40 97       	sbiw	r24, 0x10	; 16
    120a:	48 f0       	brcs	.+18     	; 0x121e <__vector_10+0x64>
		longPressDetection = false;
    120c:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
    1210:	e7 e0       	ldi	r30, 0x07	; 7
    1212:	f9 e0       	ldi	r31, 0x09	; 9
    1214:	80 81       	ld	r24, Z
    1216:	8b 7f       	andi	r24, 0xFB	; 251
    1218:	80 83       	st	Z, r24
		exitEditMode();
    121a:	0e 94 02 07 	call	0xe04	; 0xe04 <_Z12exitEditModev>
	}
}
    121e:	ff 91       	pop	r31
    1220:	ef 91       	pop	r30
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_88>:

ISR(USARTD0_RXC_vect){//Interrupt for new DMX char
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	uint16_t USART_data = USARTD0_DATA;
    1262:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    1266:	30 e0       	ldi	r19, 0x00	; 0
	if(cnt == DMXChan){//If DMX channel matches the set DMX channel
    1268:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    126c:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    1270:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1274:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1278:	48 17       	cp	r20, r24
    127a:	59 07       	cpc	r21, r25
    127c:	31 f4       	brne	.+12     	; 0x128a <__vector_88+0x4a>
		finalRes = USART_data << 8; //Buffer 8 MSB
    127e:	92 2f       	mov	r25, r18
    1280:	88 27       	eor	r24, r24
    1282:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    1286:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		//LCD_PRINTDEC(USART_data, 16, 5);
	}
	if(cnt == DMXChan + 1){//If DMX channel matches the set DMX channel + 1
    128a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    128e:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1292:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    1296:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	84 17       	cp	r24, r20
    129e:	95 07       	cpc	r25, r21
    12a0:	a9 f4       	brne	.+42     	; 0x12cc <__vector_88+0x8c>
		//LCD_PRINTDEC(USART_data, 0, 5);
		finalRes |= USART_data; //Buffer LSB
    12a2:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    12a6:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    12aa:	82 2b       	or	r24, r18
    12ac:	93 2b       	or	r25, r19
    12ae:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    12b2:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		TCE0_CCABUF = finalRes; //Set compare register for PWM
    12b6:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    12ba:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    12be:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
    12c2:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
		
		lt = true;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
	}

	if(DMXErrFlag){
    12cc:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    12d0:	88 23       	and	r24, r24
    12d2:	59 f0       	breq	.+22     	; 0x12ea <__vector_88+0xaa>
		lt = true;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
		if(cnt == 0 && USART_data == 0){
    12da:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    12de:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    12e2:	89 2b       	or	r24, r25
    12e4:	11 f4       	brne	.+4      	; 0x12ea <__vector_88+0xaa>
    12e6:	23 2b       	or	r18, r19
    12e8:	71 f0       	breq	.+28     	; 0x1306 <__vector_88+0xc6>
			DMXErrFlag = false;
			LCD_PRINT("      ", 10);
			lt = true;
		}
	}
	DMXErrCnt = 0;
    12ea:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    12ee:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	cnt++;//Increment channel counter
    12f2:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    12f6:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <cnt>
    1300:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <cnt+0x1>
}
    1304:	0b c0       	rjmp	.+22     	; 0x131c <__vector_88+0xdc>
	}

	if(DMXErrFlag){
		lt = true;
		if(cnt == 0 && USART_data == 0){
			DMXErrFlag = false;
    1306:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <DMXErrFlag>
			LCD_PRINT("      ", 10);
    130a:	6a e0       	ldi	r22, 0x0A	; 10
    130c:	8d e0       	ldi	r24, 0x0D	; 13
    130e:	91 e2       	ldi	r25, 0x21	; 33
    1310:	0e 94 61 05 	call	0xac2	; 0xac2 <_Z9LCD_PRINTPch>
			lt = true;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
    131a:	e7 cf       	rjmp	.-50     	; 0x12ea <__vector_88+0xaa>
		}
	}
	DMXErrCnt = 0;
	cnt++;//Increment channel counter
}
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_20>:

ISR(TCC1_OVF_vect){
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	cf 93       	push	r28
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
	cnt = 0; //Reset counter if there hasn't been any signal change in 1196 us on the DMX line (PD2)
    1362:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <cnt>
    1366:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <cnt+0x1>
	DMXErrCnt++;
    136a:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    136e:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <DMXErrCnt>
    1378:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <DMXErrCnt+0x1>
	if((DMXErrCnt > 836) && !DMXErrFlag){ //If there hasn't been any change in 1 second
    137c:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    1380:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    1384:	85 34       	cpi	r24, 0x45	; 69
    1386:	93 40       	sbci	r25, 0x03	; 3
    1388:	90 f0       	brcs	.+36     	; 0x13ae <__vector_20+0x70>
    138a:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    138e:	81 11       	cpse	r24, r1
    1390:	0e c0       	rjmp	.+28     	; 0x13ae <__vector_20+0x70>
		DMXErrFlag = true;
    1392:	c1 e0       	ldi	r28, 0x01	; 1
    1394:	c0 93 25 21 	sts	0x2125, r28	; 0x802125 <DMXErrFlag>
		LCD_PRINT("NO DMX", 10);
    1398:	6a e0       	ldi	r22, 0x0A	; 10
    139a:	84 e1       	ldi	r24, 0x14	; 20
    139c:	91 e2       	ldi	r25, 0x21	; 33
    139e:	0e 94 61 05 	call	0xac2	; 0xac2 <_Z9LCD_PRINTPch>
		lt = true;
    13a2:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
		DMXErrCnt = 0;
    13a6:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    13aa:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	}
	
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	cf 91       	pop	r28
    13b4:	bf 91       	pop	r27
    13b6:	af 91       	pop	r26
    13b8:	9f 91       	pop	r25
    13ba:	8f 91       	pop	r24
    13bc:	7f 91       	pop	r23
    13be:	6f 91       	pop	r22
    13c0:	5f 91       	pop	r21
    13c2:	4f 91       	pop	r20
    13c4:	3f 91       	pop	r19
    13c6:	2f 91       	pop	r18
    13c8:	0f 90       	pop	r0
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	0f 90       	pop	r0
    13ce:	1f 90       	pop	r1
    13d0:	18 95       	reti

000013d2 <main>:

int main(void)
{
	PORTC_DIRSET = (1 << MOSI_PIN) | (1 << SS_PIN) | (1 << SCK_PIN) | (1 << RS_PIN); //Set all pins used for communication to output
    13d2:	88 eb       	ldi	r24, 0xB8	; 184
    13d4:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	clk_set_32MHz();
    13d8:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z13clk_set_32MHzv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13dc:	2f ef       	ldi	r18, 0xFF	; 255
    13de:	85 ed       	ldi	r24, 0xD5	; 213
    13e0:	96 e0       	ldi	r25, 0x06	; 6
    13e2:	21 50       	subi	r18, 0x01	; 1
    13e4:	80 40       	sbci	r24, 0x00	; 0
    13e6:	90 40       	sbci	r25, 0x00	; 0
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <main+0x10>
    13ea:	00 c0       	rjmp	.+0      	; 0x13ec <main+0x1a>
    13ec:	00 00       	nop
	_delay_ms(70);
	setup_PWM();
    13ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z9setup_PWMv>
	update_RAM_EEPROM();
    13f2:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z17update_RAM_EEPROMv>
    setup_SPI();
    13f6:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z9setup_SPIv>
    13fa:	2f ef       	ldi	r18, 0xFF	; 255
    13fc:	83 ec       	ldi	r24, 0xC3	; 195
    13fe:	99 e0       	ldi	r25, 0x09	; 9
    1400:	21 50       	subi	r18, 0x01	; 1
    1402:	80 40       	sbci	r24, 0x00	; 0
    1404:	90 40       	sbci	r25, 0x00	; 0
    1406:	e1 f7       	brne	.-8      	; 0x1400 <main+0x2e>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <main+0x38>
    140a:	00 00       	nop
    _delay_ms(100);
    setup_disp();
    140c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z10setup_dispv>
	setup_btn();
    1410:	0e 94 b0 01 	call	0x360	; 0x360 <_Z9setup_btnv>
	QDEC_INIT();
    1414:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z9QDEC_INITv>
	setup_blink();
    1418:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z11setup_blinkv>
	DMX_init();
    141c:	0e 94 16 02 	call	0x42c	; 0x42c <_Z8DMX_initv>
	updateDisp();
    1420:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_Z10updateDispv>
	setup_int();
    1424:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z9setup_intv>
		if(editMode){ //If the display is in edit mode update the display
			if(EncoderMode == BRIGHTSEL){
				updateBrightness();
			}
			updateDisp();
			lt = true;
    1428:	c1 e0       	ldi	r28, 0x01	; 1
	updateDisp();
	setup_int();

    while (1) 
    {
		if(editMode){ //If the display is in edit mode update the display
    142a:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
    142e:	88 23       	and	r24, r24
    1430:	59 f0       	breq	.+22     	; 0x1448 <main+0x76>
			if(EncoderMode == BRIGHTSEL){
    1432:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	11 f4       	brne	.+4      	; 0x143e <main+0x6c>
				updateBrightness();
    143a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_Z16updateBrightnessv>
			}
			updateDisp();
    143e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_Z10updateDispv>
			lt = true;
    1442:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <main+0x86>
		}
		else{ 
			if (lt) //If lt is altered by another factor update the display as well
    1448:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <lt>
    144c:	88 23       	and	r24, r24
    144e:	21 f0       	breq	.+8      	; 0x1458 <main+0x86>
			{
				updateDisp();
    1450:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_Z10updateDispv>
				lt = false;
    1454:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <lt>
    1458:	2f ef       	ldi	r18, 0xFF	; 255
    145a:	83 ef       	ldi	r24, 0xF3	; 243
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	80 40       	sbci	r24, 0x00	; 0
    1462:	90 40       	sbci	r25, 0x00	; 0
    1464:	e1 f7       	brne	.-8      	; 0x145e <main+0x8c>
    1466:	00 c0       	rjmp	.+0      	; 0x1468 <main+0x96>
    1468:	00 00       	nop
    146a:	df cf       	rjmp	.-66     	; 0x142a <main+0x58>

0000146c <__divsf3>:
    146c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__divsf3x>
    1470:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_round>
    1474:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_pscB>
    1478:	58 f0       	brcs	.+22     	; 0x1490 <__divsf3+0x24>
    147a:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_pscA>
    147e:	40 f0       	brcs	.+16     	; 0x1490 <__divsf3+0x24>
    1480:	29 f4       	brne	.+10     	; 0x148c <__divsf3+0x20>
    1482:	5f 3f       	cpi	r21, 0xFF	; 255
    1484:	29 f0       	breq	.+10     	; 0x1490 <__divsf3+0x24>
    1486:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    148a:	51 11       	cpse	r21, r1
    148c:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    1490:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>

00001494 <__divsf3x>:
    1494:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_split3>
    1498:	68 f3       	brcs	.-38     	; 0x1474 <__divsf3+0x8>

0000149a <__divsf3_pse>:
    149a:	99 23       	and	r25, r25
    149c:	b1 f3       	breq	.-20     	; 0x148a <__divsf3+0x1e>
    149e:	55 23       	and	r21, r21
    14a0:	91 f3       	breq	.-28     	; 0x1486 <__divsf3+0x1a>
    14a2:	95 1b       	sub	r25, r21
    14a4:	55 0b       	sbc	r21, r21
    14a6:	bb 27       	eor	r27, r27
    14a8:	aa 27       	eor	r26, r26
    14aa:	62 17       	cp	r22, r18
    14ac:	73 07       	cpc	r23, r19
    14ae:	84 07       	cpc	r24, r20
    14b0:	38 f0       	brcs	.+14     	; 0x14c0 <__divsf3_pse+0x26>
    14b2:	9f 5f       	subi	r25, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	44 1f       	adc	r20, r20
    14bc:	aa 1f       	adc	r26, r26
    14be:	a9 f3       	breq	.-22     	; 0x14aa <__divsf3_pse+0x10>
    14c0:	35 d0       	rcall	.+106    	; 0x152c <__divsf3_pse+0x92>
    14c2:	0e 2e       	mov	r0, r30
    14c4:	3a f0       	brmi	.+14     	; 0x14d4 <__divsf3_pse+0x3a>
    14c6:	e0 e8       	ldi	r30, 0x80	; 128
    14c8:	32 d0       	rcall	.+100    	; 0x152e <__divsf3_pse+0x94>
    14ca:	91 50       	subi	r25, 0x01	; 1
    14cc:	50 40       	sbci	r21, 0x00	; 0
    14ce:	e6 95       	lsr	r30
    14d0:	00 1c       	adc	r0, r0
    14d2:	ca f7       	brpl	.-14     	; 0x14c6 <__divsf3_pse+0x2c>
    14d4:	2b d0       	rcall	.+86     	; 0x152c <__divsf3_pse+0x92>
    14d6:	fe 2f       	mov	r31, r30
    14d8:	29 d0       	rcall	.+82     	; 0x152c <__divsf3_pse+0x92>
    14da:	66 0f       	add	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	bb 1f       	adc	r27, r27
    14e2:	26 17       	cp	r18, r22
    14e4:	37 07       	cpc	r19, r23
    14e6:	48 07       	cpc	r20, r24
    14e8:	ab 07       	cpc	r26, r27
    14ea:	b0 e8       	ldi	r27, 0x80	; 128
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <__divsf3_pse+0x56>
    14ee:	bb 0b       	sbc	r27, r27
    14f0:	80 2d       	mov	r24, r0
    14f2:	bf 01       	movw	r22, r30
    14f4:	ff 27       	eor	r31, r31
    14f6:	93 58       	subi	r25, 0x83	; 131
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	3a f0       	brmi	.+14     	; 0x150a <__divsf3_pse+0x70>
    14fc:	9e 3f       	cpi	r25, 0xFE	; 254
    14fe:	51 05       	cpc	r21, r1
    1500:	78 f0       	brcs	.+30     	; 0x1520 <__divsf3_pse+0x86>
    1502:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    1506:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    150a:	5f 3f       	cpi	r21, 0xFF	; 255
    150c:	e4 f3       	brlt	.-8      	; 0x1506 <__divsf3_pse+0x6c>
    150e:	98 3e       	cpi	r25, 0xE8	; 232
    1510:	d4 f3       	brlt	.-12     	; 0x1506 <__divsf3_pse+0x6c>
    1512:	86 95       	lsr	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	b7 95       	ror	r27
    151a:	f7 95       	ror	r31
    151c:	9f 5f       	subi	r25, 0xFF	; 255
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__divsf3_pse+0x78>
    1520:	88 0f       	add	r24, r24
    1522:	91 1d       	adc	r25, r1
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	97 f9       	bld	r25, 7
    152a:	08 95       	ret
    152c:	e1 e0       	ldi	r30, 0x01	; 1
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	bb 1f       	adc	r27, r27
    1536:	62 17       	cp	r22, r18
    1538:	73 07       	cpc	r23, r19
    153a:	84 07       	cpc	r24, r20
    153c:	ba 07       	cpc	r27, r26
    153e:	20 f0       	brcs	.+8      	; 0x1548 <__divsf3_pse+0xae>
    1540:	62 1b       	sub	r22, r18
    1542:	73 0b       	sbc	r23, r19
    1544:	84 0b       	sbc	r24, r20
    1546:	ba 0b       	sbc	r27, r26
    1548:	ee 1f       	adc	r30, r30
    154a:	88 f7       	brcc	.-30     	; 0x152e <__divsf3_pse+0x94>
    154c:	e0 95       	com	r30
    154e:	08 95       	ret

00001550 <__fixunssfsi>:
    1550:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_splitA>
    1554:	88 f0       	brcs	.+34     	; 0x1578 <__fixunssfsi+0x28>
    1556:	9f 57       	subi	r25, 0x7F	; 127
    1558:	98 f0       	brcs	.+38     	; 0x1580 <__fixunssfsi+0x30>
    155a:	b9 2f       	mov	r27, r25
    155c:	99 27       	eor	r25, r25
    155e:	b7 51       	subi	r27, 0x17	; 23
    1560:	b0 f0       	brcs	.+44     	; 0x158e <__fixunssfsi+0x3e>
    1562:	e1 f0       	breq	.+56     	; 0x159c <__fixunssfsi+0x4c>
    1564:	66 0f       	add	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	1a f0       	brmi	.+6      	; 0x1574 <__fixunssfsi+0x24>
    156e:	ba 95       	dec	r27
    1570:	c9 f7       	brne	.-14     	; 0x1564 <__fixunssfsi+0x14>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <__fixunssfsi+0x4c>
    1574:	b1 30       	cpi	r27, 0x01	; 1
    1576:	91 f0       	breq	.+36     	; 0x159c <__fixunssfsi+0x4c>
    1578:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__fp_zero>
    157c:	b1 e0       	ldi	r27, 0x01	; 1
    157e:	08 95       	ret
    1580:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_zero>
    1584:	67 2f       	mov	r22, r23
    1586:	78 2f       	mov	r23, r24
    1588:	88 27       	eor	r24, r24
    158a:	b8 5f       	subi	r27, 0xF8	; 248
    158c:	39 f0       	breq	.+14     	; 0x159c <__fixunssfsi+0x4c>
    158e:	b9 3f       	cpi	r27, 0xF9	; 249
    1590:	cc f3       	brlt	.-14     	; 0x1584 <__fixunssfsi+0x34>
    1592:	86 95       	lsr	r24
    1594:	77 95       	ror	r23
    1596:	67 95       	ror	r22
    1598:	b3 95       	inc	r27
    159a:	d9 f7       	brne	.-10     	; 0x1592 <__fixunssfsi+0x42>
    159c:	3e f4       	brtc	.+14     	; 0x15ac <__fixunssfsi+0x5c>
    159e:	90 95       	com	r25
    15a0:	80 95       	com	r24
    15a2:	70 95       	com	r23
    15a4:	61 95       	neg	r22
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	08 95       	ret

000015ae <__floatunsisf>:
    15ae:	e8 94       	clt
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <__floatsisf+0x12>

000015b2 <__floatsisf>:
    15b2:	97 fb       	bst	r25, 7
    15b4:	3e f4       	brtc	.+14     	; 0x15c4 <__floatsisf+0x12>
    15b6:	90 95       	com	r25
    15b8:	80 95       	com	r24
    15ba:	70 95       	com	r23
    15bc:	61 95       	neg	r22
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	8f 4f       	sbci	r24, 0xFF	; 255
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	99 23       	and	r25, r25
    15c6:	a9 f0       	breq	.+42     	; 0x15f2 <__floatsisf+0x40>
    15c8:	f9 2f       	mov	r31, r25
    15ca:	96 e9       	ldi	r25, 0x96	; 150
    15cc:	bb 27       	eor	r27, r27
    15ce:	93 95       	inc	r25
    15d0:	f6 95       	lsr	r31
    15d2:	87 95       	ror	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	b7 95       	ror	r27
    15da:	f1 11       	cpse	r31, r1
    15dc:	f8 cf       	rjmp	.-16     	; 0x15ce <__floatsisf+0x1c>
    15de:	fa f4       	brpl	.+62     	; 0x161e <__floatsisf+0x6c>
    15e0:	bb 0f       	add	r27, r27
    15e2:	11 f4       	brne	.+4      	; 0x15e8 <__floatsisf+0x36>
    15e4:	60 ff       	sbrs	r22, 0
    15e6:	1b c0       	rjmp	.+54     	; 0x161e <__floatsisf+0x6c>
    15e8:	6f 5f       	subi	r22, 0xFF	; 255
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	8f 4f       	sbci	r24, 0xFF	; 255
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <__floatsisf+0x6c>
    15f2:	88 23       	and	r24, r24
    15f4:	11 f0       	breq	.+4      	; 0x15fa <__floatsisf+0x48>
    15f6:	96 e9       	ldi	r25, 0x96	; 150
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <__floatsisf+0x6a>
    15fa:	77 23       	and	r23, r23
    15fc:	21 f0       	breq	.+8      	; 0x1606 <__floatsisf+0x54>
    15fe:	9e e8       	ldi	r25, 0x8E	; 142
    1600:	87 2f       	mov	r24, r23
    1602:	76 2f       	mov	r23, r22
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <__floatsisf+0x5e>
    1606:	66 23       	and	r22, r22
    1608:	71 f0       	breq	.+28     	; 0x1626 <__floatsisf+0x74>
    160a:	96 e8       	ldi	r25, 0x86	; 134
    160c:	86 2f       	mov	r24, r22
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	2a f0       	brmi	.+10     	; 0x161e <__floatsisf+0x6c>
    1614:	9a 95       	dec	r25
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	da f7       	brpl	.-10     	; 0x1614 <__floatsisf+0x62>
    161e:	88 0f       	add	r24, r24
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret

00001628 <__fp_inf>:
    1628:	97 f9       	bld	r25, 7
    162a:	9f 67       	ori	r25, 0x7F	; 127
    162c:	80 e8       	ldi	r24, 0x80	; 128
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	08 95       	ret

00001634 <__fp_nan>:
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	80 ec       	ldi	r24, 0xC0	; 192
    1638:	08 95       	ret

0000163a <__fp_pscA>:
    163a:	00 24       	eor	r0, r0
    163c:	0a 94       	dec	r0
    163e:	16 16       	cp	r1, r22
    1640:	17 06       	cpc	r1, r23
    1642:	18 06       	cpc	r1, r24
    1644:	09 06       	cpc	r0, r25
    1646:	08 95       	ret

00001648 <__fp_pscB>:
    1648:	00 24       	eor	r0, r0
    164a:	0a 94       	dec	r0
    164c:	12 16       	cp	r1, r18
    164e:	13 06       	cpc	r1, r19
    1650:	14 06       	cpc	r1, r20
    1652:	05 06       	cpc	r0, r21
    1654:	08 95       	ret

00001656 <__fp_round>:
    1656:	09 2e       	mov	r0, r25
    1658:	03 94       	inc	r0
    165a:	00 0c       	add	r0, r0
    165c:	11 f4       	brne	.+4      	; 0x1662 <__fp_round+0xc>
    165e:	88 23       	and	r24, r24
    1660:	52 f0       	brmi	.+20     	; 0x1676 <__fp_round+0x20>
    1662:	bb 0f       	add	r27, r27
    1664:	40 f4       	brcc	.+16     	; 0x1676 <__fp_round+0x20>
    1666:	bf 2b       	or	r27, r31
    1668:	11 f4       	brne	.+4      	; 0x166e <__fp_round+0x18>
    166a:	60 ff       	sbrs	r22, 0
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <__fp_round+0x20>
    166e:	6f 5f       	subi	r22, 0xFF	; 255
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	08 95       	ret

00001678 <__fp_split3>:
    1678:	57 fd       	sbrc	r21, 7
    167a:	90 58       	subi	r25, 0x80	; 128
    167c:	44 0f       	add	r20, r20
    167e:	55 1f       	adc	r21, r21
    1680:	59 f0       	breq	.+22     	; 0x1698 <__fp_splitA+0x10>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	71 f0       	breq	.+28     	; 0x16a2 <__fp_splitA+0x1a>
    1686:	47 95       	ror	r20

00001688 <__fp_splitA>:
    1688:	88 0f       	add	r24, r24
    168a:	97 fb       	bst	r25, 7
    168c:	99 1f       	adc	r25, r25
    168e:	61 f0       	breq	.+24     	; 0x16a8 <__fp_splitA+0x20>
    1690:	9f 3f       	cpi	r25, 0xFF	; 255
    1692:	79 f0       	breq	.+30     	; 0x16b2 <__fp_splitA+0x2a>
    1694:	87 95       	ror	r24
    1696:	08 95       	ret
    1698:	12 16       	cp	r1, r18
    169a:	13 06       	cpc	r1, r19
    169c:	14 06       	cpc	r1, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	f2 cf       	rjmp	.-28     	; 0x1686 <__fp_split3+0xe>
    16a2:	46 95       	lsr	r20
    16a4:	f1 df       	rcall	.-30     	; 0x1688 <__fp_splitA>
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <__fp_splitA+0x30>
    16a8:	16 16       	cp	r1, r22
    16aa:	17 06       	cpc	r1, r23
    16ac:	18 06       	cpc	r1, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	f1 cf       	rjmp	.-30     	; 0x1694 <__fp_splitA+0xc>
    16b2:	86 95       	lsr	r24
    16b4:	71 05       	cpc	r23, r1
    16b6:	61 05       	cpc	r22, r1
    16b8:	08 94       	sec
    16ba:	08 95       	ret

000016bc <__fp_zero>:
    16bc:	e8 94       	clt

000016be <__fp_szero>:
    16be:	bb 27       	eor	r27, r27
    16c0:	66 27       	eor	r22, r22
    16c2:	77 27       	eor	r23, r23
    16c4:	cb 01       	movw	r24, r22
    16c6:	97 f9       	bld	r25, 7
    16c8:	08 95       	ret

000016ca <__gesf2>:
    16ca:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_cmp>
    16ce:	08 f4       	brcc	.+2      	; 0x16d2 <__gesf2+0x8>
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	08 95       	ret

000016d4 <__mulsf3>:
    16d4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3x>
    16d8:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_round>
    16dc:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_pscA>
    16e0:	38 f0       	brcs	.+14     	; 0x16f0 <__mulsf3+0x1c>
    16e2:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_pscB>
    16e6:	20 f0       	brcs	.+8      	; 0x16f0 <__mulsf3+0x1c>
    16e8:	95 23       	and	r25, r21
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <__mulsf3+0x1c>
    16ec:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    16f0:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>
    16f4:	11 24       	eor	r1, r1
    16f6:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>

000016fa <__mulsf3x>:
    16fa:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_split3>
    16fe:	70 f3       	brcs	.-36     	; 0x16dc <__mulsf3+0x8>

00001700 <__mulsf3_pse>:
    1700:	95 9f       	mul	r25, r21
    1702:	c1 f3       	breq	.-16     	; 0x16f4 <__mulsf3+0x20>
    1704:	95 0f       	add	r25, r21
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	55 1f       	adc	r21, r21
    170a:	62 9f       	mul	r22, r18
    170c:	f0 01       	movw	r30, r0
    170e:	72 9f       	mul	r23, r18
    1710:	bb 27       	eor	r27, r27
    1712:	f0 0d       	add	r31, r0
    1714:	b1 1d       	adc	r27, r1
    1716:	63 9f       	mul	r22, r19
    1718:	aa 27       	eor	r26, r26
    171a:	f0 0d       	add	r31, r0
    171c:	b1 1d       	adc	r27, r1
    171e:	aa 1f       	adc	r26, r26
    1720:	64 9f       	mul	r22, r20
    1722:	66 27       	eor	r22, r22
    1724:	b0 0d       	add	r27, r0
    1726:	a1 1d       	adc	r26, r1
    1728:	66 1f       	adc	r22, r22
    172a:	82 9f       	mul	r24, r18
    172c:	22 27       	eor	r18, r18
    172e:	b0 0d       	add	r27, r0
    1730:	a1 1d       	adc	r26, r1
    1732:	62 1f       	adc	r22, r18
    1734:	73 9f       	mul	r23, r19
    1736:	b0 0d       	add	r27, r0
    1738:	a1 1d       	adc	r26, r1
    173a:	62 1f       	adc	r22, r18
    173c:	83 9f       	mul	r24, r19
    173e:	a0 0d       	add	r26, r0
    1740:	61 1d       	adc	r22, r1
    1742:	22 1f       	adc	r18, r18
    1744:	74 9f       	mul	r23, r20
    1746:	33 27       	eor	r19, r19
    1748:	a0 0d       	add	r26, r0
    174a:	61 1d       	adc	r22, r1
    174c:	23 1f       	adc	r18, r19
    174e:	84 9f       	mul	r24, r20
    1750:	60 0d       	add	r22, r0
    1752:	21 1d       	adc	r18, r1
    1754:	82 2f       	mov	r24, r18
    1756:	76 2f       	mov	r23, r22
    1758:	6a 2f       	mov	r22, r26
    175a:	11 24       	eor	r1, r1
    175c:	9f 57       	subi	r25, 0x7F	; 127
    175e:	50 40       	sbci	r21, 0x00	; 0
    1760:	9a f0       	brmi	.+38     	; 0x1788 <__mulsf3_pse+0x88>
    1762:	f1 f0       	breq	.+60     	; 0x17a0 <__mulsf3_pse+0xa0>
    1764:	88 23       	and	r24, r24
    1766:	4a f0       	brmi	.+18     	; 0x177a <__mulsf3_pse+0x7a>
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	bb 1f       	adc	r27, r27
    176e:	66 1f       	adc	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	91 50       	subi	r25, 0x01	; 1
    1776:	50 40       	sbci	r21, 0x00	; 0
    1778:	a9 f7       	brne	.-22     	; 0x1764 <__mulsf3_pse+0x64>
    177a:	9e 3f       	cpi	r25, 0xFE	; 254
    177c:	51 05       	cpc	r21, r1
    177e:	80 f0       	brcs	.+32     	; 0x17a0 <__mulsf3_pse+0xa0>
    1780:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    1784:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    1788:	5f 3f       	cpi	r21, 0xFF	; 255
    178a:	e4 f3       	brlt	.-8      	; 0x1784 <__mulsf3_pse+0x84>
    178c:	98 3e       	cpi	r25, 0xE8	; 232
    178e:	d4 f3       	brlt	.-12     	; 0x1784 <__mulsf3_pse+0x84>
    1790:	86 95       	lsr	r24
    1792:	77 95       	ror	r23
    1794:	67 95       	ror	r22
    1796:	b7 95       	ror	r27
    1798:	f7 95       	ror	r31
    179a:	e7 95       	ror	r30
    179c:	9f 5f       	subi	r25, 0xFF	; 255
    179e:	c1 f7       	brne	.-16     	; 0x1790 <__mulsf3_pse+0x90>
    17a0:	fe 2b       	or	r31, r30
    17a2:	88 0f       	add	r24, r24
    17a4:	91 1d       	adc	r25, r1
    17a6:	96 95       	lsr	r25
    17a8:	87 95       	ror	r24
    17aa:	97 f9       	bld	r25, 7
    17ac:	08 95       	ret

000017ae <__fp_cmp>:
    17ae:	99 0f       	add	r25, r25
    17b0:	00 08       	sbc	r0, r0
    17b2:	55 0f       	add	r21, r21
    17b4:	aa 0b       	sbc	r26, r26
    17b6:	e0 e8       	ldi	r30, 0x80	; 128
    17b8:	fe ef       	ldi	r31, 0xFE	; 254
    17ba:	16 16       	cp	r1, r22
    17bc:	17 06       	cpc	r1, r23
    17be:	e8 07       	cpc	r30, r24
    17c0:	f9 07       	cpc	r31, r25
    17c2:	c0 f0       	brcs	.+48     	; 0x17f4 <__fp_cmp+0x46>
    17c4:	12 16       	cp	r1, r18
    17c6:	13 06       	cpc	r1, r19
    17c8:	e4 07       	cpc	r30, r20
    17ca:	f5 07       	cpc	r31, r21
    17cc:	98 f0       	brcs	.+38     	; 0x17f4 <__fp_cmp+0x46>
    17ce:	62 1b       	sub	r22, r18
    17d0:	73 0b       	sbc	r23, r19
    17d2:	84 0b       	sbc	r24, r20
    17d4:	95 0b       	sbc	r25, r21
    17d6:	39 f4       	brne	.+14     	; 0x17e6 <__fp_cmp+0x38>
    17d8:	0a 26       	eor	r0, r26
    17da:	61 f0       	breq	.+24     	; 0x17f4 <__fp_cmp+0x46>
    17dc:	23 2b       	or	r18, r19
    17de:	24 2b       	or	r18, r20
    17e0:	25 2b       	or	r18, r21
    17e2:	21 f4       	brne	.+8      	; 0x17ec <__fp_cmp+0x3e>
    17e4:	08 95       	ret
    17e6:	0a 26       	eor	r0, r26
    17e8:	09 f4       	brne	.+2      	; 0x17ec <__fp_cmp+0x3e>
    17ea:	a1 40       	sbci	r26, 0x01	; 1
    17ec:	a6 95       	lsr	r26
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	81 1d       	adc	r24, r1
    17f2:	81 1d       	adc	r24, r1
    17f4:	08 95       	ret

000017f6 <__muldi3>:
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	1f 93       	push	r17
    17fc:	0f 93       	push	r16
    17fe:	9a 9d       	mul	r25, r10
    1800:	f0 2d       	mov	r31, r0
    1802:	21 9f       	mul	r18, r17
    1804:	f0 0d       	add	r31, r0
    1806:	8b 9d       	mul	r24, r11
    1808:	f0 0d       	add	r31, r0
    180a:	8a 9d       	mul	r24, r10
    180c:	e0 2d       	mov	r30, r0
    180e:	f1 0d       	add	r31, r1
    1810:	03 9f       	mul	r16, r19
    1812:	f0 0d       	add	r31, r0
    1814:	02 9f       	mul	r16, r18
    1816:	e0 0d       	add	r30, r0
    1818:	f1 1d       	adc	r31, r1
    181a:	4e 9d       	mul	r20, r14
    181c:	e0 0d       	add	r30, r0
    181e:	f1 1d       	adc	r31, r1
    1820:	5e 9d       	mul	r21, r14
    1822:	f0 0d       	add	r31, r0
    1824:	4f 9d       	mul	r20, r15
    1826:	f0 0d       	add	r31, r0
    1828:	7f 93       	push	r23
    182a:	6f 93       	push	r22
    182c:	bf 92       	push	r11
    182e:	af 92       	push	r10
    1830:	5f 93       	push	r21
    1832:	4f 93       	push	r20
    1834:	d5 01       	movw	r26, r10
    1836:	0e 94 94 0c 	call	0x1928	; 0x1928 <__umulhisi3>
    183a:	8b 01       	movw	r16, r22
    183c:	ac 01       	movw	r20, r24
    183e:	d7 01       	movw	r26, r14
    1840:	0e 94 94 0c 	call	0x1928	; 0x1928 <__umulhisi3>
    1844:	eb 01       	movw	r28, r22
    1846:	e8 0f       	add	r30, r24
    1848:	f9 1f       	adc	r31, r25
    184a:	d6 01       	movw	r26, r12
    184c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__muldi3_6>
    1850:	2f 91       	pop	r18
    1852:	3f 91       	pop	r19
    1854:	d6 01       	movw	r26, r12
    1856:	0e 94 94 0c 	call	0x1928	; 0x1928 <__umulhisi3>
    185a:	c6 0f       	add	r28, r22
    185c:	d7 1f       	adc	r29, r23
    185e:	e8 1f       	adc	r30, r24
    1860:	f9 1f       	adc	r31, r25
    1862:	af 91       	pop	r26
    1864:	bf 91       	pop	r27
    1866:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__muldi3_6>
    186a:	2f 91       	pop	r18
    186c:	3f 91       	pop	r19
    186e:	0e 94 94 0c 	call	0x1928	; 0x1928 <__umulhisi3>
    1872:	c6 0f       	add	r28, r22
    1874:	d7 1f       	adc	r29, r23
    1876:	e8 1f       	adc	r30, r24
    1878:	f9 1f       	adc	r31, r25
    187a:	d6 01       	movw	r26, r12
    187c:	0e 94 94 0c 	call	0x1928	; 0x1928 <__umulhisi3>
    1880:	e6 0f       	add	r30, r22
    1882:	f7 1f       	adc	r31, r23
    1884:	98 01       	movw	r18, r16
    1886:	be 01       	movw	r22, r28
    1888:	cf 01       	movw	r24, r30
    188a:	11 24       	eor	r1, r1
    188c:	0f 91       	pop	r16
    188e:	1f 91       	pop	r17
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <__muldi3_6>:
    1896:	0e 94 94 0c 	call	0x1928	; 0x1928 <__umulhisi3>
    189a:	46 0f       	add	r20, r22
    189c:	57 1f       	adc	r21, r23
    189e:	c8 1f       	adc	r28, r24
    18a0:	d9 1f       	adc	r29, r25
    18a2:	08 f4       	brcc	.+2      	; 0x18a6 <__muldi3_6+0x10>
    18a4:	31 96       	adiw	r30, 0x01	; 1
    18a6:	08 95       	ret

000018a8 <__ashldi3>:
    18a8:	0f 93       	push	r16
    18aa:	08 30       	cpi	r16, 0x08	; 8
    18ac:	90 f0       	brcs	.+36     	; 0x18d2 <__ashldi3+0x2a>
    18ae:	98 2f       	mov	r25, r24
    18b0:	87 2f       	mov	r24, r23
    18b2:	76 2f       	mov	r23, r22
    18b4:	65 2f       	mov	r22, r21
    18b6:	54 2f       	mov	r21, r20
    18b8:	43 2f       	mov	r20, r19
    18ba:	32 2f       	mov	r19, r18
    18bc:	22 27       	eor	r18, r18
    18be:	08 50       	subi	r16, 0x08	; 8
    18c0:	f4 cf       	rjmp	.-24     	; 0x18aa <__ashldi3+0x2>
    18c2:	22 0f       	add	r18, r18
    18c4:	33 1f       	adc	r19, r19
    18c6:	44 1f       	adc	r20, r20
    18c8:	55 1f       	adc	r21, r21
    18ca:	66 1f       	adc	r22, r22
    18cc:	77 1f       	adc	r23, r23
    18ce:	88 1f       	adc	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 95       	dec	r16
    18d4:	b2 f7       	brpl	.-20     	; 0x18c2 <__ashldi3+0x1a>
    18d6:	0f 91       	pop	r16
    18d8:	08 95       	ret

000018da <__adddi3>:
    18da:	2a 0d       	add	r18, r10
    18dc:	3b 1d       	adc	r19, r11
    18de:	4c 1d       	adc	r20, r12
    18e0:	5d 1d       	adc	r21, r13
    18e2:	6e 1d       	adc	r22, r14
    18e4:	7f 1d       	adc	r23, r15
    18e6:	80 1f       	adc	r24, r16
    18e8:	91 1f       	adc	r25, r17
    18ea:	08 95       	ret

000018ec <__subdi3>:
    18ec:	2a 19       	sub	r18, r10
    18ee:	3b 09       	sbc	r19, r11
    18f0:	4c 09       	sbc	r20, r12
    18f2:	5d 09       	sbc	r21, r13
    18f4:	6e 09       	sbc	r22, r14
    18f6:	7f 09       	sbc	r23, r15
    18f8:	80 0b       	sbc	r24, r16
    18fa:	91 0b       	sbc	r25, r17
    18fc:	08 95       	ret

000018fe <__cmpdi2>:
    18fe:	2a 15       	cp	r18, r10
    1900:	3b 05       	cpc	r19, r11
    1902:	4c 05       	cpc	r20, r12
    1904:	5d 05       	cpc	r21, r13
    1906:	6e 05       	cpc	r22, r14
    1908:	7f 05       	cpc	r23, r15
    190a:	80 07       	cpc	r24, r16
    190c:	91 07       	cpc	r25, r17
    190e:	08 95       	ret

00001910 <__cmpdi2_s8>:
    1910:	00 24       	eor	r0, r0
    1912:	a7 fd       	sbrc	r26, 7
    1914:	00 94       	com	r0
    1916:	2a 17       	cp	r18, r26
    1918:	30 05       	cpc	r19, r0
    191a:	40 05       	cpc	r20, r0
    191c:	50 05       	cpc	r21, r0
    191e:	60 05       	cpc	r22, r0
    1920:	70 05       	cpc	r23, r0
    1922:	80 05       	cpc	r24, r0
    1924:	90 05       	cpc	r25, r0
    1926:	08 95       	ret

00001928 <__umulhisi3>:
    1928:	a2 9f       	mul	r26, r18
    192a:	b0 01       	movw	r22, r0
    192c:	b3 9f       	mul	r27, r19
    192e:	c0 01       	movw	r24, r0
    1930:	a3 9f       	mul	r26, r19
    1932:	70 0d       	add	r23, r0
    1934:	81 1d       	adc	r24, r1
    1936:	11 24       	eor	r1, r1
    1938:	91 1d       	adc	r25, r1
    193a:	b2 9f       	mul	r27, r18
    193c:	70 0d       	add	r23, r0
    193e:	81 1d       	adc	r24, r1
    1940:	11 24       	eor	r1, r1
    1942:	91 1d       	adc	r25, r1
    1944:	08 95       	ret

00001946 <eeprom_read_byte>:
    1946:	03 d0       	rcall	.+6      	; 0x194e <eeprom_mapen>
    1948:	80 81       	ld	r24, Z
    194a:	99 27       	eor	r25, r25
    194c:	08 95       	ret

0000194e <eeprom_mapen>:
    194e:	e0 ec       	ldi	r30, 0xC0	; 192
    1950:	f1 e0       	ldi	r31, 0x01	; 1
    1952:	37 85       	ldd	r19, Z+15	; 0x0f
    1954:	37 fd       	sbrc	r19, 7
    1956:	fd cf       	rjmp	.-6      	; 0x1952 <eeprom_mapen+0x4>
    1958:	34 85       	ldd	r19, Z+12	; 0x0c
    195a:	38 60       	ori	r19, 0x08	; 8
    195c:	34 87       	std	Z+12, r19	; 0x0c
    195e:	fc 01       	movw	r30, r24
    1960:	e0 50       	subi	r30, 0x00	; 0
    1962:	f0 4f       	sbci	r31, 0xF0	; 240
    1964:	08 95       	ret

00001966 <eeprom_read_word>:
    1966:	0e 94 a7 0c 	call	0x194e	; 0x194e <eeprom_mapen>
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	08 95       	ret

00001970 <eeprom_write_byte>:
    1970:	26 2f       	mov	r18, r22

00001972 <eeprom_write_r18>:
    1972:	e0 ec       	ldi	r30, 0xC0	; 192
    1974:	f1 e0       	ldi	r31, 0x01	; 1
    1976:	37 85       	ldd	r19, Z+15	; 0x0f
    1978:	37 fd       	sbrc	r19, 7
    197a:	fd cf       	rjmp	.-6      	; 0x1976 <eeprom_write_r18+0x4>
    197c:	34 85       	ldd	r19, Z+12	; 0x0c
    197e:	37 7f       	andi	r19, 0xF7	; 247
    1980:	34 87       	std	Z+12, r19	; 0x0c
    1982:	37 85       	ldd	r19, Z+15	; 0x0f
    1984:	31 ff       	sbrs	r19, 1
    1986:	09 c0       	rjmp	.+18     	; 0x199a <eeprom_write_r18+0x28>
    1988:	36 e3       	ldi	r19, 0x36	; 54
    198a:	32 87       	std	Z+10, r19	; 0x0a
    198c:	38 ed       	ldi	r19, 0xD8	; 216
    198e:	34 bf       	out	0x34, r19	; 52
    1990:	31 e0       	ldi	r19, 0x01	; 1
    1992:	33 87       	std	Z+11, r19	; 0x0b
    1994:	37 85       	ldd	r19, Z+15	; 0x0f
    1996:	37 fd       	sbrc	r19, 7
    1998:	fd cf       	rjmp	.-6      	; 0x1994 <eeprom_write_r18+0x22>
    199a:	33 e3       	ldi	r19, 0x33	; 51
    199c:	32 87       	std	Z+10, r19	; 0x0a
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	12 82       	std	Z+2, r1	; 0x02
    19a4:	24 83       	std	Z+4, r18	; 0x04
    19a6:	25 e3       	ldi	r18, 0x35	; 53
    19a8:	22 87       	std	Z+10, r18	; 0x0a
    19aa:	28 ed       	ldi	r18, 0xD8	; 216
    19ac:	31 e0       	ldi	r19, 0x01	; 1
    19ae:	24 bf       	out	0x34, r18	; 52
    19b0:	33 87       	std	Z+11, r19	; 0x0b
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	08 95       	ret

000019b6 <eeprom_write_word>:
    19b6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <eeprom_write_byte>
    19ba:	27 2f       	mov	r18, r23
    19bc:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <eeprom_write_r18>

000019c0 <_exit>:
    19c0:	f8 94       	cli

000019c2 <__stop_program>:
    19c2:	ff cf       	rjmp	.-2      	; 0x19c2 <__stop_program>
