
SPI_DISP V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  00001a04  00001a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007b  0080211c  0080211c  00001bb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004584  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a91  00000000  00000000  00006334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000140d  00000000  00000000  00008dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  0000a1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000395a  00000000  00000000  0000a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016af  00000000  00000000  0000e012  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000f6c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_10>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_14>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_20>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__vector_77>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_79>
     140:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_80>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_88>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e4 e0       	ldi	r30, 0x04	; 4
     210:	fa e1       	ldi	r31, 0x1A	; 26
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ac 31       	cpi	r26, 0x1C	; 28
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	21 e2       	ldi	r18, 0x21	; 33
     220:	ac e1       	ldi	r26, 0x1C	; 28
     222:	b1 e2       	ldi	r27, 0x21	; 33
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a7 39       	cpi	r26, 0x97	; 151
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 09 0a 	call	0x1412	; 0x1412 <main>
     232:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <_Z13clk_set_32MHzv>:
		return 1;
	}
	else{
		return result;
	}
}
     23a:	e0 e5       	ldi	r30, 0x50	; 80
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
     244:	e1 e5       	ldi	r30, 0x51	; 81
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	81 ff       	sbrs	r24, 1
     24c:	fd cf       	rjmp	.-6      	; 0x248 <_Z13clk_set_32MHzv+0xe>
     24e:	8f e3       	ldi	r24, 0x3F	; 63
     250:	9f e1       	ldi	r25, 0x1F	; 31
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <_Z13clk_set_32MHzv+0x18>
     256:	00 c0       	rjmp	.+0      	; 0x258 <_Z13clk_set_32MHzv+0x1e>
     258:	00 00       	nop
     25a:	88 ed       	ldi	r24, 0xD8	; 216
     25c:	84 bf       	out	0x34, r24	; 52
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     264:	8f e3       	ldi	r24, 0x3F	; 63
     266:	9f e1       	ldi	r25, 0x1F	; 31
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <_Z13clk_set_32MHzv+0x2e>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <_Z13clk_set_32MHzv+0x34>
     26e:	00 00       	nop
     270:	08 95       	ret

00000272 <_Z11setup_blinkv>:
     272:	e0 e5       	ldi	r30, 0x50	; 80
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	84 60       	ori	r24, 0x04	; 4
     27a:	80 83       	st	Z, r24
     27c:	e1 e5       	ldi	r30, 0x51	; 81
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	82 ff       	sbrs	r24, 2
     284:	fd cf       	rjmp	.-6      	; 0x280 <_Z11setup_blinkv+0xe>
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     28c:	e1 e0       	ldi	r30, 0x01	; 1
     28e:	f4 e0       	ldi	r31, 0x04	; 4
     290:	80 81       	ld	r24, Z
     292:	80 fd       	sbrc	r24, 0
     294:	fd cf       	rjmp	.-6      	; 0x290 <_Z11setup_blinkv+0x1e>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     29c:	e1 e0       	ldi	r30, 0x01	; 1
     29e:	f4 e0       	ldi	r31, 0x04	; 4
     2a0:	80 81       	ld	r24, Z
     2a2:	80 fd       	sbrc	r24, 0
     2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <_Z11setup_blinkv+0x2e>
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	93 e0       	ldi	r25, 0x03	; 3
     2b0:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
     2b4:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
     2b8:	e1 e0       	ldi	r30, 0x01	; 1
     2ba:	f4 e0       	ldi	r31, 0x04	; 4
     2bc:	80 81       	ld	r24, Z
     2be:	80 fd       	sbrc	r24, 0
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <_Z11setup_blinkv+0x4a>
     2c2:	08 95       	ret

000002c4 <_Z9setup_SPIv>:
     2c4:	8e e5       	ldi	r24, 0x5E	; 94
     2c6:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     2ca:	80 e1       	ldi	r24, 0x10	; 16
     2cc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2d0:	08 95       	ret

000002d2 <_Z10setup_dispv>:
     2d2:	88 eb       	ldi	r24, 0xB8	; 184
     2d4:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     2d8:	80 e1       	ldi	r24, 0x10	; 16
     2da:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     2de:	8c e0       	ldi	r24, 0x0C	; 12
     2e0:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2e4:	e2 ec       	ldi	r30, 0xC2	; 194
     2e6:	f8 e0       	ldi	r31, 0x08	; 8
     2e8:	80 81       	ld	r24, Z
     2ea:	88 23       	and	r24, r24
     2ec:	ec f7       	brge	.-6      	; 0x2e8 <_Z10setup_dispv+0x16>
     2ee:	e2 ec       	ldi	r30, 0xC2	; 194
     2f0:	f8 e0       	ldi	r31, 0x08	; 8
     2f2:	80 81       	ld	r24, Z
     2f4:	80 68       	ori	r24, 0x80	; 128
     2f6:	80 83       	st	Z, r24
     2f8:	80 e1       	ldi	r24, 0x10	; 16
     2fa:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2fe:	e7 ec       	ldi	r30, 0xC7	; 199
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <_Z10setup_dispv+0x30>
     306:	00 c0       	rjmp	.+0      	; 0x308 <_Z10setup_dispv+0x36>
     308:	00 00       	nop
     30a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     30e:	88 e3       	ldi	r24, 0x38	; 56
     310:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     314:	e2 ec       	ldi	r30, 0xC2	; 194
     316:	f8 e0       	ldi	r31, 0x08	; 8
     318:	80 81       	ld	r24, Z
     31a:	88 23       	and	r24, r24
     31c:	ec f7       	brge	.-6      	; 0x318 <_Z10setup_dispv+0x46>
     31e:	e2 ec       	ldi	r30, 0xC2	; 194
     320:	f8 e0       	ldi	r31, 0x08	; 8
     322:	80 81       	ld	r24, Z
     324:	80 68       	ori	r24, 0x80	; 128
     326:	80 83       	st	Z, r24
     328:	80 e1       	ldi	r24, 0x10	; 16
     32a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     32e:	e7 ec       	ldi	r30, 0xC7	; 199
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <_Z10setup_dispv+0x60>
     336:	00 c0       	rjmp	.+0      	; 0x338 <_Z10setup_dispv+0x66>
     338:	00 00       	nop
     33a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     344:	e2 ec       	ldi	r30, 0xC2	; 194
     346:	f8 e0       	ldi	r31, 0x08	; 8
     348:	80 81       	ld	r24, Z
     34a:	88 23       	and	r24, r24
     34c:	ec f7       	brge	.-6      	; 0x348 <_Z10setup_dispv+0x76>
     34e:	e2 ec       	ldi	r30, 0xC2	; 194
     350:	f8 e0       	ldi	r31, 0x08	; 8
     352:	80 81       	ld	r24, Z
     354:	80 68       	ori	r24, 0x80	; 128
     356:	80 83       	st	Z, r24
     358:	80 e1       	ldi	r24, 0x10	; 16
     35a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     35e:	87 ec       	ldi	r24, 0xC7	; 199
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <_Z10setup_dispv+0x90>
     366:	00 c0       	rjmp	.+0      	; 0x368 <_Z10setup_dispv+0x96>
     368:	00 00       	nop
     36a:	ef e9       	ldi	r30, 0x9F	; 159
     36c:	f8 e2       	ldi	r31, 0x28	; 40
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <_Z10setup_dispv+0x9c>
     372:	00 c0       	rjmp	.+0      	; 0x374 <_Z10setup_dispv+0xa2>
     374:	00 00       	nop
     376:	08 95       	ret

00000378 <_Z9setup_btnv>:
     378:	87 e0       	ldi	r24, 0x07	; 7
     37a:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
     37e:	8b e8       	ldi	r24, 0x8B	; 139
     380:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <__TEXT_REGION_LENGTH__+0x700903>
     384:	84 e8       	ldi	r24, 0x84	; 132
     386:	9e e1       	ldi	r25, 0x1E	; 30
     388:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     38c:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x700906>
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     39e:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     3a2:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     3a6:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     3b0:	e2 e5       	ldi	r30, 0x52	; 82
     3b2:	f6 e0       	ldi	r31, 0x06	; 6
     3b4:	8b e1       	ldi	r24, 0x1B	; 27
     3b6:	80 83       	st	Z, r24
     3b8:	80 81       	ld	r24, Z
     3ba:	80 64       	ori	r24, 0x40	; 64
     3bc:	80 83       	st	Z, r24
     3be:	82 e6       	ldi	r24, 0x62	; 98
     3c0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__TEXT_REGION_LENGTH__+0x700183>
     3c4:	08 95       	ret

000003c6 <_Z9setup_intv>:
     3c6:	87 e0       	ldi	r24, 0x07	; 7
     3c8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     3cc:	78 94       	sei
     3ce:	08 95       	ret

000003d0 <_Z9setup_PWMv>:
     3d0:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     3d4:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3de:	83 e1       	ldi	r24, 0x13	; 19
     3e0:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     3e4:	8e ef       	ldi	r24, 0xFE	; 254
     3e6:	9f ef       	ldi	r25, 0xFF	; 255
     3e8:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     3ec:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     3f0:	2f ef       	ldi	r18, 0xFF	; 255
     3f2:	89 ef       	ldi	r24, 0xF9	; 249
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	21 50       	subi	r18, 0x01	; 1
     3f8:	80 40       	sbci	r24, 0x00	; 0
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <_Z9setup_PWMv+0x26>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	00 00       	nop
     402:	e1 e8       	ldi	r30, 0x81	; 129
     404:	f6 e0       	ldi	r31, 0x06	; 6
     406:	80 81       	ld	r24, Z
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	80 83       	st	Z, r24
     40c:	08 95       	ret

0000040e <_Z9QDEC_INITv>:
     40e:	80 e3       	ldi	r24, 0x30	; 48
     410:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     414:	83 e0       	ldi	r24, 0x03	; 3
     416:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     41a:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__TEXT_REGION_LENGTH__+0x700675>
     41e:	8c e6       	ldi	r24, 0x6C	; 108
     420:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
     424:	8d e6       	ldi	r24, 0x6D	; 109
     426:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x700181>
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__TEXT_REGION_LENGTH__+0x700188>
     430:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__TEXT_REGION_LENGTH__+0x700189>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     43a:	88 e6       	ldi	r24, 0x68	; 104
     43c:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <__TEXT_REGION_LENGTH__+0x700803>
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     448:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     44c:	8f e3       	ldi	r24, 0x3F	; 63
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
     454:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
     458:	08 95       	ret

0000045a <_Z8DMX_initv>:
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
     460:	98 e5       	ldi	r25, 0x58	; 88
     462:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     466:	9a e6       	ldi	r25, 0x6A	; 106
     468:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
     46c:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     470:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
     474:	8a e8       	ldi	r24, 0x8A	; 138
     476:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <__TEXT_REGION_LENGTH__+0x700843>
     47a:	8d e5       	ldi	r24, 0x5D	; 93
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
     482:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
     486:	8b e0       	ldi	r24, 0x0B	; 11
     488:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
     48c:	80 e8       	ldi	r24, 0x80	; 128
     48e:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
     492:	83 e9       	ldi	r24, 0x93	; 147
     494:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
     498:	08 95       	ret

0000049a <_Z17update_EEPROM_RAMv>:
     49a:	cf 93       	push	r28
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <_Z17update_EEPROM_RAMv+0xe>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	c6 2f       	mov	r28, r22
     4aa:	c1 95       	neg	r28
     4ac:	83 e1       	ldi	r24, 0x13	; 19
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <eeprom_read_word>
     4b4:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <brightness>
     4b8:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <brightness+0x1>
     4bc:	82 17       	cp	r24, r18
     4be:	93 07       	cpc	r25, r19
     4c0:	41 f0       	breq	.+16     	; 0x4d2 <_Z17update_EEPROM_RAMv+0x38>
     4c2:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <brightness>
     4c6:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <brightness+0x1>
     4ca:	83 e1       	ldi	r24, 0x13	; 19
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <eeprom_write_word>
     4d2:	85 e1       	ldi	r24, 0x15	; 21
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <eeprom_read_word>
     4da:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
     4de:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
     4e2:	82 17       	cp	r24, r18
     4e4:	93 07       	cpc	r25, r19
     4e6:	41 f0       	breq	.+16     	; 0x4f8 <_Z17update_EEPROM_RAMv+0x5e>
     4e8:	60 91 01 20 	lds	r22, 0x2001	; 0x802001 <DMXChan>
     4ec:	70 91 02 20 	lds	r23, 0x2002	; 0x802002 <DMXChan+0x1>
     4f0:	85 e1       	ldi	r24, 0x15	; 21
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <eeprom_write_word>
     4f8:	80 e1       	ldi	r24, 0x10	; 16
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 c3 0c 	call	0x1986	; 0x1986 <eeprom_read_byte>
     500:	8c 17       	cp	r24, r28
     502:	29 f0       	breq	.+10     	; 0x50e <_Z17update_EEPROM_RAMv+0x74>
     504:	6c 2f       	mov	r22, r28
     506:	80 e1       	ldi	r24, 0x10	; 16
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <_Z10updateDispv>:
inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

void updateDisp(){
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	a1 97       	sbiw	r28, 0x21	; 33
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	8b e2       	ldi	r24, 0x2B	; 43
     53e:	91 e2       	ldi	r25, 0x21	; 33
     540:	4b e4       	ldi	r20, 0x4B	; 75
     542:	51 e2       	ldi	r21, 0x21	; 33
     544:	dc 01       	movw	r26, r24
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     546:	bc 01       	movw	r22, r24
     548:	60 95       	com	r22
     54a:	70 95       	com	r23
			RTC_CNT = 0;
     54c:	08 e0       	ldi	r16, 0x08	; 8
     54e:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     550:	3d 91       	ld	r19, X+
     552:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     556:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     55a:	ea 0f       	add	r30, r26
     55c:	fb 1f       	adc	r31, r27
     55e:	e6 0f       	add	r30, r22
     560:	f7 1f       	adc	r31, r23
     562:	20 81       	ld	r18, Z
     564:	32 17       	cp	r19, r18
     566:	39 f0       	breq	.+14     	; 0x576 <_Z10updateDispv+0x64>
			RTC_CNT = 0;
     568:	f8 01       	movw	r30, r16
     56a:	10 82       	st	Z, r1
     56c:	11 82       	std	Z+1, r1	; 0x01
			editCounter = 0;
     56e:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     572:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	uint8_t lowBound = 0xFF; //Lowest number in what the two arrays differ
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
     576:	4a 17       	cp	r20, r26
     578:	5b 07       	cpc	r21, r27
     57a:	51 f7       	brne	.-44     	; 0x550 <_Z10updateDispv+0x3e>
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
			RTC_CNT = 0;
			editCounter = 0;
		}
	}
	if(RTC_CNT > 512){
     57c:	a0 90 08 04 	lds	r10, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     580:	b0 90 09 04 	lds	r11, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     584:	c0 90 4c 21 	lds	r12, 0x214C	; 0x80214c <toBeDispPtr>
     588:	d0 90 4d 21 	lds	r13, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     58c:	be 01       	movw	r22, r28
     58e:	6f 5f       	subi	r22, 0xFF	; 255
     590:	7f 4f       	sbci	r23, 0xFF	; 255
     592:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <currBlinkMaskPtr>
     596:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <currBlinkMaskPtr+0x1>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     59a:	fb 01       	movw	r30, r22
     59c:	46 01       	movw	r8, r12
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     59e:	68 94       	set
     5a0:	ee 24       	eor	r14, r14
     5a2:	e5 f8       	bld	r14, 5
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
     5a4:	11 e0       	ldi	r17, 0x01	; 1
     5a6:	a1 16       	cp	r10, r17
     5a8:	12 e0       	ldi	r17, 0x02	; 2
     5aa:	b1 06       	cpc	r11, r17
     5ac:	08 f4       	brcc	.+2      	; 0x5b0 <_Z10updateDispv+0x9e>
     5ae:	d0 c0       	rjmp	.+416    	; 0x750 <_Z10updateDispv+0x23e>
     5b0:	d9 01       	movw	r26, r18
     5b2:	fc 90       	ld	r15, X
     5b4:	ff 20       	and	r15, r15
     5b6:	09 f4       	brne	.+2      	; 0x5ba <_Z10updateDispv+0xa8>
     5b8:	cb c0       	rjmp	.+406    	; 0x750 <_Z10updateDispv+0x23e>
     5ba:	f0 90 93 21 	lds	r15, 0x2193	; 0x802193 <editMode>
     5be:	f1 10       	cpse	r15, r1
     5c0:	cb c0       	rjmp	.+406    	; 0x758 <_Z10updateDispv+0x246>
     5c2:	c6 c0       	rjmp	.+396    	; 0x750 <_Z10updateDispv+0x23e>
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
     5c4:	d4 01       	movw	r26, r8
     5c6:	fd 90       	ld	r15, X+
     5c8:	4d 01       	movw	r8, r26
     5ca:	dc 01       	movw	r26, r24
     5cc:	fd 92       	st	X+, r15
     5ce:	cd 01       	movw	r24, r26
     5d0:	31 96       	adiw	r30, 0x01	; 1
     5d2:	bf ef       	ldi	r27, 0xFF	; 255
     5d4:	cb 1a       	sub	r12, r27
     5d6:	db 0a       	sbc	r13, r27
     5d8:	2f 5f       	subi	r18, 0xFF	; 255
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
     5dc:	48 17       	cp	r20, r24
     5de:	59 07       	cpc	r21, r25
     5e0:	09 f7       	brne	.-62     	; 0x5a4 <_Z10updateDispv+0x92>
     5e2:	e1 e5       	ldi	r30, 0x51	; 81
     5e4:	f1 e2       	ldi	r31, 0x21	; 33
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	d1 2c       	mov	r13, r1
     5ea:	3f ef       	ldi	r19, 0xFF	; 255
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
     5ec:	db 01       	movw	r26, r22
     5ee:	9d 91       	ld	r25, X+
     5f0:	bd 01       	movw	r22, r26
     5f2:	20 81       	ld	r18, Z
     5f4:	29 17       	cp	r18, r25
     5f6:	39 f0       	breq	.+14     	; 0x606 <_Z10updateDispv+0xf4>
			currDispData[i] = temp[i];
     5f8:	90 83       	st	Z, r25
			highBound = i;
			if(lowBound == 0xFF){
     5fa:	3f 3f       	cpi	r19, 0xFF	; 255
     5fc:	19 f4       	brne	.+6      	; 0x604 <_Z10updateDispv+0xf2>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     5fe:	d8 2e       	mov	r13, r24
			if(lowBound == 0xFF){
				lowBound = i;
     600:	38 2f       	mov	r19, r24
     602:	01 c0       	rjmp	.+2      	; 0x606 <_Z10updateDispv+0xf4>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     604:	d8 2e       	mov	r13, r24
     606:	31 96       	adiw	r30, 0x01	; 1
     608:	8f 5f       	subi	r24, 0xFF	; 255
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
     60a:	80 32       	cpi	r24, 0x20	; 32
     60c:	79 f7       	brne	.-34     	; 0x5ec <_Z10updateDispv+0xda>
			if(lowBound == 0xFF){
				lowBound = i;
			}
		}
	}
	if(lowBound != 0xFF){ //If anything has changed on the display
     60e:	3f 3f       	cpi	r19, 0xFF	; 255
     610:	09 f4       	brne	.+2      	; 0x614 <_Z10updateDispv+0x102>
     612:	a4 c0       	rjmp	.+328    	; 0x75c <_Z10updateDispv+0x24a>
		uint8_t tempPos = lowBound;
		if(tempPos > 15){
     614:	30 31       	cpi	r19, 0x10	; 16
     616:	18 f0       	brcs	.+6      	; 0x61e <_Z10updateDispv+0x10c>
			tempPos += 48;
     618:	80 e3       	ldi	r24, 0x30	; 48
     61a:	83 0f       	add	r24, r19
     61c:	01 c0       	rjmp	.+2      	; 0x620 <_Z10updateDispv+0x10e>
     61e:	83 2f       	mov	r24, r19
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
     620:	80 68       	ori	r24, 0x80	; 128
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
	_delay_ms(1);
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     622:	90 e1       	ldi	r25, 0x10	; 16
     624:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	SPIC_DATA = SPIdata;
     628:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     62c:	e2 ec       	ldi	r30, 0xC2	; 194
     62e:	f8 e0       	ldi	r31, 0x08	; 8
     630:	80 81       	ld	r24, Z
     632:	88 23       	and	r24, r24
     634:	ec f7       	brge	.-6      	; 0x630 <_Z10updateDispv+0x11e>
	SPIC_STATUS |= SPI_IF_bm;
     636:	e2 ec       	ldi	r30, 0xC2	; 194
     638:	f8 e0       	ldi	r31, 0x08	; 8
     63a:	80 81       	ld	r24, Z
     63c:	80 68       	ori	r24, 0x80	; 128
     63e:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     640:	e5 e4       	ldi	r30, 0x45	; 69
     642:	f6 e0       	ldi	r31, 0x06	; 6
     644:	80 e1       	ldi	r24, 0x10	; 16
     646:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     648:	87 ec       	ldi	r24, 0xC7	; 199
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <_Z10updateDispv+0x13a>
     650:	00 c0       	rjmp	.+0      	; 0x652 <_Z10updateDispv+0x140>
     652:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     654:	88 e0       	ldi	r24, 0x08	; 8
     656:	80 83       	st	Z, r24
     658:	9a e0       	ldi	r25, 0x0A	; 10
     65a:	9a 95       	dec	r25
     65c:	f1 f7       	brne	.-4      	; 0x65a <_Z10updateDispv+0x148>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <_Z10updateDispv+0x14e>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     660:	43 2f       	mov	r20, r19
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	8d 2c       	mov	r8, r13
     66a:	91 2c       	mov	r9, r1
     66c:	a1 2c       	mov	r10, r1
     66e:	b1 2c       	mov	r11, r1
     670:	84 16       	cp	r8, r20
     672:	95 06       	cpc	r9, r21
     674:	a6 06       	cpc	r10, r22
     676:	b7 06       	cpc	r11, r23
     678:	08 f4       	brcc	.+2      	; 0x67c <_Z10updateDispv+0x16a>
     67a:	62 c0       	rjmp	.+196    	; 0x740 <_Z10updateDispv+0x22e>
     67c:	a3 2f       	mov	r26, r19
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	fd 01       	movw	r30, r26
     682:	ef 5a       	subi	r30, 0xAF	; 175
     684:	fe 4d       	sbci	r31, 0xDE	; 222
     686:	2f 01       	movw	r4, r30
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
	_delay_ms(1);
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     688:	06 e4       	ldi	r16, 0x46	; 70
     68a:	16 e0       	ldi	r17, 0x06	; 6
     68c:	68 94       	set
     68e:	cc 24       	eor	r12, r12
     690:	c4 f8       	bld	r12, 4
     692:	9c 2d       	mov	r25, r12
	SPIC_DATA = SPIdata;
     694:	0f 2e       	mov	r0, r31
     696:	f3 ec       	ldi	r31, 0xC3	; 195
     698:	ef 2e       	mov	r14, r31
     69a:	f8 e0       	ldi	r31, 0x08	; 8
     69c:	ff 2e       	mov	r15, r31
     69e:	f0 2d       	mov	r31, r0
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     6a0:	e2 ec       	ldi	r30, 0xC2	; 194
     6a2:	f8 e0       	ldi	r31, 0x08	; 8
	SPIC_STATUS |= SPI_IF_bm;
	PORTC_OUTSET = (1 << SS_PIN);
     6a4:	25 e4       	ldi	r18, 0x45	; 69
     6a6:	36 e0       	ldi	r19, 0x06	; 6
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     6a8:	68 94       	set
     6aa:	77 24       	eor	r7, r7
     6ac:	73 f8       	bld	r7, 3
	_delay_ms(1);
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
	SPIC_DATA = SPIdata;
     6ae:	0f 2e       	mov	r0, r31
     6b0:	f0 ec       	ldi	r31, 0xC0	; 192
     6b2:	6f 2e       	mov	r6, r31
     6b4:	f0 2d       	mov	r31, r0
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
     6b6:	d2 01       	movw	r26, r4
     6b8:	8d 91       	ld	r24, X+
     6ba:	2d 01       	movw	r4, r26
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
	_delay_ms(1);
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     6bc:	d8 01       	movw	r26, r16
     6be:	9c 93       	st	X, r25
	SPIC_DATA = SPIdata;
     6c0:	d7 01       	movw	r26, r14
     6c2:	8c 93       	st	X, r24
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     6c4:	80 81       	ld	r24, Z
     6c6:	88 23       	and	r24, r24
     6c8:	ec f7       	brge	.-6      	; 0x6c4 <_Z10updateDispv+0x1b2>
	SPIC_STATUS |= SPI_IF_bm;
     6ca:	80 81       	ld	r24, Z
     6cc:	80 68       	ori	r24, 0x80	; 128
     6ce:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     6d0:	d9 01       	movw	r26, r18
     6d2:	9c 93       	st	X, r25
     6d4:	a7 ec       	ldi	r26, 0xC7	; 199
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	11 97       	sbiw	r26, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <_Z10updateDispv+0x1c6>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <_Z10updateDispv+0x1cc>
     6de:	00 00       	nop
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
			if(i == 15 && highBound != 15){
     6e0:	4f 30       	cpi	r20, 0x0F	; 15
     6e2:	51 05       	cpc	r21, r1
     6e4:	61 05       	cpc	r22, r1
     6e6:	71 05       	cpc	r23, r1
     6e8:	09 f5       	brne	.+66     	; 0x72c <_Z10updateDispv+0x21a>
     6ea:	bf e0       	ldi	r27, 0x0F	; 15
     6ec:	db 16       	cp	r13, r27
     6ee:	41 f1       	breq	.+80     	; 0x740 <_Z10updateDispv+0x22e>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     6f0:	d8 01       	movw	r26, r16
     6f2:	7c 92       	st	X, r7
     6f4:	ba e0       	ldi	r27, 0x0A	; 10
     6f6:	ba 95       	dec	r27
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <_Z10updateDispv+0x1e4>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <_Z10updateDispv+0x1ea>
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
	_delay_ms(1);
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     6fc:	d8 01       	movw	r26, r16
     6fe:	cc 92       	st	X, r12
	SPIC_DATA = SPIdata;
     700:	d7 01       	movw	r26, r14
     702:	6c 92       	st	X, r6
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     704:	80 81       	ld	r24, Z
     706:	88 23       	and	r24, r24
     708:	ec f7       	brge	.-6      	; 0x704 <_Z10updateDispv+0x1f2>
	SPIC_STATUS |= SPI_IF_bm;
     70a:	80 81       	ld	r24, Z
     70c:	80 68       	ori	r24, 0x80	; 128
     70e:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     710:	d9 01       	movw	r26, r18
     712:	cc 92       	st	X, r12
     714:	a7 ec       	ldi	r26, 0xC7	; 199
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	11 97       	sbiw	r26, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <_Z10updateDispv+0x206>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <_Z10updateDispv+0x20c>
     71e:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     720:	d9 01       	movw	r26, r18
     722:	7c 92       	st	X, r7
     724:	ba e0       	ldi	r27, 0x0A	; 10
     726:	ba 95       	dec	r27
     728:	f1 f7       	brne	.-4      	; 0x726 <_Z10updateDispv+0x214>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <_Z10updateDispv+0x21a>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     72c:	4f 5f       	subi	r20, 0xFF	; 255
     72e:	5f 4f       	sbci	r21, 0xFF	; 255
     730:	6f 4f       	sbci	r22, 0xFF	; 255
     732:	7f 4f       	sbci	r23, 0xFF	; 255
     734:	84 16       	cp	r8, r20
     736:	95 06       	cpc	r9, r21
     738:	a6 06       	cpc	r10, r22
     73a:	b7 06       	cpc	r11, r23
     73c:	08 f0       	brcs	.+2      	; 0x740 <_Z10updateDispv+0x22e>
     73e:	bb cf       	rjmp	.-138    	; 0x6b6 <_Z10updateDispv+0x1a4>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     740:	88 e0       	ldi	r24, 0x08	; 8
     742:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     746:	ea e0       	ldi	r30, 0x0A	; 10
     748:	ea 95       	dec	r30
     74a:	f1 f7       	brne	.-4      	; 0x748 <_Z10updateDispv+0x236>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <_Z10updateDispv+0x23c>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     74e:	06 c0       	rjmp	.+12     	; 0x75c <_Z10updateDispv+0x24a>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     750:	d6 01       	movw	r26, r12
     752:	fc 90       	ld	r15, X
     754:	f0 82       	st	Z, r15
     756:	36 cf       	rjmp	.-404    	; 0x5c4 <_Z10updateDispv+0xb2>
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     758:	e0 82       	st	Z, r14
     75a:	34 cf       	rjmp	.-408    	; 0x5c4 <_Z10updateDispv+0xb2>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     75c:	a1 96       	adiw	r28, 0x21	; 33
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	de bf       	out	0x3e, r29	; 62
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	08 95       	ret

00000784 <_Z12LCD_PRINTDECjhh>:
inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
	currCursorPos++;
}

void LCD_PRINTDEC(uint16_t numToPrint, uint8_t pos, uint8_t noOfDigits){
     784:	2f 92       	push	r2
     786:	3f 92       	push	r3
     788:	4f 92       	push	r4
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	2e 97       	sbiw	r28, 0x0e	; 14
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	56 2e       	mov	r5, r22
	//currCursorPos = pos;
	//WR_CHAR();
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
     7b4:	6c 01       	movw	r12, r24
     7b6:	e1 2c       	mov	r14, r1
     7b8:	f1 2c       	mov	r15, r1
     7ba:	00 e0       	ldi	r16, 0x00	; 0
     7bc:	10 e0       	ldi	r17, 0x00	; 0
     7be:	98 01       	movw	r18, r16
     7c0:	89 83       	std	Y+1, r24	; 0x01
     7c2:	da 82       	std	Y+2, r13	; 0x02
     7c4:	eb 82       	std	Y+3, r14	; 0x03
     7c6:	fc 82       	std	Y+4, r15	; 0x04
     7c8:	0d 83       	std	Y+5, r16	; 0x05
     7ca:	1e 83       	std	Y+6, r17	; 0x06
     7cc:	2f 83       	std	Y+7, r18	; 0x07
     7ce:	38 87       	std	Y+8, r19	; 0x08
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
     7d0:	4f 3f       	cpi	r20, 0xFF	; 255
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <_Z12LCD_PRINTDECjhh+0x52>
     7d4:	6c c0       	rjmp	.+216    	; 0x8ae <_Z12LCD_PRINTDECjhh+0x12a>
     7d6:	3e c0       	rjmp	.+124    	; 0x854 <_Z12LCD_PRINTDECjhh+0xd0>

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
		result *= gnd;
     7d8:	2a 2f       	mov	r18, r26
     7da:	3b 2d       	mov	r19, r11
     7dc:	4c 2d       	mov	r20, r12
     7de:	5d 2d       	mov	r21, r13
     7e0:	6e 2d       	mov	r22, r14
     7e2:	7f 2d       	mov	r23, r15
     7e4:	80 2f       	mov	r24, r16
     7e6:	91 2f       	mov	r25, r17
     7e8:	01 e0       	ldi	r16, 0x01	; 1
     7ea:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__ashldi3>
     7ee:	32 2e       	mov	r3, r18
     7f0:	43 2e       	mov	r4, r19
     7f2:	64 2e       	mov	r6, r20
     7f4:	75 2e       	mov	r7, r21
     7f6:	6a 87       	std	Y+10, r22	; 0x0a
     7f8:	79 87       	std	Y+9, r23	; 0x09
     7fa:	b8 2f       	mov	r27, r24
     7fc:	a9 2f       	mov	r26, r25
     7fe:	02 e0       	ldi	r16, 0x02	; 2
     800:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__ashldi3>
     804:	a2 2e       	mov	r10, r18
     806:	b3 2e       	mov	r11, r19
     808:	c4 2e       	mov	r12, r20
     80a:	d5 2e       	mov	r13, r21
     80c:	e6 2e       	mov	r14, r22
     80e:	f7 2e       	mov	r15, r23
     810:	08 2f       	mov	r16, r24
     812:	19 2f       	mov	r17, r25
     814:	23 2d       	mov	r18, r3
     816:	34 2d       	mov	r19, r4
     818:	46 2d       	mov	r20, r6
     81a:	57 2d       	mov	r21, r7
     81c:	6a 85       	ldd	r22, Y+10	; 0x0a
     81e:	79 85       	ldd	r23, Y+9	; 0x09
     820:	8b 2f       	mov	r24, r27
     822:	9a 2f       	mov	r25, r26
     824:	0e 94 8d 0c 	call	0x191a	; 0x191a <__adddi3>
     828:	a2 2f       	mov	r26, r18
     82a:	b3 2e       	mov	r11, r19
     82c:	c4 2e       	mov	r12, r20
     82e:	d5 2e       	mov	r13, r21
     830:	e6 2e       	mov	r14, r22
     832:	f7 2e       	mov	r15, r23
     834:	08 2f       	mov	r16, r24
     836:	19 2f       	mov	r17, r25
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     838:	31 96       	adiw	r30, 0x01	; 1
     83a:	e8 15       	cp	r30, r8
     83c:	f9 05       	cpc	r31, r9
     83e:	64 f2       	brlt	.-104    	; 0x7d8 <_Z12LCD_PRINTDECjhh+0x54>
     840:	13 c0       	rjmp	.+38     	; 0x868 <_Z12LCD_PRINTDECjhh+0xe4>
     842:	aa e0       	ldi	r26, 0x0A	; 10
     844:	b1 2c       	mov	r11, r1
     846:	c1 2c       	mov	r12, r1
     848:	d1 2c       	mov	r13, r1
     84a:	e1 2c       	mov	r14, r1
     84c:	f1 2c       	mov	r15, r1
     84e:	00 e0       	ldi	r16, 0x00	; 0
     850:	10 e0       	ldi	r17, 0x00	; 0
     852:	0a c0       	rjmp	.+20     	; 0x868 <_Z12LCD_PRINTDECjhh+0xe4>
     854:	81 2c       	mov	r8, r1
     856:	91 2c       	mov	r9, r1
     858:	aa e0       	ldi	r26, 0x0A	; 10
     85a:	b1 2c       	mov	r11, r1
     85c:	c1 2c       	mov	r12, r1
     85e:	d1 2c       	mov	r13, r1
     860:	e1 2c       	mov	r14, r1
     862:	f1 2c       	mov	r15, r1
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	10 e0       	ldi	r17, 0x00	; 0
		result *= gnd;
	}
	if(exp == 0){
     868:	81 14       	cp	r8, r1
     86a:	91 04       	cpc	r9, r1
     86c:	09 f4       	brne	.+2      	; 0x870 <_Z12LCD_PRINTDECjhh+0xec>
     86e:	1b c1       	rjmp	.+566    	; 0xaa6 <_Z12LCD_PRINTDECjhh+0x322>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     870:	29 81       	ldd	r18, Y+1	; 0x01
     872:	3a 81       	ldd	r19, Y+2	; 0x02
     874:	4b 81       	ldd	r20, Y+3	; 0x03
     876:	5c 81       	ldd	r21, Y+4	; 0x04
     878:	6d 81       	ldd	r22, Y+5	; 0x05
     87a:	7e 81       	ldd	r23, Y+6	; 0x06
     87c:	8f 81       	ldd	r24, Y+7	; 0x07
     87e:	98 85       	ldd	r25, Y+8	; 0x08
     880:	aa 2e       	mov	r10, r26
     882:	0e 94 9f 0c 	call	0x193e	; 0x193e <__cmpdi2>
     886:	0c f4       	brge	.+2      	; 0x88a <_Z12LCD_PRINTDECjhh+0x106>
     888:	fd c0       	rjmp	.+506    	; 0xa84 <_Z12LCD_PRINTDECjhh+0x300>
				check = true;
			}
			decCounter++;
     88a:	0f ef       	ldi	r16, 0xFF	; 255
     88c:	80 1a       	sub	r8, r16
     88e:	90 0a       	sbc	r9, r16
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     890:	12 e0       	ldi	r17, 0x02	; 2
     892:	81 16       	cp	r8, r17
     894:	91 04       	cpc	r9, r1
     896:	ac f2       	brlt	.-86     	; 0x842 <_Z12LCD_PRINTDECjhh+0xbe>
     898:	aa e0       	ldi	r26, 0x0A	; 10
     89a:	b1 2c       	mov	r11, r1
     89c:	c1 2c       	mov	r12, r1
     89e:	d1 2c       	mov	r13, r1
     8a0:	e1 2c       	mov	r14, r1
     8a2:	f1 2c       	mov	r15, r1
     8a4:	00 e0       	ldi	r16, 0x00	; 0
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	e1 e0       	ldi	r30, 0x01	; 1
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	95 cf       	rjmp	.-214    	; 0x7d8 <_Z12LCD_PRINTDECjhh+0x54>
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
	}
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
     8ae:	84 2f       	mov	r24, r20
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	1c 01       	movw	r2, r24
     8b4:	21 e0       	ldi	r18, 0x01	; 1
     8b6:	22 1a       	sub	r2, r18
     8b8:	31 08       	sbc	r3, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     8ba:	33 20       	and	r3, r3
     8bc:	0c f4       	brge	.+2      	; 0x8c0 <_Z12LCD_PRINTDECjhh+0x13c>
     8be:	01 c1       	rjmp	.+514    	; 0xac2 <_Z12LCD_PRINTDECjhh+0x33e>
     8c0:	85 2d       	mov	r24, r5
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	8b 87       	std	Y+11, r24	; 0x0b
     8c6:	9c 87       	std	Y+12, r25	; 0x0c
     8c8:	41 2c       	mov	r4, r1
     8ca:	51 2c       	mov	r5, r1
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	29 16       	cp	r2, r25
     8d0:	31 04       	cpc	r3, r1
     8d2:	7c f1       	brlt	.+94     	; 0x932 <_Z12LCD_PRINTDECjhh+0x1ae>
     8d4:	2a e0       	ldi	r18, 0x0A	; 10
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	e1 e0       	ldi	r30, 0x01	; 1
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
		result *= gnd;
     8e8:	01 e0       	ldi	r16, 0x01	; 1
     8ea:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__ashldi3>
     8ee:	62 2e       	mov	r6, r18
     8f0:	73 2e       	mov	r7, r19
     8f2:	84 2e       	mov	r8, r20
     8f4:	95 2e       	mov	r9, r21
     8f6:	6a 87       	std	Y+10, r22	; 0x0a
     8f8:	79 87       	std	Y+9, r23	; 0x09
     8fa:	b8 2f       	mov	r27, r24
     8fc:	a9 2f       	mov	r26, r25
     8fe:	02 e0       	ldi	r16, 0x02	; 2
     900:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__ashldi3>
     904:	a2 2e       	mov	r10, r18
     906:	b3 2e       	mov	r11, r19
     908:	c4 2e       	mov	r12, r20
     90a:	d5 2e       	mov	r13, r21
     90c:	e6 2e       	mov	r14, r22
     90e:	f7 2e       	mov	r15, r23
     910:	08 2f       	mov	r16, r24
     912:	19 2f       	mov	r17, r25
     914:	26 2d       	mov	r18, r6
     916:	37 2d       	mov	r19, r7
     918:	48 2d       	mov	r20, r8
     91a:	59 2d       	mov	r21, r9
     91c:	6a 85       	ldd	r22, Y+10	; 0x0a
     91e:	79 85       	ldd	r23, Y+9	; 0x09
     920:	8b 2f       	mov	r24, r27
     922:	9a 2f       	mov	r25, r26
     924:	0e 94 8d 0c 	call	0x191a	; 0x191a <__adddi3>
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     928:	31 96       	adiw	r30, 0x01	; 1
     92a:	e2 15       	cp	r30, r2
     92c:	f3 05       	cpc	r31, r3
     92e:	e1 f6       	brne	.-72     	; 0x8e8 <_Z12LCD_PRINTDECjhh+0x164>
     930:	08 c0       	rjmp	.+16     	; 0x942 <_Z12LCD_PRINTDECjhh+0x1be>
	//PORTD_INTCTRL |= PORT_INT0LVL_HI_gc;
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
     932:	2a e0       	ldi	r18, 0x0A	; 10
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 1; i < exp; i++){
		result *= gnd;
	}
	if(exp == 0){
     942:	21 14       	cp	r2, r1
     944:	31 04       	cpc	r3, r1
     946:	49 f0       	breq	.+18     	; 0x95a <_Z12LCD_PRINTDECjhh+0x1d6>
     948:	2d 87       	std	Y+13, r18	; 0x0d
     94a:	73 2e       	mov	r7, r19
     94c:	84 2e       	mov	r8, r20
     94e:	95 2e       	mov	r9, r21
     950:	6e 87       	std	Y+14, r22	; 0x0e
     952:	79 87       	std	Y+9, r23	; 0x09
     954:	8a 87       	std	Y+10, r24	; 0x0a
     956:	69 2e       	mov	r6, r25
     958:	09 c0       	rjmp	.+18     	; 0x96c <_Z12LCD_PRINTDECjhh+0x1e8>
		return 1;
     95a:	01 e0       	ldi	r16, 0x01	; 1
     95c:	0d 87       	std	Y+13, r16	; 0x0d
     95e:	71 2c       	mov	r7, r1
     960:	81 2c       	mov	r8, r1
     962:	91 2c       	mov	r9, r1
     964:	1e 86       	std	Y+14, r1	; 0x0e
     966:	19 86       	std	Y+9, r1	; 0x09
     968:	1a 86       	std	Y+10, r1	; 0x0a
     96a:	61 2c       	mov	r6, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
		int16_t t;
		for(t = 0; startNum - (mathPow(10, i) * t) >= 0; t++){} //t = 9 if i = 1 and startnum = 90, t = 3 if i = 2 and startnum is 356
     96c:	ad 84       	ldd	r10, Y+13	; 0x0d
     96e:	b7 2c       	mov	r11, r7
     970:	c8 2c       	mov	r12, r8
     972:	d9 2c       	mov	r13, r9
     974:	ee 84       	ldd	r14, Y+14	; 0x0e
     976:	f9 84       	ldd	r15, Y+9	; 0x09
     978:	0a 85       	ldd	r16, Y+10	; 0x0a
     97a:	16 2d       	mov	r17, r6
     97c:	24 2d       	mov	r18, r4
     97e:	35 2d       	mov	r19, r5
     980:	95 2d       	mov	r25, r5
     982:	99 0f       	add	r25, r25
     984:	99 0b       	sbc	r25, r25
     986:	49 2f       	mov	r20, r25
     988:	59 2f       	mov	r21, r25
     98a:	69 2f       	mov	r22, r25
     98c:	79 2f       	mov	r23, r25
     98e:	89 2f       	mov	r24, r25
     990:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__muldi3>
     994:	a2 2e       	mov	r10, r18
     996:	b3 2e       	mov	r11, r19
     998:	c4 2e       	mov	r12, r20
     99a:	d5 2e       	mov	r13, r21
     99c:	e6 2e       	mov	r14, r22
     99e:	f7 2e       	mov	r15, r23
     9a0:	08 2f       	mov	r16, r24
     9a2:	19 2f       	mov	r17, r25
     9a4:	29 81       	ldd	r18, Y+1	; 0x01
     9a6:	3a 81       	ldd	r19, Y+2	; 0x02
     9a8:	4b 81       	ldd	r20, Y+3	; 0x03
     9aa:	5c 81       	ldd	r21, Y+4	; 0x04
     9ac:	6d 81       	ldd	r22, Y+5	; 0x05
     9ae:	7e 81       	ldd	r23, Y+6	; 0x06
     9b0:	8f 81       	ldd	r24, Y+7	; 0x07
     9b2:	98 85       	ldd	r25, Y+8	; 0x08
     9b4:	0e 94 96 0c 	call	0x192c	; 0x192c <__subdi3>
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpdi2_s8>
     9be:	24 f0       	brlt	.+8      	; 0x9c8 <_Z12LCD_PRINTDECjhh+0x244>
     9c0:	1f ef       	ldi	r17, 0xFF	; 255
     9c2:	41 1a       	sub	r4, r17
     9c4:	51 0a       	sbc	r5, r17
     9c6:	82 cf       	rjmp	.-252    	; 0x8cc <_Z12LCD_PRINTDECjhh+0x148>
     9c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     9ca:	3e 85       	ldd	r19, Y+14	; 0x0e
		if(t > 0){
     9cc:	14 14       	cp	r1, r4
     9ce:	15 04       	cpc	r1, r5
     9d0:	ec f5       	brge	.+122    	; 0xa4c <_Z12LCD_PRINTDECjhh+0x2c8>
			startNum -= mathPow(10, i) * (t - 1); //Subtract the printed number from the start number
     9d2:	a2 01       	movw	r20, r4
     9d4:	41 50       	subi	r20, 0x01	; 1
     9d6:	51 09       	sbc	r21, r1
     9d8:	95 2f       	mov	r25, r21
     9da:	99 0f       	add	r25, r25
     9dc:	99 0b       	sbc	r25, r25
     9de:	a2 2e       	mov	r10, r18
     9e0:	b7 2c       	mov	r11, r7
     9e2:	c8 2c       	mov	r12, r8
     9e4:	d9 2c       	mov	r13, r9
     9e6:	e3 2e       	mov	r14, r19
     9e8:	f9 84       	ldd	r15, Y+9	; 0x09
     9ea:	0a 85       	ldd	r16, Y+10	; 0x0a
     9ec:	16 2d       	mov	r17, r6
     9ee:	24 2f       	mov	r18, r20
     9f0:	35 2f       	mov	r19, r21
     9f2:	49 2f       	mov	r20, r25
     9f4:	59 2f       	mov	r21, r25
     9f6:	69 2f       	mov	r22, r25
     9f8:	79 2f       	mov	r23, r25
     9fa:	89 2f       	mov	r24, r25
     9fc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__muldi3>
     a00:	a2 2e       	mov	r10, r18
     a02:	b3 2e       	mov	r11, r19
     a04:	c4 2e       	mov	r12, r20
     a06:	d5 2e       	mov	r13, r21
     a08:	e6 2e       	mov	r14, r22
     a0a:	f7 2e       	mov	r15, r23
     a0c:	08 2f       	mov	r16, r24
     a0e:	19 2f       	mov	r17, r25
     a10:	29 81       	ldd	r18, Y+1	; 0x01
     a12:	3a 81       	ldd	r19, Y+2	; 0x02
     a14:	4b 81       	ldd	r20, Y+3	; 0x03
     a16:	5c 81       	ldd	r21, Y+4	; 0x04
     a18:	6d 81       	ldd	r22, Y+5	; 0x05
     a1a:	7e 81       	ldd	r23, Y+6	; 0x06
     a1c:	8f 81       	ldd	r24, Y+7	; 0x07
     a1e:	98 85       	ldd	r25, Y+8	; 0x08
     a20:	0e 94 96 0c 	call	0x192c	; 0x192c <__subdi3>
     a24:	29 83       	std	Y+1, r18	; 0x01
     a26:	3a 83       	std	Y+2, r19	; 0x02
     a28:	4b 83       	std	Y+3, r20	; 0x03
     a2a:	5c 83       	std	Y+4, r21	; 0x04
     a2c:	6d 83       	std	Y+5, r22	; 0x05
     a2e:	7e 83       	std	Y+6, r23	; 0x06
     a30:	8f 83       	std	Y+7, r24	; 0x07
     a32:	98 87       	std	Y+8, r25	; 0x08
			*(toBeDispPtr + pos + decCounter - i) = 0x2F + t;
     a34:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     a38:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a40:	e8 0f       	add	r30, r24
     a42:	f9 1f       	adc	r31, r25
     a44:	8f e2       	ldi	r24, 0x2F	; 47
     a46:	84 0d       	add	r24, r4
     a48:	80 83       	st	Z, r24
     a4a:	0d c0       	rjmp	.+26     	; 0xa66 <_Z12LCD_PRINTDECjhh+0x2e2>
		}
		else{
			*(toBeDispPtr + pos + decCounter - i) = 0x30;
     a4c:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     a50:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a54:	cb 84       	ldd	r12, Y+11	; 0x0b
     a56:	dc 84       	ldd	r13, Y+12	; 0x0c
     a58:	ec 0d       	add	r30, r12
     a5a:	fd 1d       	adc	r31, r13
     a5c:	0f 2e       	mov	r0, r31
     a5e:	f0 e3       	ldi	r31, 0x30	; 48
     a60:	df 2e       	mov	r13, r31
     a62:	f0 2d       	mov	r31, r0
     a64:	d0 82       	st	Z, r13
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     a66:	01 e0       	ldi	r16, 0x01	; 1
     a68:	20 1a       	sub	r2, r16
     a6a:	31 08       	sbc	r3, r1
     a6c:	2b 85       	ldd	r18, Y+11	; 0x0b
     a6e:	3c 85       	ldd	r19, Y+12	; 0x0c
     a70:	2f 5f       	subi	r18, 0xFF	; 255
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
     a74:	2b 87       	std	Y+11, r18	; 0x0b
     a76:	3c 87       	std	Y+12, r19	; 0x0c
     a78:	3f ef       	ldi	r19, 0xFF	; 255
     a7a:	23 16       	cp	r2, r19
     a7c:	33 06       	cpc	r3, r19
     a7e:	09 f0       	breq	.+2      	; 0xa82 <_Z12LCD_PRINTDECjhh+0x2fe>
     a80:	23 cf       	rjmp	.-442    	; 0x8c8 <_Z12LCD_PRINTDECjhh+0x144>
     a82:	1f c0       	rjmp	.+62     	; 0xac2 <_Z12LCD_PRINTDECjhh+0x33e>
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
     a84:	14 01       	movw	r2, r8
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	28 1a       	sub	r2, r24
     a8a:	31 08       	sbc	r3, r1
     a8c:	16 cf       	rjmp	.-468    	; 0x8ba <_Z12LCD_PRINTDECjhh+0x136>
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
     a8e:	9f ef       	ldi	r25, 0xFF	; 255
     a90:	89 1a       	sub	r8, r25
     a92:	99 0a       	sbc	r9, r25
     a94:	aa e0       	ldi	r26, 0x0A	; 10
     a96:	b1 2c       	mov	r11, r1
     a98:	c1 2c       	mov	r12, r1
     a9a:	d1 2c       	mov	r13, r1
     a9c:	e1 2c       	mov	r14, r1
     a9e:	f1 2c       	mov	r15, r1
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e0       	ldi	r17, 0x00	; 0
     aa4:	e1 ce       	rjmp	.-574    	; 0x868 <_Z12LCD_PRINTDECjhh+0xe4>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     aa6:	29 81       	ldd	r18, Y+1	; 0x01
     aa8:	3a 81       	ldd	r19, Y+2	; 0x02
     aaa:	4b 81       	ldd	r20, Y+3	; 0x03
     aac:	5c 81       	ldd	r21, Y+4	; 0x04
     aae:	6d 81       	ldd	r22, Y+5	; 0x05
     ab0:	7e 81       	ldd	r23, Y+6	; 0x06
     ab2:	8f 81       	ldd	r24, Y+7	; 0x07
     ab4:	98 85       	ldd	r25, Y+8	; 0x08
     ab6:	a0 e0       	ldi	r26, 0x00	; 0
     ab8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpdi2_s8>
     abc:	19 f3       	breq	.-58     	; 0xa84 <_Z12LCD_PRINTDECjhh+0x300>
     abe:	14 f3       	brlt	.-60     	; 0xa84 <_Z12LCD_PRINTDECjhh+0x300>
     ac0:	e6 cf       	rjmp	.-52     	; 0xa8e <_Z12LCD_PRINTDECjhh+0x30a>
		}
		
		
	}
	//NWR_CHAR();
}
     ac2:	2e 96       	adiw	r28, 0x0e	; 14
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	8f 90       	pop	r8
     ae0:	7f 90       	pop	r7
     ae2:	6f 90       	pop	r6
     ae4:	5f 90       	pop	r5
     ae6:	4f 90       	pop	r4
     ae8:	3f 90       	pop	r3
     aea:	2f 90       	pop	r2
     aec:	08 95       	ret

00000aee <_Z9LCD_PRINTPch>:

void LCD_PRINT(char charBuf[32], uint8_t pos){
	currCursorPos = pos;
     aee:	60 93 4e 21 	sts	0x214E, r22	; 0x80214e <currCursorPos>
     af2:	fc 01       	movw	r30, r24
	int i = 0;
	bool NULL_FOUND = false;
	for(i = 0; !NULL_FOUND; i++){
		if(charBuf[i] == '\0'){
     af4:	91 91       	ld	r25, Z+
     af6:	99 23       	and	r25, r25
     af8:	79 f0       	breq	.+30     	; 0xb18 <_Z9LCD_PRINTPch+0x2a>
		NWR_CHAR();
	}
}

inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
     afa:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     afe:	a0 91 4c 21 	lds	r26, 0x214C	; 0x80214c <toBeDispPtr>
     b02:	b0 91 4d 21 	lds	r27, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     b06:	a8 0f       	add	r26, r24
     b08:	b1 1d       	adc	r27, r1
     b0a:	9c 93       	st	X, r25
	currCursorPos++;
     b0c:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <currCursorPos>
     b16:	ee cf       	rjmp	.-36     	; 0xaf4 <_Z9LCD_PRINTPch+0x6>
     b18:	08 95       	ret

00000b1a <_Z13setScrnAndPWMj>:
			setCharInToBe(charBuf[i]);
		}
	}
}

void setScrnAndPWM(uint16_t tempVal){ //Update screen with brightness value and update PWM
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
	uint16_t fullTemp = (double)tempVal * (double)tempVal * 0.11111;
     b22:	bc 01       	movw	r22, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__floatunsisf>
     b2c:	6b 01       	movw	r12, r22
     b2e:	7c 01       	movw	r14, r24
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__mulsf3>
     b38:	24 ea       	ldi	r18, 0xA4	; 164
     b3a:	3d e8       	ldi	r19, 0x8D	; 141
     b3c:	43 ee       	ldi	r20, 0xE3	; 227
     b3e:	5d e3       	ldi	r21, 0x3D	; 61
     b40:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__mulsf3>
     b44:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fixunssfsi>
	TCE0_CCABUF = fullTemp;
     b48:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
     b4c:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
	uint16_t dispVal = (double)tempVal / 7.68;
	LCD_PRINTDEC(dispVal, 28, 0x3);
     b50:	2f e8       	ldi	r18, 0x8F	; 143
     b52:	32 ec       	ldi	r19, 0xC2	; 194
     b54:	45 ef       	ldi	r20, 0xF5	; 245
     b56:	50 e4       	ldi	r21, 0x40	; 64
     b58:	c7 01       	movw	r24, r14
     b5a:	b6 01       	movw	r22, r12
     b5c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__divsf3>
     b60:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fixunssfsi>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	43 e0       	ldi	r20, 0x03	; 3
     b6a:	6c e1       	ldi	r22, 0x1C	; 28
     b6c:	0e 94 c2 03 	call	0x784	; 0x784 <_Z12LCD_PRINTDECjhh>
}
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	08 95       	ret

00000b7a <_Z16updateBrightnessv>:

void updateBrightness(){
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
	uint16_t tempStore = TCC0_CNT;
     b7e:	c0 91 20 08 	lds	r28, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     b82:	d0 91 21 08 	lds	r29, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
     b86:	be 01       	movw	r22, r28
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__floatunsisf>
     b90:	26 ef       	ldi	r18, 0xF6	; 246
     b92:	37 ef       	ldi	r19, 0xF7	; 247
     b94:	4f e3       	ldi	r20, 0x3F	; 63
     b96:	56 e4       	ldi	r21, 0x46	; 70
     b98:	0e 94 85 0b 	call	0x170a	; 0x170a <__gesf2>
     b9c:	18 16       	cp	r1, r24
     b9e:	34 f0       	brlt	.+12     	; 0xbac <_Z16updateBrightnessv+0x32>
		tempStore = (int)MAX_CNT_BRIGHTNESS;
	}
	//Set a minimum brightness threshold
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
     ba0:	c0 32       	cpi	r28, 0x20	; 32
     ba2:	d1 05       	cpc	r29, r1
     ba4:	28 f4       	brcc	.+10     	; 0xbb0 <_Z16updateBrightnessv+0x36>
		tempStore = 0;
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
     ba8:	d0 e0       	ldi	r29, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <_Z16updateBrightnessv+0x36>
void updateBrightness(){
	uint16_t tempStore = TCC0_CNT;
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
		tempStore = (int)MAX_CNT_BRIGHTNESS;
     bac:	c0 e0       	ldi	r28, 0x00	; 0
     bae:	d0 e3       	ldi	r29, 0x30	; 48
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
		tempStore = 0;
	}
	#define BRIGHTNESS_FINAL_DIV (BRIGHTNESS_DIV * 4)
	brightness = tempStore / BRIGHTNESS_FINAL_DIV;
     bb0:	d2 95       	swap	r29
     bb2:	c2 95       	swap	r28
     bb4:	cf 70       	andi	r28, 0x0F	; 15
     bb6:	cd 27       	eor	r28, r29
     bb8:	df 70       	andi	r29, 0x0F	; 15
     bba:	cd 27       	eor	r28, r29
     bbc:	c0 93 23 21 	sts	0x2123, r28	; 0x802123 <brightness>
     bc0:	d0 93 24 21 	sts	0x2124, r29	; 0x802124 <brightness+0x1>
	setScrnAndPWM(brightness);
     bc4:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     bc8:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     bcc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z13setScrnAndPWMj>
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <_Z7setMode10DMXMANMode>:

//Mode control functions
void setMode(DMXMANMode tempMode){
	if(tempMode == DMX){
     bd6:	81 11       	cpse	r24, r1
     bd8:	33 c0       	rjmp	.+102    	; 0xc40 <_Z7setMode10DMXMANMode+0x6a>
		if(editMode){
     bda:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     bde:	88 23       	and	r24, r24
     be0:	31 f0       	breq	.+12     	; 0xbee <_Z7setMode10DMXMANMode+0x18>
			currBlinkMaskPtr = DMXBlinkVal0;
     be2:	8a ee       	ldi	r24, 0xEA	; 234
     be4:	90 e2       	ldi	r25, 0x20	; 32
     be6:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     bea:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = DMXdisp;
     bee:	84 e2       	ldi	r24, 0x24	; 36
     bf0:	90 e2       	ldi	r25, 0x20	; 32
     bf2:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     bf6:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = DMX;
     bfa:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <currentMode>
	USARTD0_CTRLB &= ~USART_RXEN_bm;
	//PORTD_INTCTRL &= ~PORT_INT0LVL_HI_gc;
}

inline void DMX_ENABLE(){//Enable all DMX interrupts
	TCC1_INTCTRLA |= TC_OVFINTLVL_HI_gc;//Enable timer0 interrupt
     bfe:	e6 e4       	ldi	r30, 0x46	; 70
     c00:	f8 e0       	ldi	r31, 0x08	; 8
     c02:	80 81       	ld	r24, Z
     c04:	83 60       	ori	r24, 0x03	; 3
     c06:	80 83       	st	Z, r24
	USARTD0_CTRLA |= USART_RXCINTLVL_MED_gc;//Enable USART interrupt
     c08:	e3 ea       	ldi	r30, 0xA3	; 163
     c0a:	f9 e0       	ldi	r31, 0x09	; 9
     c0c:	80 81       	ld	r24, Z
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	80 83       	st	Z, r24
	USARTD0_CTRLB |= USART_RXEN_bm;
     c12:	e4 ea       	ldi	r30, 0xA4	; 164
     c14:	f9 e0       	ldi	r31, 0x09	; 9
     c16:	80 81       	ld	r24, Z
     c18:	80 61       	ori	r24, 0x10	; 16
     c1a:	80 83       	st	Z, r24
			currBlinkMaskPtr = DMXBlinkVal0;
		}
		toBeDispPtr = DMXdisp;
		currentMode = DMX;
		DMX_ENABLE();
		LCD_PRINTDEC(DMXChan, 22, 3);
     c1c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     c20:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     c24:	43 e0       	ldi	r20, 0x03	; 3
     c26:	66 e1       	ldi	r22, 0x16	; 22
     c28:	0e 94 c2 03 	call	0x784	; 0x784 <_Z12LCD_PRINTDECjhh>
		LCD_PRINTDEC(DMXChan + 1, 28, 3);
     c2c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     c30:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     c34:	43 e0       	ldi	r20, 0x03	; 3
     c36:	6c e1       	ldi	r22, 0x1C	; 28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	0e 94 c2 03 	call	0x784	; 0x784 <_Z12LCD_PRINTDECjhh>
     c3e:	08 95       	ret
	}
	if(tempMode == MAN){
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	41 f5       	brne	.+80     	; 0xc94 <_Z7setMode10DMXMANMode+0xbe>
		if(editMode){
     c44:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     c48:	88 23       	and	r24, r24
     c4a:	31 f0       	breq	.+12     	; 0xc58 <_Z7setMode10DMXMANMode+0x82>
			currBlinkMaskPtr = MANBlinkVal0;
     c4c:	86 e6       	ldi	r24, 0x66	; 102
     c4e:	90 e2       	ldi	r25, 0x20	; 32
     c50:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     c54:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = MANdisp;
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	90 e2       	ldi	r25, 0x20	; 32
     c5c:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     c60:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = MAN;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <currentMode>
		eeprom_write_byte(MODE_addr, modeByte);
	}
}

inline void DMX_DISABLE(){//Disable all DMX interrupts
	TCC1_INTCTRLA &= ~TC_OVFINTLVL_HI_gc;//Disable timer0 interrupt
     c6a:	e6 e4       	ldi	r30, 0x46	; 70
     c6c:	f8 e0       	ldi	r31, 0x08	; 8
     c6e:	80 81       	ld	r24, Z
     c70:	8c 7f       	andi	r24, 0xFC	; 252
     c72:	80 83       	st	Z, r24
	USARTD0_CTRLA &= ~USART_RXCINTLVL_MED_gc;//Disable USART interrupt
     c74:	e3 ea       	ldi	r30, 0xA3	; 163
     c76:	f9 e0       	ldi	r31, 0x09	; 9
     c78:	80 81       	ld	r24, Z
     c7a:	8f 7d       	andi	r24, 0xDF	; 223
     c7c:	80 83       	st	Z, r24
	USARTD0_CTRLB &= ~USART_RXEN_bm;
     c7e:	e4 ea       	ldi	r30, 0xA4	; 164
     c80:	f9 e0       	ldi	r31, 0x09	; 9
     c82:	80 81       	ld	r24, Z
     c84:	8f 7e       	andi	r24, 0xEF	; 239
     c86:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal0;
		}
		toBeDispPtr = MANdisp;
		currentMode = MAN;
		DMX_DISABLE();
		setScrnAndPWM(brightness);
     c88:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     c8c:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     c90:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z13setScrnAndPWMj>
     c94:	08 95       	ret

00000c96 <_Z17update_RAM_EEPROMv>:
	}
}

void update_RAM_EEPROM(){ //Updates RAM with all brightness, mode and DMX information from values stored in the EEPROM
	brightness = eeprom_read_word(BRIGHTNESS_addr);
     c96:	83 e1       	ldi	r24, 0x13	; 19
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <eeprom_read_word>
     c9e:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <brightness>
     ca2:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <brightness+0x1>
	DMXChan = eeprom_read_word(DMX_addr);
     ca6:	85 e1       	ldi	r24, 0x15	; 21
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <eeprom_read_word>
     cae:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
     cb2:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
	if(eeprom_read_byte(MODE_addr)){
     cb6:	80 e1       	ldi	r24, 0x10	; 16
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 c3 0c 	call	0x1986	; 0x1986 <eeprom_read_byte>
     cbe:	88 23       	and	r24, r24
     cc0:	51 f0       	breq	.+20     	; 0xcd6 <_Z17update_RAM_EEPROMv+0x40>
		setScrnAndPWM(brightness);
     cc2:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     cc6:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     cca:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z13setScrnAndPWMj>
		setMode(MAN);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_Z7setMode10DMXMANMode>
     cd4:	08 95       	ret
	}
	else{
		setMode(DMX);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_Z7setMode10DMXMANMode>
     cdc:	08 95       	ret

00000cde <_Z16setPermanentModeb>:
	}
}

void setPermanentMode(bool temp){
     cde:	cf 93       	push	r28
	if(blinkTimeoutIgnore != temp){
     ce0:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <blinkTimeoutIgnore>
     ce4:	98 17       	cp	r25, r24
     ce6:	81 f0       	breq	.+32     	; 0xd08 <_Z16setPermanentModeb+0x2a>
     ce8:	c8 2f       	mov	r28, r24
		if(temp){
     cea:	88 23       	and	r24, r24
     cec:	31 f0       	breq	.+12     	; 0xcfa <_Z16setPermanentModeb+0x1c>
			LCD_PRINT("P", 15);
     cee:	6f e0       	ldi	r22, 0x0F	; 15
     cf0:	8b e0       	ldi	r24, 0x0B	; 11
     cf2:	91 e2       	ldi	r25, 0x21	; 33
     cf4:	0e 94 77 05 	call	0xaee	; 0xaee <_Z9LCD_PRINTPch>
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <_Z16setPermanentModeb+0x26>
		}
		else{
			LCD_PRINT(" ", 15);
     cfa:	6f e0       	ldi	r22, 0x0F	; 15
     cfc:	82 e1       	ldi	r24, 0x12	; 18
     cfe:	91 e2       	ldi	r25, 0x21	; 33
     d00:	0e 94 77 05 	call	0xaee	; 0xaee <_Z9LCD_PRINTPch>
		}
		blinkTimeoutIgnore = temp;
     d04:	c0 93 1d 21 	sts	0x211D, r28	; 0x80211d <blinkTimeoutIgnore>
	}
}
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <_Z10setEncMode11encoderMode>:

void setEncMode(encoderMode tempMode){
	switch(tempMode){
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	d9 f0       	breq	.+54     	; 0xd46 <_Z10setEncMode11encoderMode+0x3a>
     d10:	30 f0       	brcs	.+12     	; 0xd1e <_Z10setEncMode11encoderMode+0x12>
     d12:	82 30       	cpi	r24, 0x02	; 2
     d14:	f1 f1       	breq	.+124    	; 0xd92 <_Z10setEncMode11encoderMode+0x86>
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	09 f4       	brne	.+2      	; 0xd1c <_Z10setEncMode11encoderMode+0x10>
     d1a:	62 c0       	rjmp	.+196    	; 0xde0 <_Z10setEncMode11encoderMode+0xd4>
     d1c:	08 95       	ret
		case OFF:
		EncoderMode = OFF;
     d1e:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <EncoderMode>
		TCC0_CTRLA &= ~TC_CLKSEL_DIV1_gc;
     d22:	e0 e0       	ldi	r30, 0x00	; 0
     d24:	f8 e0       	ldi	r31, 0x08	; 8
     d26:	80 81       	ld	r24, Z
     d28:	8e 7f       	andi	r24, 0xFE	; 254
     d2a:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     d2c:	e6 e0       	ldi	r30, 0x06	; 6
     d2e:	f8 e0       	ldi	r31, 0x08	; 8
     d30:	80 81       	ld	r24, Z
     d32:	8e 7f       	andi	r24, 0xFE	; 254
     d34:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d36:	e7 e0       	ldi	r30, 0x07	; 7
     d38:	f8 e0       	ldi	r31, 0x08	; 8
     d3a:	80 81       	ld	r24, Z
     d3c:	8a 7f       	andi	r24, 0xFA	; 250
     d3e:	80 83       	st	Z, r24
		update_EEPROM_RAM();
     d40:	0e 94 4d 02 	call	0x49a	; 0x49a <_Z17update_EEPROM_RAMv>
		break;
     d44:	08 95       	ret

		case MODESEL:
		#define TCC0_CNT_MODE (int)(160 * MODE_DIV)
		#define TCC0_PER_MODE (int)(320 * MODE_DIV)
		TCC0_CNT = TCC0_CNT_MODE;
     d46:	80 ea       	ldi	r24, 0xA0	; 160
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d4e:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     d52:	e1 e0       	ldi	r30, 0x01	; 1
     d54:	f8 e0       	ldi	r31, 0x08	; 8
     d56:	80 81       	ld	r24, Z
     d58:	88 7f       	andi	r24, 0xF8	; 248
     d5a:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_MODE;
     d5c:	80 e4       	ldi	r24, 0x40	; 64
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d64:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     d68:	e6 e0       	ldi	r30, 0x06	; 6
     d6a:	f8 e0       	ldi	r31, 0x08	; 8
     d6c:	80 81       	ld	r24, Z
     d6e:	81 60       	ori	r24, 0x01	; 1
     d70:	80 83       	st	Z, r24
		OVF_firstSam = true;
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <OVF_firstSam>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d78:	e7 e0       	ldi	r30, 0x07	; 7
     d7a:	f8 e0       	ldi	r31, 0x08	; 8
     d7c:	80 81       	ld	r24, Z
     d7e:	8a 7f       	andi	r24, 0xFA	; 250
     d80:	80 83       	st	Z, r24
		EncoderMode = MODESEL;
     d82:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     d86:	e0 e0       	ldi	r30, 0x00	; 0
     d88:	f8 e0       	ldi	r31, 0x08	; 8
     d8a:	80 81       	ld	r24, Z
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	80 83       	st	Z, r24
		break;
     d90:	08 95       	ret

		case CHANSEL:
		#define TCC0_CNT_CHAN (int)(160 * CHANNEL_DIV)
		#define TCC0_PER_CHAN (int)(320 * CHANNEL_DIV)
		TCC0_CNT = TCC0_CNT_CHAN;
     d92:	80 ea       	ldi	r24, 0xA0	; 160
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d9a:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     d9e:	e1 e0       	ldi	r30, 0x01	; 1
     da0:	f8 e0       	ldi	r31, 0x08	; 8
     da2:	80 81       	ld	r24, Z
     da4:	88 7f       	andi	r24, 0xF8	; 248
     da6:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_CHAN;
     da8:	80 e4       	ldi	r24, 0x40	; 64
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     db0:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     db4:	e6 e0       	ldi	r30, 0x06	; 6
     db6:	f8 e0       	ldi	r31, 0x08	; 8
     db8:	80 81       	ld	r24, Z
     dba:	81 60       	ori	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24
		OVF_firstSam = true;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <OVF_firstSam>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     dc4:	e7 e0       	ldi	r30, 0x07	; 7
     dc6:	f8 e0       	ldi	r31, 0x08	; 8
     dc8:	80 81       	ld	r24, Z
     dca:	8a 7f       	andi	r24, 0xFA	; 250
     dcc:	80 83       	st	Z, r24
		EncoderMode = CHANSEL;
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     dd4:	e0 e0       	ldi	r30, 0x00	; 0
     dd6:	f8 e0       	ldi	r31, 0x08	; 8
     dd8:	80 81       	ld	r24, Z
     dda:	81 60       	ori	r24, 0x01	; 1
     ddc:	80 83       	st	Z, r24
		break;
     dde:	08 95       	ret

		case BRIGHTSEL:
		EncoderMode = BRIGHTSEL;
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     de6:	e0 e0       	ldi	r30, 0x00	; 0
     de8:	f8 e0       	ldi	r31, 0x08	; 8
     dea:	80 81       	ld	r24, Z
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	80 83       	st	Z, r24
		TCC0_CTRLB |= TC_WGMODE_DS_B_gc;
     df0:	e1 e0       	ldi	r30, 0x01	; 1
     df2:	f8 e0       	ldi	r31, 0x08	; 8
     df4:	80 81       	ld	r24, Z
     df6:	87 60       	ori	r24, 0x07	; 7
     df8:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     dfa:	e6 e0       	ldi	r30, 0x06	; 6
     dfc:	f8 e0       	ldi	r31, 0x08	; 8
     dfe:	80 81       	ld	r24, Z
     e00:	8e 7f       	andi	r24, 0xFE	; 254
     e02:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     e04:	e7 e0       	ldi	r30, 0x07	; 7
     e06:	f8 e0       	ldi	r31, 0x08	; 8
     e08:	80 81       	ld	r24, Z
     e0a:	8a 7f       	andi	r24, 0xFA	; 250
     e0c:	80 83       	st	Z, r24
		#define TCC0_PER_BRIGHTNESS (3080 * BRIGHTNESS_DIV)
		TCC0_PER = TCC0_PER_BRIGHTNESS;
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	90 e3       	ldi	r25, 0x30	; 48
     e12:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     e16:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = (int)(brightness * BRIGHTNESS_FINAL_DIV);
     e1a:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     e1e:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     e22:	82 95       	swap	r24
     e24:	92 95       	swap	r25
     e26:	90 7f       	andi	r25, 0xF0	; 240
     e28:	98 27       	eor	r25, r24
     e2a:	80 7f       	andi	r24, 0xF0	; 240
     e2c:	98 27       	eor	r25, r24
     e2e:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     e32:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     e36:	08 95       	ret

00000e38 <_Z12exitEditModev>:
		break;
	}
}

void exitEditMode(){
	setEncMode(OFF);
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z10setEncMode11encoderMode>
	currBlinkMaskPtr = NULLBlinkVal;
     e3e:	82 e7       	ldi	r24, 0x72	; 114
     e40:	91 e2       	ldi	r25, 0x21	; 33
     e42:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e46:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
	editMode = false;
     e4a:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
	TCD0_PER = BUTTON_DELAY;
     e4e:	84 e8       	ldi	r24, 0x84	; 132
     e50:	9e e1       	ldi	r25, 0x1E	; 30
     e52:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e56:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	setPermanentMode(false);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z16setPermanentModeb>
     e60:	08 95       	ret

00000e62 <__vector_79>:
}



//All ISR
ISR(TCD0_CCA_vect){
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	8f 93       	push	r24
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	#ifdef INVERT_BUTTON
		PORTC_PIN2CTRL |= PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
     e72:	e2 e5       	ldi	r30, 0x52	; 82
     e74:	f6 e0       	ldi	r31, 0x06	; 6
     e76:	80 81       	ld	r24, Z
     e78:	80 64       	ori	r24, 0x40	; 64
     e7a:	80 83       	st	Z, r24
	#else
		PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
    #endif
	
	TCD0_INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
     e7c:	e7 e0       	ldi	r30, 0x07	; 7
     e7e:	f9 e0       	ldi	r31, 0x09	; 9
     e80:	80 81       	ld	r24, Z
     e82:	8e 7f       	andi	r24, 0xFE	; 254
     e84:	80 83       	st	Z, r24
} 
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	8f 91       	pop	r24
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_80>:

ISR(TCD0_CCB_vect){
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	8f 93       	push	r24
     ea2:	9f 93       	push	r25
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
	TCD0_PER = 1000; //Set debounce timer for short press detection
     ea8:	88 ee       	ldi	r24, 0xE8	; 232
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     eb0:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	longPressDetection = false;
     eb4:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
	TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
     eb8:	e7 e0       	ldi	r30, 0x07	; 7
     eba:	f9 e0       	ldi	r31, 0x09	; 9
     ebc:	80 81       	ld	r24, Z
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	80 83       	st	Z, r24
}
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <_Z21buttonRegularResponsev>:

void buttonRegularResponse(){
	if(!editMode){
     ed4:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     ed8:	81 11       	cpse	r24, r1
     eda:	0f c0       	rjmp	.+30     	; 0xefa <_Z21buttonRegularResponsev+0x26>
		TCD0_PER = 1000; //Set debounce timer for short press detection
     edc:	88 ee       	ldi	r24, 0xE8	; 232
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     ee4:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
		editMode = true;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <editMode>
		currentSelector = 0;
     eee:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <currentSelector>
		editCounter = 0;
     ef2:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     ef6:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	}
	if(currentMode == DMX){
     efa:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     efe:	81 11       	cpse	r24, r1
     f00:	3c c0       	rjmp	.+120    	; 0xf7a <_Z21buttonRegularResponsev+0xa6>
		switch(currentSelector){
     f02:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	11 f1       	breq	.+68     	; 0xf4e <_Z21buttonRegularResponsev+0x7a>
     f0a:	28 f4       	brcc	.+10     	; 0xf16 <_Z21buttonRegularResponsev+0x42>
     f0c:	88 23       	and	r24, r24
     f0e:	41 f0       	breq	.+16     	; 0xf20 <_Z21buttonRegularResponsev+0x4c>
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	81 f0       	breq	.+32     	; 0xf34 <_Z21buttonRegularResponsev+0x60>
     f14:	32 c0       	rjmp	.+100    	; 0xf7a <_Z21buttonRegularResponsev+0xa6>
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	21 f1       	breq	.+72     	; 0xf62 <_Z21buttonRegularResponsev+0x8e>
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	61 f1       	breq	.+88     	; 0xf76 <_Z21buttonRegularResponsev+0xa2>
     f1e:	2d c0       	rjmp	.+90     	; 0xf7a <_Z21buttonRegularResponsev+0xa6>
			case 0:
			currBlinkMaskPtr = DMXBlinkVal0;
     f20:	8a ee       	ldi	r24, 0xEA	; 234
     f22:	90 e2       	ldi	r25, 0x20	; 32
     f24:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f28:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z10setEncMode11encoderMode>
			break;
     f32:	23 c0       	rjmp	.+70     	; 0xf7a <_Z21buttonRegularResponsev+0xa6>
			case 1:
			currBlinkMaskPtr = DMXBlinkVal1;
     f34:	89 ec       	ldi	r24, 0xC9	; 201
     f36:	90 e2       	ldi	r25, 0x20	; 32
     f38:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f3c:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 100;
     f40:	84 e6       	ldi	r24, 0x64	; 100
     f42:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			setEncMode(CHANSEL);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z10setEncMode11encoderMode>
			break;
     f4c:	16 c0       	rjmp	.+44     	; 0xf7a <_Z21buttonRegularResponsev+0xa6>
			case 2:
			currBlinkMaskPtr = DMXBlinkVal2;
     f4e:	88 ea       	ldi	r24, 0xA8	; 168
     f50:	90 e2       	ldi	r25, 0x20	; 32
     f52:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f56:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 10;
     f5a:	8a e0       	ldi	r24, 0x0A	; 10
     f5c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     f60:	4b c0       	rjmp	.+150    	; 0xff8 <_Z21buttonRegularResponsev+0x124>
			case 3:
			currBlinkMaskPtr = DMXBlinkVal3;
     f62:	87 e8       	ldi	r24, 0x87	; 135
     f64:	90 e2       	ldi	r25, 0x20	; 32
     f66:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f6a:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     f74:	41 c0       	rjmp	.+130    	; 0xff8 <_Z21buttonRegularResponsev+0x124>
			case 4:
			exitEditMode();
     f76:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Z12exitEditModev>
			break;
		}
	}
	if(currentMode == MAN){
     f7a:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	d9 f5       	brne	.+118    	; 0xff8 <_Z21buttonRegularResponsev+0x124>
		switch(currentSelector){
     f82:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	71 f0       	breq	.+28     	; 0xfa6 <_Z21buttonRegularResponsev+0xd2>
     f8a:	18 f0       	brcs	.+6      	; 0xf92 <_Z21buttonRegularResponsev+0xbe>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	91 f1       	breq	.+100    	; 0xff4 <_Z21buttonRegularResponsev+0x120>
     f90:	33 c0       	rjmp	.+102    	; 0xff8 <_Z21buttonRegularResponsev+0x124>
			case 0:
			currBlinkMaskPtr = MANBlinkVal0;
     f92:	86 e6       	ldi	r24, 0x66	; 102
     f94:	90 e2       	ldi	r25, 0x20	; 32
     f96:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f9a:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z10setEncMode11encoderMode>
			break;
     fa4:	29 c0       	rjmp	.+82     	; 0xff8 <_Z21buttonRegularResponsev+0x124>
			case 1:
			TCD0_CNT = 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
     fae:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
			TCD0_PER = 46875;
     fb2:	8b e1       	ldi	r24, 0x1B	; 27
     fb4:	97 eb       	ldi	r25, 0xB7	; 183
     fb6:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     fba:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
			TCD0_CCB = 0;
     fbe:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     fc2:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
			TCD0_INTFLAGS |= (1 << 5); //Clear flag because the timer was just at 0
     fc6:	ec e0       	ldi	r30, 0x0C	; 12
     fc8:	f9 e0       	ldi	r31, 0x09	; 9
     fca:	80 81       	ld	r24, Z
     fcc:	80 62       	ori	r24, 0x20	; 32
     fce:	80 83       	st	Z, r24
			longPressDetection = true;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <__data_end>
			TCD0_INTCTRLB |= TC_CCBINTLVL_LO_gc; //When the button is released before the longPress mark, return to normal operation
     fd6:	e7 e0       	ldi	r30, 0x07	; 7
     fd8:	f9 e0       	ldi	r31, 0x09	; 9
     fda:	80 81       	ld	r24, Z
     fdc:	84 60       	ori	r24, 0x04	; 4
     fde:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal1;
     fe0:	85 e4       	ldi	r24, 0x45	; 69
     fe2:	90 e2       	ldi	r25, 0x20	; 32
     fe4:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     fe8:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(BRIGHTSEL);
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z10setEncMode11encoderMode>
			break;
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <_Z21buttonRegularResponsev+0x124>
			case 2:
			exitEditMode();
     ff4:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Z12exitEditModev>
			break;
		}
	}
	currentSelector++;
     ff8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <currentSelector>
    1002:	08 95       	ret

00001004 <__vector_77>:
}

//PC2 interrupt when button is pressed
ISR(TCD0_OVF_vect){
    1004:	1f 92       	push	r1
    1006:	0f 92       	push	r0
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	0f 92       	push	r0
    100c:	11 24       	eor	r1, r1
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
	
	if(longPressDetection){
    1026:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
    102a:	88 23       	and	r24, r24
    102c:	89 f0       	breq	.+34     	; 0x1050 <__vector_77+0x4c>
		setPermanentMode(true);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z16setPermanentModeb>
		
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc;
    1034:	e7 e0       	ldi	r30, 0x07	; 7
    1036:	f9 e0       	ldi	r31, 0x09	; 9
    1038:	80 81       	ld	r24, Z
    103a:	8b 7f       	andi	r24, 0xFB	; 251
    103c:	80 83       	st	Z, r24
		longPressDetection = false;
    103e:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		//Short press detection again
		TCD0_PER = 1000;
    1042:	88 ee       	ldi	r24, 0xE8	; 232
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    104a:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <__vector_77+0x50>
	}
	else{
		buttonRegularResponse();
    1050:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z21buttonRegularResponsev>
	}
	if(!longPressDetection){
    1054:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
    1058:	81 11       	cpse	r24, r1
    105a:	0a c0       	rjmp	.+20     	; 0x1070 <__vector_77+0x6c>
		#ifdef INVERT_BUTTON
			PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //Invert button behaviour
    105c:	e2 e5       	ldi	r30, 0x52	; 82
    105e:	f6 e0       	ldi	r31, 0x06	; 6
    1060:	80 81       	ld	r24, Z
    1062:	8f 7b       	andi	r24, 0xBF	; 191
    1064:	80 83       	st	Z, r24
		#else
			PORTC_PIN2CTRL |= PORT_INVEN_bm;
		#endif
		TCD0_INTCTRLB |= TC_CCAINTLVL_LO_gc; //Setup compare interrupt so input will be un-inverted after release
    1066:	e7 e0       	ldi	r30, 0x07	; 7
    1068:	f9 e0       	ldi	r31, 0x09	; 9
    106a:	80 81       	ld	r24, Z
    106c:	81 60       	ori	r24, 0x01	; 1
    106e:	80 83       	st	Z, r24
	}
	
}
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_14>:

ISR(TCC0_OVF_vect){
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
	if(!OVF_firstSam){
    10b4:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <OVF_firstSam>
    10b8:	81 11       	cpse	r24, r1
    10ba:	3c c0       	rjmp	.+120    	; 0x1134 <__vector_14+0xa2>
		if(EncoderMode == CHANSEL){
    10bc:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	19 f5       	brne	.+70     	; 0x110a <__vector_14+0x78>
			if(DMXChan - dmxMult >= DMXmin && TCC0_CNT >= TCC0_CNT_CHAN){
    10c4:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    10c8:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    10cc:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    10d0:	82 1b       	sub	r24, r18
    10d2:	91 09       	sbc	r25, r1
    10d4:	18 16       	cp	r1, r24
    10d6:	19 06       	cpc	r1, r25
    10d8:	0c f0       	brlt	.+2      	; 0x10dc <__vector_14+0x4a>
    10da:	4d c0       	rjmp	.+154    	; 0x1176 <__vector_14+0xe4>
    10dc:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10e0:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10e4:	80 3a       	cpi	r24, 0xA0	; 160
    10e6:	91 05       	cpc	r25, r1
    10e8:	40 f5       	brcc	.+80     	; 0x113a <__vector_14+0xa8>
    10ea:	45 c0       	rjmp	.+138    	; 0x1176 <__vector_14+0xe4>
				DMXChan -= dmxMult;
				LCD_PRINTDEC(DMXChan, 22, 3);
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
			}
			else if(DMXChan + dmxMult <= DMXMax && TCC0_CNT < TCC0_CNT_CHAN){
    10ec:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10f0:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10f4:	80 3a       	cpi	r24, 0xA0	; 160
    10f6:	91 05       	cpc	r25, r1
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <__vector_14+0x6a>
    10fa:	4a c0       	rjmp	.+148    	; 0x1190 <__vector_14+0xfe>
				DMXChan += dmxMult;
				LCD_PRINTDEC(DMXChan, 22, 3);
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
			}
			TCC0_CNT = TCC0_CNT_CHAN;
    10fc:	80 ea       	ldi	r24, 0xA0	; 160
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1104:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1108:	61 c0       	rjmp	.+194    	; 0x11cc <__vector_14+0x13a>
		}
		else{
			
			if(TCC0_CNT < TCC0_CNT_MODE){
    110a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    110e:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1112:	80 3a       	cpi	r24, 0xA0	; 160
    1114:	91 05       	cpc	r25, r1
    1116:	20 f4       	brcc	.+8      	; 0x1120 <__vector_14+0x8e>
				setMode(DMX);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_Z7setMode10DMXMANMode>
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <__vector_14+0x94>
			}
			else{
				setMode(MAN);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_Z7setMode10DMXMANMode>
			}
			TCC0_CNT = TCC0_CNT_MODE;
    1126:	80 ea       	ldi	r24, 0xA0	; 160
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    112e:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1132:	4c c0       	rjmp	.+152    	; 0x11cc <__vector_14+0x13a>
		}

	}
	else{
		
		OVF_firstSam = false;
    1134:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <OVF_firstSam>
	}
	
}
    1138:	49 c0       	rjmp	.+146    	; 0x11cc <__vector_14+0x13a>

ISR(TCC0_OVF_vect){
	if(!OVF_firstSam){
		if(EncoderMode == CHANSEL){
			if(DMXChan - dmxMult >= DMXmin && TCC0_CNT >= TCC0_CNT_CHAN){
				DMXChan -= dmxMult;
    113a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    113e:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1142:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1146:	82 1b       	sub	r24, r18
    1148:	91 09       	sbc	r25, r1
    114a:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    114e:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    1152:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1156:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    115a:	43 e0       	ldi	r20, 0x03	; 3
    115c:	66 e1       	ldi	r22, 0x16	; 22
    115e:	0e 94 c2 03 	call	0x784	; 0x784 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    1162:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1166:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    116a:	43 e0       	ldi	r20, 0x03	; 3
    116c:	6c e1       	ldi	r22, 0x1C	; 28
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	0e 94 c2 03 	call	0x784	; 0x784 <_Z12LCD_PRINTDECjhh>
    1174:	c3 cf       	rjmp	.-122    	; 0x10fc <__vector_14+0x6a>
			}
			else if(DMXChan + dmxMult <= DMXMax && TCC0_CNT < TCC0_CNT_CHAN){
    1176:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    117a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    117e:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1182:	82 0f       	add	r24, r18
    1184:	91 1d       	adc	r25, r1
    1186:	81 15       	cp	r24, r1
    1188:	92 40       	sbci	r25, 0x02	; 2
    118a:	0c f4       	brge	.+2      	; 0x118e <__vector_14+0xfc>
    118c:	af cf       	rjmp	.-162    	; 0x10ec <__vector_14+0x5a>
    118e:	b6 cf       	rjmp	.-148    	; 0x10fc <__vector_14+0x6a>
				DMXChan += dmxMult;
    1190:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1194:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1198:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    119c:	82 0f       	add	r24, r18
    119e:	91 1d       	adc	r25, r1
    11a0:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    11a4:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    11a8:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    11ac:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    11b0:	43 e0       	ldi	r20, 0x03	; 3
    11b2:	66 e1       	ldi	r22, 0x16	; 22
    11b4:	0e 94 c2 03 	call	0x784	; 0x784 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    11b8:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    11bc:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    11c0:	43 e0       	ldi	r20, 0x03	; 3
    11c2:	6c e1       	ldi	r22, 0x1C	; 28
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	0e 94 c2 03 	call	0x784	; 0x784 <_Z12LCD_PRINTDECjhh>
    11ca:	98 cf       	rjmp	.-208    	; 0x10fc <__vector_14+0x6a>
	else{
		
		OVF_firstSam = false;
	}
	
}
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <__vector_10>:

ISR(RTC_OVF_vect){
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
	
	if(blinkTimeoutIgnore){
    1210:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <blinkTimeoutIgnore>
    1214:	88 23       	and	r24, r24
    1216:	29 f0       	breq	.+10     	; 0x1222 <__vector_10+0x34>
		editCounter = 0;
    1218:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
    121c:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <__vector_10+0x46>
	}
	else
	{
		editCounter++;
    1222:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    1226:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <editCounter>
    1230:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <editCounter+0x1>
	}
	if(editCounter > 15){
    1234:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    1238:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    123c:	40 97       	sbiw	r24, 0x10	; 16
    123e:	48 f0       	brcs	.+18     	; 0x1252 <__vector_10+0x64>
		longPressDetection = false;
    1240:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
    1244:	e7 e0       	ldi	r30, 0x07	; 7
    1246:	f9 e0       	ldi	r31, 0x09	; 9
    1248:	80 81       	ld	r24, Z
    124a:	8b 7f       	andi	r24, 0xFB	; 251
    124c:	80 83       	st	Z, r24
		exitEditMode();
    124e:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Z12exitEditModev>
	}
}
    1252:	ff 91       	pop	r31
    1254:	ef 91       	pop	r30
    1256:	bf 91       	pop	r27
    1258:	af 91       	pop	r26
    125a:	9f 91       	pop	r25
    125c:	8f 91       	pop	r24
    125e:	7f 91       	pop	r23
    1260:	6f 91       	pop	r22
    1262:	5f 91       	pop	r21
    1264:	4f 91       	pop	r20
    1266:	3f 91       	pop	r19
    1268:	2f 91       	pop	r18
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <__vector_88>:

ISR(USARTD0_RXC_vect){//Interrupt for new DMX char
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
	bool FERR_flag = USARTD0_STATUS & USART_FERR_bm;
    1296:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
	uint16_t USART_data = USARTD0_DATA;
    129a:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
	if(!FERR_flag){
    129e:	94 fd       	sbrc	r25, 4
    12a0:	51 c0       	rjmp	.+162    	; 0x1344 <__vector_88+0xd0>
	}
}

ISR(USARTD0_RXC_vect){//Interrupt for new DMX char
	bool FERR_flag = USARTD0_STATUS & USART_FERR_bm;
	uint16_t USART_data = USARTD0_DATA;
    12a2:	90 e0       	ldi	r25, 0x00	; 0
	if(!FERR_flag){
		if(cnt == DMXChan){//If DMX channel matches the set DMX channel
    12a4:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    12a8:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    12ac:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
    12b0:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
    12b4:	42 17       	cp	r20, r18
    12b6:	53 07       	cpc	r21, r19
    12b8:	31 f4       	brne	.+12     	; 0x12c6 <__vector_88+0x52>
			finalRes = USART_data << 8; //Buffer 8 MSB
    12ba:	38 2f       	mov	r19, r24
    12bc:	22 27       	eor	r18, r18
    12be:	20 93 1f 21 	sts	0x211F, r18	; 0x80211f <finalRes>
    12c2:	30 93 20 21 	sts	0x2120, r19	; 0x802120 <finalRes+0x1>
			//LCD_PRINTDEC(USART_data, 16, 5);
		}
		if(cnt == DMXChan + 1){//If DMX channel matches the set DMX channel + 1
    12c6:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
    12ca:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
    12ce:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    12d2:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	24 17       	cp	r18, r20
    12dc:	35 07       	cpc	r19, r21
    12de:	a9 f4       	brne	.+42     	; 0x130a <__vector_88+0x96>
			//LCD_PRINTDEC(USART_data, 0, 5);
			finalRes |= USART_data; //Buffer LSB
    12e0:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <finalRes>
    12e4:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <finalRes+0x1>
    12e8:	28 2b       	or	r18, r24
    12ea:	39 2b       	or	r19, r25
    12ec:	20 93 1f 21 	sts	0x211F, r18	; 0x80211f <finalRes>
    12f0:	30 93 20 21 	sts	0x2120, r19	; 0x802120 <finalRes+0x1>
			TCE0_CCABUF = finalRes; //Set compare register for PWM
    12f4:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <finalRes>
    12f8:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <finalRes+0x1>
    12fc:	20 93 38 0a 	sts	0x0A38, r18	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
    1300:	30 93 39 0a 	sts	0x0A39, r19	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
		
			lt = true;
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	20 93 2a 21 	sts	0x212A, r18	; 0x80212a <lt>
		}

		if(DMXErrFlag){
    130a:	20 91 25 21 	lds	r18, 0x2125	; 0x802125 <DMXErrFlag>
    130e:	22 23       	and	r18, r18
    1310:	59 f0       	breq	.+22     	; 0x1328 <__vector_88+0xb4>
			lt = true;
    1312:	21 e0       	ldi	r18, 0x01	; 1
    1314:	20 93 2a 21 	sts	0x212A, r18	; 0x80212a <lt>
			if(cnt == 0 && USART_data == 0){
    1318:	20 91 21 21 	lds	r18, 0x2121	; 0x802121 <cnt>
    131c:	30 91 22 21 	lds	r19, 0x2122	; 0x802122 <cnt+0x1>
    1320:	23 2b       	or	r18, r19
    1322:	11 f4       	brne	.+4      	; 0x1328 <__vector_88+0xb4>
    1324:	89 2b       	or	r24, r25
    1326:	99 f0       	breq	.+38     	; 0x134e <__vector_88+0xda>
				DMXErrFlag = false;
				LCD_PRINT("      ", 10);
				lt = true;
			}
		}
		DMXErrCnt = 0;
    1328:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    132c:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
		cnt++;//Increment channel counter
    1330:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    1334:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <cnt>
    133e:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <cnt+0x1>
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <__vector_88+0xf0>
	}
	else{
		cnt = 0;
    1344:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <cnt>
    1348:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <cnt+0x1>
	}
}
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <__vector_88+0xf0>
		}

		if(DMXErrFlag){
			lt = true;
			if(cnt == 0 && USART_data == 0){
				DMXErrFlag = false;
    134e:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <DMXErrFlag>
				LCD_PRINT("      ", 10);
    1352:	6a e0       	ldi	r22, 0x0A	; 10
    1354:	8d e0       	ldi	r24, 0x0D	; 13
    1356:	91 e2       	ldi	r25, 0x21	; 33
    1358:	0e 94 77 05 	call	0xaee	; 0xaee <_Z9LCD_PRINTPch>
				lt = true;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
    1362:	e2 cf       	rjmp	.-60     	; 0x1328 <__vector_88+0xb4>
		cnt++;//Increment channel counter
	}
	else{
		cnt = 0;
	}
}
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_20>:

ISR(TCC1_OVF_vect){
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	cf 93       	push	r28
    13a6:	ef 93       	push	r30
    13a8:	ff 93       	push	r31
	DMXErrCnt++;
    13aa:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    13ae:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <DMXErrCnt>
    13b8:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <DMXErrCnt+0x1>
	if((DMXErrCnt > 11494) && !DMXErrFlag){ //If there hasn't been any change in 1 second
    13bc:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    13c0:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    13c4:	87 3e       	cpi	r24, 0xE7	; 231
    13c6:	9c 42       	sbci	r25, 0x2C	; 44
    13c8:	90 f0       	brcs	.+36     	; 0x13ee <__vector_20+0x68>
    13ca:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    13ce:	81 11       	cpse	r24, r1
    13d0:	0e c0       	rjmp	.+28     	; 0x13ee <__vector_20+0x68>
		DMXErrFlag = true;
    13d2:	c1 e0       	ldi	r28, 0x01	; 1
    13d4:	c0 93 25 21 	sts	0x2125, r28	; 0x802125 <DMXErrFlag>
		LCD_PRINT("NO DMX", 10);
    13d8:	6a e0       	ldi	r22, 0x0A	; 10
    13da:	84 e1       	ldi	r24, 0x14	; 20
    13dc:	91 e2       	ldi	r25, 0x21	; 33
    13de:	0e 94 77 05 	call	0xaee	; 0xaee <_Z9LCD_PRINTPch>
		lt = true;
    13e2:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
		DMXErrCnt = 0;
    13e6:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    13ea:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	}
	
}
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	cf 91       	pop	r28
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	0f 90       	pop	r0
    140e:	1f 90       	pop	r1
    1410:	18 95       	reti

00001412 <main>:

int main(void)
{
	PORTC_DIRSET = (1 << MOSI_PIN) | (1 << SS_PIN) | (1 << SCK_PIN) | (1 << RS_PIN); //Set all pins used for communication to output
    1412:	88 eb       	ldi	r24, 0xB8	; 184
    1414:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	clk_set_32MHz();
    1418:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z13clk_set_32MHzv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    141c:	2f ef       	ldi	r18, 0xFF	; 255
    141e:	85 ed       	ldi	r24, 0xD5	; 213
    1420:	96 e0       	ldi	r25, 0x06	; 6
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	80 40       	sbci	r24, 0x00	; 0
    1426:	90 40       	sbci	r25, 0x00	; 0
    1428:	e1 f7       	brne	.-8      	; 0x1422 <main+0x10>
    142a:	00 c0       	rjmp	.+0      	; 0x142c <main+0x1a>
    142c:	00 00       	nop
	_delay_ms(70);
	setup_PWM();
    142e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_Z9setup_PWMv>
	update_RAM_EEPROM();
    1432:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z17update_RAM_EEPROMv>
    setup_SPI();
    1436:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z9setup_SPIv>
    143a:	2f ef       	ldi	r18, 0xFF	; 255
    143c:	83 ec       	ldi	r24, 0xC3	; 195
    143e:	99 e0       	ldi	r25, 0x09	; 9
    1440:	21 50       	subi	r18, 0x01	; 1
    1442:	80 40       	sbci	r24, 0x00	; 0
    1444:	90 40       	sbci	r25, 0x00	; 0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <main+0x2e>
    1448:	00 c0       	rjmp	.+0      	; 0x144a <main+0x38>
    144a:	00 00       	nop
    _delay_ms(100);
    setup_disp();
    144c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z10setup_dispv>
	setup_btn();
    1450:	0e 94 bc 01 	call	0x378	; 0x378 <_Z9setup_btnv>
	QDEC_INIT();
    1454:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9QDEC_INITv>
	setup_blink();
    1458:	0e 94 39 01 	call	0x272	; 0x272 <_Z11setup_blinkv>
	DMX_init();
    145c:	0e 94 2d 02 	call	0x45a	; 0x45a <_Z8DMX_initv>
	updateDisp();
    1460:	0e 94 89 02 	call	0x512	; 0x512 <_Z10updateDispv>
	setup_int();
    1464:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z9setup_intv>
		if(editMode){ //If the display is in edit mode update the display
			if(EncoderMode == BRIGHTSEL){
				updateBrightness();
			}
			updateDisp();
			lt = true;
    1468:	c1 e0       	ldi	r28, 0x01	; 1
	DMX_init();
	updateDisp();
	setup_int();
    while (1) 
    {
		if(editMode){ //If the display is in edit mode update the display
    146a:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
    146e:	88 23       	and	r24, r24
    1470:	59 f0       	breq	.+22     	; 0x1488 <main+0x76>
			if(EncoderMode == BRIGHTSEL){
    1472:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	11 f4       	brne	.+4      	; 0x147e <main+0x6c>
				updateBrightness();
    147a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z16updateBrightnessv>
			}
			updateDisp();
    147e:	0e 94 89 02 	call	0x512	; 0x512 <_Z10updateDispv>
			lt = true;
    1482:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <main+0x86>
		}
		else{ 
			if (lt) //If lt is altered by another factor update the display as well
    1488:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <lt>
    148c:	88 23       	and	r24, r24
    148e:	21 f0       	breq	.+8      	; 0x1498 <main+0x86>
			{
				updateDisp();
    1490:	0e 94 89 02 	call	0x512	; 0x512 <_Z10updateDispv>
				lt = false;
    1494:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <lt>
    1498:	2f ef       	ldi	r18, 0xFF	; 255
    149a:	83 ef       	ldi	r24, 0xF3	; 243
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	21 50       	subi	r18, 0x01	; 1
    14a0:	80 40       	sbci	r24, 0x00	; 0
    14a2:	90 40       	sbci	r25, 0x00	; 0
    14a4:	e1 f7       	brne	.-8      	; 0x149e <main+0x8c>
    14a6:	00 c0       	rjmp	.+0      	; 0x14a8 <main+0x96>
    14a8:	00 00       	nop
    14aa:	df cf       	rjmp	.-66     	; 0x146a <main+0x58>

000014ac <__divsf3>:
    14ac:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__divsf3x>
    14b0:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__fp_round>
    14b4:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscB>
    14b8:	58 f0       	brcs	.+22     	; 0x14d0 <__divsf3+0x24>
    14ba:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fp_pscA>
    14be:	40 f0       	brcs	.+16     	; 0x14d0 <__divsf3+0x24>
    14c0:	29 f4       	brne	.+10     	; 0x14cc <__divsf3+0x20>
    14c2:	5f 3f       	cpi	r21, 0xFF	; 255
    14c4:	29 f0       	breq	.+10     	; 0x14d0 <__divsf3+0x24>
    14c6:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_inf>
    14ca:	51 11       	cpse	r21, r1
    14cc:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__fp_szero>
    14d0:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_nan>

000014d4 <__divsf3x>:
    14d4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__fp_split3>
    14d8:	68 f3       	brcs	.-38     	; 0x14b4 <__divsf3+0x8>

000014da <__divsf3_pse>:
    14da:	99 23       	and	r25, r25
    14dc:	b1 f3       	breq	.-20     	; 0x14ca <__divsf3+0x1e>
    14de:	55 23       	and	r21, r21
    14e0:	91 f3       	breq	.-28     	; 0x14c6 <__divsf3+0x1a>
    14e2:	95 1b       	sub	r25, r21
    14e4:	55 0b       	sbc	r21, r21
    14e6:	bb 27       	eor	r27, r27
    14e8:	aa 27       	eor	r26, r26
    14ea:	62 17       	cp	r22, r18
    14ec:	73 07       	cpc	r23, r19
    14ee:	84 07       	cpc	r24, r20
    14f0:	38 f0       	brcs	.+14     	; 0x1500 <__divsf3_pse+0x26>
    14f2:	9f 5f       	subi	r25, 0xFF	; 255
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	44 1f       	adc	r20, r20
    14fc:	aa 1f       	adc	r26, r26
    14fe:	a9 f3       	breq	.-22     	; 0x14ea <__divsf3_pse+0x10>
    1500:	35 d0       	rcall	.+106    	; 0x156c <__divsf3_pse+0x92>
    1502:	0e 2e       	mov	r0, r30
    1504:	3a f0       	brmi	.+14     	; 0x1514 <__divsf3_pse+0x3a>
    1506:	e0 e8       	ldi	r30, 0x80	; 128
    1508:	32 d0       	rcall	.+100    	; 0x156e <__divsf3_pse+0x94>
    150a:	91 50       	subi	r25, 0x01	; 1
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	e6 95       	lsr	r30
    1510:	00 1c       	adc	r0, r0
    1512:	ca f7       	brpl	.-14     	; 0x1506 <__divsf3_pse+0x2c>
    1514:	2b d0       	rcall	.+86     	; 0x156c <__divsf3_pse+0x92>
    1516:	fe 2f       	mov	r31, r30
    1518:	29 d0       	rcall	.+82     	; 0x156c <__divsf3_pse+0x92>
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	bb 1f       	adc	r27, r27
    1522:	26 17       	cp	r18, r22
    1524:	37 07       	cpc	r19, r23
    1526:	48 07       	cpc	r20, r24
    1528:	ab 07       	cpc	r26, r27
    152a:	b0 e8       	ldi	r27, 0x80	; 128
    152c:	09 f0       	breq	.+2      	; 0x1530 <__divsf3_pse+0x56>
    152e:	bb 0b       	sbc	r27, r27
    1530:	80 2d       	mov	r24, r0
    1532:	bf 01       	movw	r22, r30
    1534:	ff 27       	eor	r31, r31
    1536:	93 58       	subi	r25, 0x83	; 131
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	3a f0       	brmi	.+14     	; 0x154a <__divsf3_pse+0x70>
    153c:	9e 3f       	cpi	r25, 0xFE	; 254
    153e:	51 05       	cpc	r21, r1
    1540:	78 f0       	brcs	.+30     	; 0x1560 <__divsf3_pse+0x86>
    1542:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_inf>
    1546:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__fp_szero>
    154a:	5f 3f       	cpi	r21, 0xFF	; 255
    154c:	e4 f3       	brlt	.-8      	; 0x1546 <__divsf3_pse+0x6c>
    154e:	98 3e       	cpi	r25, 0xE8	; 232
    1550:	d4 f3       	brlt	.-12     	; 0x1546 <__divsf3_pse+0x6c>
    1552:	86 95       	lsr	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f7 95       	ror	r31
    155c:	9f 5f       	subi	r25, 0xFF	; 255
    155e:	c9 f7       	brne	.-14     	; 0x1552 <__divsf3_pse+0x78>
    1560:	88 0f       	add	r24, r24
    1562:	91 1d       	adc	r25, r1
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	97 f9       	bld	r25, 7
    156a:	08 95       	ret
    156c:	e1 e0       	ldi	r30, 0x01	; 1
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	bb 1f       	adc	r27, r27
    1576:	62 17       	cp	r22, r18
    1578:	73 07       	cpc	r23, r19
    157a:	84 07       	cpc	r24, r20
    157c:	ba 07       	cpc	r27, r26
    157e:	20 f0       	brcs	.+8      	; 0x1588 <__divsf3_pse+0xae>
    1580:	62 1b       	sub	r22, r18
    1582:	73 0b       	sbc	r23, r19
    1584:	84 0b       	sbc	r24, r20
    1586:	ba 0b       	sbc	r27, r26
    1588:	ee 1f       	adc	r30, r30
    158a:	88 f7       	brcc	.-30     	; 0x156e <__divsf3_pse+0x94>
    158c:	e0 95       	com	r30
    158e:	08 95       	ret

00001590 <__fixunssfsi>:
    1590:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fp_splitA>
    1594:	88 f0       	brcs	.+34     	; 0x15b8 <__fixunssfsi+0x28>
    1596:	9f 57       	subi	r25, 0x7F	; 127
    1598:	98 f0       	brcs	.+38     	; 0x15c0 <__fixunssfsi+0x30>
    159a:	b9 2f       	mov	r27, r25
    159c:	99 27       	eor	r25, r25
    159e:	b7 51       	subi	r27, 0x17	; 23
    15a0:	b0 f0       	brcs	.+44     	; 0x15ce <__fixunssfsi+0x3e>
    15a2:	e1 f0       	breq	.+56     	; 0x15dc <__fixunssfsi+0x4c>
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	1a f0       	brmi	.+6      	; 0x15b4 <__fixunssfsi+0x24>
    15ae:	ba 95       	dec	r27
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__fixunssfsi+0x14>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <__fixunssfsi+0x4c>
    15b4:	b1 30       	cpi	r27, 0x01	; 1
    15b6:	91 f0       	breq	.+36     	; 0x15dc <__fixunssfsi+0x4c>
    15b8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fp_zero>
    15bc:	b1 e0       	ldi	r27, 0x01	; 1
    15be:	08 95       	ret
    15c0:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__fp_zero>
    15c4:	67 2f       	mov	r22, r23
    15c6:	78 2f       	mov	r23, r24
    15c8:	88 27       	eor	r24, r24
    15ca:	b8 5f       	subi	r27, 0xF8	; 248
    15cc:	39 f0       	breq	.+14     	; 0x15dc <__fixunssfsi+0x4c>
    15ce:	b9 3f       	cpi	r27, 0xF9	; 249
    15d0:	cc f3       	brlt	.-14     	; 0x15c4 <__fixunssfsi+0x34>
    15d2:	86 95       	lsr	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	b3 95       	inc	r27
    15da:	d9 f7       	brne	.-10     	; 0x15d2 <__fixunssfsi+0x42>
    15dc:	3e f4       	brtc	.+14     	; 0x15ec <__fixunssfsi+0x5c>
    15de:	90 95       	com	r25
    15e0:	80 95       	com	r24
    15e2:	70 95       	com	r23
    15e4:	61 95       	neg	r22
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	08 95       	ret

000015ee <__floatunsisf>:
    15ee:	e8 94       	clt
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <__floatsisf+0x12>

000015f2 <__floatsisf>:
    15f2:	97 fb       	bst	r25, 7
    15f4:	3e f4       	brtc	.+14     	; 0x1604 <__floatsisf+0x12>
    15f6:	90 95       	com	r25
    15f8:	80 95       	com	r24
    15fa:	70 95       	com	r23
    15fc:	61 95       	neg	r22
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	8f 4f       	sbci	r24, 0xFF	; 255
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	99 23       	and	r25, r25
    1606:	a9 f0       	breq	.+42     	; 0x1632 <__floatsisf+0x40>
    1608:	f9 2f       	mov	r31, r25
    160a:	96 e9       	ldi	r25, 0x96	; 150
    160c:	bb 27       	eor	r27, r27
    160e:	93 95       	inc	r25
    1610:	f6 95       	lsr	r31
    1612:	87 95       	ror	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	b7 95       	ror	r27
    161a:	f1 11       	cpse	r31, r1
    161c:	f8 cf       	rjmp	.-16     	; 0x160e <__floatsisf+0x1c>
    161e:	fa f4       	brpl	.+62     	; 0x165e <__floatsisf+0x6c>
    1620:	bb 0f       	add	r27, r27
    1622:	11 f4       	brne	.+4      	; 0x1628 <__floatsisf+0x36>
    1624:	60 ff       	sbrs	r22, 0
    1626:	1b c0       	rjmp	.+54     	; 0x165e <__floatsisf+0x6c>
    1628:	6f 5f       	subi	r22, 0xFF	; 255
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	8f 4f       	sbci	r24, 0xFF	; 255
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	16 c0       	rjmp	.+44     	; 0x165e <__floatsisf+0x6c>
    1632:	88 23       	and	r24, r24
    1634:	11 f0       	breq	.+4      	; 0x163a <__floatsisf+0x48>
    1636:	96 e9       	ldi	r25, 0x96	; 150
    1638:	11 c0       	rjmp	.+34     	; 0x165c <__floatsisf+0x6a>
    163a:	77 23       	and	r23, r23
    163c:	21 f0       	breq	.+8      	; 0x1646 <__floatsisf+0x54>
    163e:	9e e8       	ldi	r25, 0x8E	; 142
    1640:	87 2f       	mov	r24, r23
    1642:	76 2f       	mov	r23, r22
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <__floatsisf+0x5e>
    1646:	66 23       	and	r22, r22
    1648:	71 f0       	breq	.+28     	; 0x1666 <__floatsisf+0x74>
    164a:	96 e8       	ldi	r25, 0x86	; 134
    164c:	86 2f       	mov	r24, r22
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	2a f0       	brmi	.+10     	; 0x165e <__floatsisf+0x6c>
    1654:	9a 95       	dec	r25
    1656:	66 0f       	add	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	da f7       	brpl	.-10     	; 0x1654 <__floatsisf+0x62>
    165e:	88 0f       	add	r24, r24
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	97 f9       	bld	r25, 7
    1666:	08 95       	ret

00001668 <__fp_inf>:
    1668:	97 f9       	bld	r25, 7
    166a:	9f 67       	ori	r25, 0x7F	; 127
    166c:	80 e8       	ldi	r24, 0x80	; 128
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	08 95       	ret

00001674 <__fp_nan>:
    1674:	9f ef       	ldi	r25, 0xFF	; 255
    1676:	80 ec       	ldi	r24, 0xC0	; 192
    1678:	08 95       	ret

0000167a <__fp_pscA>:
    167a:	00 24       	eor	r0, r0
    167c:	0a 94       	dec	r0
    167e:	16 16       	cp	r1, r22
    1680:	17 06       	cpc	r1, r23
    1682:	18 06       	cpc	r1, r24
    1684:	09 06       	cpc	r0, r25
    1686:	08 95       	ret

00001688 <__fp_pscB>:
    1688:	00 24       	eor	r0, r0
    168a:	0a 94       	dec	r0
    168c:	12 16       	cp	r1, r18
    168e:	13 06       	cpc	r1, r19
    1690:	14 06       	cpc	r1, r20
    1692:	05 06       	cpc	r0, r21
    1694:	08 95       	ret

00001696 <__fp_round>:
    1696:	09 2e       	mov	r0, r25
    1698:	03 94       	inc	r0
    169a:	00 0c       	add	r0, r0
    169c:	11 f4       	brne	.+4      	; 0x16a2 <__fp_round+0xc>
    169e:	88 23       	and	r24, r24
    16a0:	52 f0       	brmi	.+20     	; 0x16b6 <__fp_round+0x20>
    16a2:	bb 0f       	add	r27, r27
    16a4:	40 f4       	brcc	.+16     	; 0x16b6 <__fp_round+0x20>
    16a6:	bf 2b       	or	r27, r31
    16a8:	11 f4       	brne	.+4      	; 0x16ae <__fp_round+0x18>
    16aa:	60 ff       	sbrs	r22, 0
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <__fp_round+0x20>
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	8f 4f       	sbci	r24, 0xFF	; 255
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	08 95       	ret

000016b8 <__fp_split3>:
    16b8:	57 fd       	sbrc	r21, 7
    16ba:	90 58       	subi	r25, 0x80	; 128
    16bc:	44 0f       	add	r20, r20
    16be:	55 1f       	adc	r21, r21
    16c0:	59 f0       	breq	.+22     	; 0x16d8 <__fp_splitA+0x10>
    16c2:	5f 3f       	cpi	r21, 0xFF	; 255
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <__fp_splitA+0x1a>
    16c6:	47 95       	ror	r20

000016c8 <__fp_splitA>:
    16c8:	88 0f       	add	r24, r24
    16ca:	97 fb       	bst	r25, 7
    16cc:	99 1f       	adc	r25, r25
    16ce:	61 f0       	breq	.+24     	; 0x16e8 <__fp_splitA+0x20>
    16d0:	9f 3f       	cpi	r25, 0xFF	; 255
    16d2:	79 f0       	breq	.+30     	; 0x16f2 <__fp_splitA+0x2a>
    16d4:	87 95       	ror	r24
    16d6:	08 95       	ret
    16d8:	12 16       	cp	r1, r18
    16da:	13 06       	cpc	r1, r19
    16dc:	14 06       	cpc	r1, r20
    16de:	55 1f       	adc	r21, r21
    16e0:	f2 cf       	rjmp	.-28     	; 0x16c6 <__fp_split3+0xe>
    16e2:	46 95       	lsr	r20
    16e4:	f1 df       	rcall	.-30     	; 0x16c8 <__fp_splitA>
    16e6:	08 c0       	rjmp	.+16     	; 0x16f8 <__fp_splitA+0x30>
    16e8:	16 16       	cp	r1, r22
    16ea:	17 06       	cpc	r1, r23
    16ec:	18 06       	cpc	r1, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	f1 cf       	rjmp	.-30     	; 0x16d4 <__fp_splitA+0xc>
    16f2:	86 95       	lsr	r24
    16f4:	71 05       	cpc	r23, r1
    16f6:	61 05       	cpc	r22, r1
    16f8:	08 94       	sec
    16fa:	08 95       	ret

000016fc <__fp_zero>:
    16fc:	e8 94       	clt

000016fe <__fp_szero>:
    16fe:	bb 27       	eor	r27, r27
    1700:	66 27       	eor	r22, r22
    1702:	77 27       	eor	r23, r23
    1704:	cb 01       	movw	r24, r22
    1706:	97 f9       	bld	r25, 7
    1708:	08 95       	ret

0000170a <__gesf2>:
    170a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_cmp>
    170e:	08 f4       	brcc	.+2      	; 0x1712 <__gesf2+0x8>
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	08 95       	ret

00001714 <__mulsf3>:
    1714:	0e 94 9d 0b 	call	0x173a	; 0x173a <__mulsf3x>
    1718:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__fp_round>
    171c:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fp_pscA>
    1720:	38 f0       	brcs	.+14     	; 0x1730 <__mulsf3+0x1c>
    1722:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscB>
    1726:	20 f0       	brcs	.+8      	; 0x1730 <__mulsf3+0x1c>
    1728:	95 23       	and	r25, r21
    172a:	11 f0       	breq	.+4      	; 0x1730 <__mulsf3+0x1c>
    172c:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_inf>
    1730:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_nan>
    1734:	11 24       	eor	r1, r1
    1736:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__fp_szero>

0000173a <__mulsf3x>:
    173a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__fp_split3>
    173e:	70 f3       	brcs	.-36     	; 0x171c <__mulsf3+0x8>

00001740 <__mulsf3_pse>:
    1740:	95 9f       	mul	r25, r21
    1742:	c1 f3       	breq	.-16     	; 0x1734 <__mulsf3+0x20>
    1744:	95 0f       	add	r25, r21
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	55 1f       	adc	r21, r21
    174a:	62 9f       	mul	r22, r18
    174c:	f0 01       	movw	r30, r0
    174e:	72 9f       	mul	r23, r18
    1750:	bb 27       	eor	r27, r27
    1752:	f0 0d       	add	r31, r0
    1754:	b1 1d       	adc	r27, r1
    1756:	63 9f       	mul	r22, r19
    1758:	aa 27       	eor	r26, r26
    175a:	f0 0d       	add	r31, r0
    175c:	b1 1d       	adc	r27, r1
    175e:	aa 1f       	adc	r26, r26
    1760:	64 9f       	mul	r22, r20
    1762:	66 27       	eor	r22, r22
    1764:	b0 0d       	add	r27, r0
    1766:	a1 1d       	adc	r26, r1
    1768:	66 1f       	adc	r22, r22
    176a:	82 9f       	mul	r24, r18
    176c:	22 27       	eor	r18, r18
    176e:	b0 0d       	add	r27, r0
    1770:	a1 1d       	adc	r26, r1
    1772:	62 1f       	adc	r22, r18
    1774:	73 9f       	mul	r23, r19
    1776:	b0 0d       	add	r27, r0
    1778:	a1 1d       	adc	r26, r1
    177a:	62 1f       	adc	r22, r18
    177c:	83 9f       	mul	r24, r19
    177e:	a0 0d       	add	r26, r0
    1780:	61 1d       	adc	r22, r1
    1782:	22 1f       	adc	r18, r18
    1784:	74 9f       	mul	r23, r20
    1786:	33 27       	eor	r19, r19
    1788:	a0 0d       	add	r26, r0
    178a:	61 1d       	adc	r22, r1
    178c:	23 1f       	adc	r18, r19
    178e:	84 9f       	mul	r24, r20
    1790:	60 0d       	add	r22, r0
    1792:	21 1d       	adc	r18, r1
    1794:	82 2f       	mov	r24, r18
    1796:	76 2f       	mov	r23, r22
    1798:	6a 2f       	mov	r22, r26
    179a:	11 24       	eor	r1, r1
    179c:	9f 57       	subi	r25, 0x7F	; 127
    179e:	50 40       	sbci	r21, 0x00	; 0
    17a0:	9a f0       	brmi	.+38     	; 0x17c8 <__mulsf3_pse+0x88>
    17a2:	f1 f0       	breq	.+60     	; 0x17e0 <__mulsf3_pse+0xa0>
    17a4:	88 23       	and	r24, r24
    17a6:	4a f0       	brmi	.+18     	; 0x17ba <__mulsf3_pse+0x7a>
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	bb 1f       	adc	r27, r27
    17ae:	66 1f       	adc	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	88 1f       	adc	r24, r24
    17b4:	91 50       	subi	r25, 0x01	; 1
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	a9 f7       	brne	.-22     	; 0x17a4 <__mulsf3_pse+0x64>
    17ba:	9e 3f       	cpi	r25, 0xFE	; 254
    17bc:	51 05       	cpc	r21, r1
    17be:	80 f0       	brcs	.+32     	; 0x17e0 <__mulsf3_pse+0xa0>
    17c0:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_inf>
    17c4:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__fp_szero>
    17c8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ca:	e4 f3       	brlt	.-8      	; 0x17c4 <__mulsf3_pse+0x84>
    17cc:	98 3e       	cpi	r25, 0xE8	; 232
    17ce:	d4 f3       	brlt	.-12     	; 0x17c4 <__mulsf3_pse+0x84>
    17d0:	86 95       	lsr	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	b7 95       	ror	r27
    17d8:	f7 95       	ror	r31
    17da:	e7 95       	ror	r30
    17dc:	9f 5f       	subi	r25, 0xFF	; 255
    17de:	c1 f7       	brne	.-16     	; 0x17d0 <__mulsf3_pse+0x90>
    17e0:	fe 2b       	or	r31, r30
    17e2:	88 0f       	add	r24, r24
    17e4:	91 1d       	adc	r25, r1
    17e6:	96 95       	lsr	r25
    17e8:	87 95       	ror	r24
    17ea:	97 f9       	bld	r25, 7
    17ec:	08 95       	ret

000017ee <__fp_cmp>:
    17ee:	99 0f       	add	r25, r25
    17f0:	00 08       	sbc	r0, r0
    17f2:	55 0f       	add	r21, r21
    17f4:	aa 0b       	sbc	r26, r26
    17f6:	e0 e8       	ldi	r30, 0x80	; 128
    17f8:	fe ef       	ldi	r31, 0xFE	; 254
    17fa:	16 16       	cp	r1, r22
    17fc:	17 06       	cpc	r1, r23
    17fe:	e8 07       	cpc	r30, r24
    1800:	f9 07       	cpc	r31, r25
    1802:	c0 f0       	brcs	.+48     	; 0x1834 <__fp_cmp+0x46>
    1804:	12 16       	cp	r1, r18
    1806:	13 06       	cpc	r1, r19
    1808:	e4 07       	cpc	r30, r20
    180a:	f5 07       	cpc	r31, r21
    180c:	98 f0       	brcs	.+38     	; 0x1834 <__fp_cmp+0x46>
    180e:	62 1b       	sub	r22, r18
    1810:	73 0b       	sbc	r23, r19
    1812:	84 0b       	sbc	r24, r20
    1814:	95 0b       	sbc	r25, r21
    1816:	39 f4       	brne	.+14     	; 0x1826 <__fp_cmp+0x38>
    1818:	0a 26       	eor	r0, r26
    181a:	61 f0       	breq	.+24     	; 0x1834 <__fp_cmp+0x46>
    181c:	23 2b       	or	r18, r19
    181e:	24 2b       	or	r18, r20
    1820:	25 2b       	or	r18, r21
    1822:	21 f4       	brne	.+8      	; 0x182c <__fp_cmp+0x3e>
    1824:	08 95       	ret
    1826:	0a 26       	eor	r0, r26
    1828:	09 f4       	brne	.+2      	; 0x182c <__fp_cmp+0x3e>
    182a:	a1 40       	sbci	r26, 0x01	; 1
    182c:	a6 95       	lsr	r26
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	81 1d       	adc	r24, r1
    1832:	81 1d       	adc	r24, r1
    1834:	08 95       	ret

00001836 <__muldi3>:
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	1f 93       	push	r17
    183c:	0f 93       	push	r16
    183e:	9a 9d       	mul	r25, r10
    1840:	f0 2d       	mov	r31, r0
    1842:	21 9f       	mul	r18, r17
    1844:	f0 0d       	add	r31, r0
    1846:	8b 9d       	mul	r24, r11
    1848:	f0 0d       	add	r31, r0
    184a:	8a 9d       	mul	r24, r10
    184c:	e0 2d       	mov	r30, r0
    184e:	f1 0d       	add	r31, r1
    1850:	03 9f       	mul	r16, r19
    1852:	f0 0d       	add	r31, r0
    1854:	02 9f       	mul	r16, r18
    1856:	e0 0d       	add	r30, r0
    1858:	f1 1d       	adc	r31, r1
    185a:	4e 9d       	mul	r20, r14
    185c:	e0 0d       	add	r30, r0
    185e:	f1 1d       	adc	r31, r1
    1860:	5e 9d       	mul	r21, r14
    1862:	f0 0d       	add	r31, r0
    1864:	4f 9d       	mul	r20, r15
    1866:	f0 0d       	add	r31, r0
    1868:	7f 93       	push	r23
    186a:	6f 93       	push	r22
    186c:	bf 92       	push	r11
    186e:	af 92       	push	r10
    1870:	5f 93       	push	r21
    1872:	4f 93       	push	r20
    1874:	d5 01       	movw	r26, r10
    1876:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__umulhisi3>
    187a:	8b 01       	movw	r16, r22
    187c:	ac 01       	movw	r20, r24
    187e:	d7 01       	movw	r26, r14
    1880:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__umulhisi3>
    1884:	eb 01       	movw	r28, r22
    1886:	e8 0f       	add	r30, r24
    1888:	f9 1f       	adc	r31, r25
    188a:	d6 01       	movw	r26, r12
    188c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__muldi3_6>
    1890:	2f 91       	pop	r18
    1892:	3f 91       	pop	r19
    1894:	d6 01       	movw	r26, r12
    1896:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__umulhisi3>
    189a:	c6 0f       	add	r28, r22
    189c:	d7 1f       	adc	r29, r23
    189e:	e8 1f       	adc	r30, r24
    18a0:	f9 1f       	adc	r31, r25
    18a2:	af 91       	pop	r26
    18a4:	bf 91       	pop	r27
    18a6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__muldi3_6>
    18aa:	2f 91       	pop	r18
    18ac:	3f 91       	pop	r19
    18ae:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__umulhisi3>
    18b2:	c6 0f       	add	r28, r22
    18b4:	d7 1f       	adc	r29, r23
    18b6:	e8 1f       	adc	r30, r24
    18b8:	f9 1f       	adc	r31, r25
    18ba:	d6 01       	movw	r26, r12
    18bc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__umulhisi3>
    18c0:	e6 0f       	add	r30, r22
    18c2:	f7 1f       	adc	r31, r23
    18c4:	98 01       	movw	r18, r16
    18c6:	be 01       	movw	r22, r28
    18c8:	cf 01       	movw	r24, r30
    18ca:	11 24       	eor	r1, r1
    18cc:	0f 91       	pop	r16
    18ce:	1f 91       	pop	r17
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <__muldi3_6>:
    18d6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__umulhisi3>
    18da:	46 0f       	add	r20, r22
    18dc:	57 1f       	adc	r21, r23
    18de:	c8 1f       	adc	r28, r24
    18e0:	d9 1f       	adc	r29, r25
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <__muldi3_6+0x10>
    18e4:	31 96       	adiw	r30, 0x01	; 1
    18e6:	08 95       	ret

000018e8 <__ashldi3>:
    18e8:	0f 93       	push	r16
    18ea:	08 30       	cpi	r16, 0x08	; 8
    18ec:	90 f0       	brcs	.+36     	; 0x1912 <__ashldi3+0x2a>
    18ee:	98 2f       	mov	r25, r24
    18f0:	87 2f       	mov	r24, r23
    18f2:	76 2f       	mov	r23, r22
    18f4:	65 2f       	mov	r22, r21
    18f6:	54 2f       	mov	r21, r20
    18f8:	43 2f       	mov	r20, r19
    18fa:	32 2f       	mov	r19, r18
    18fc:	22 27       	eor	r18, r18
    18fe:	08 50       	subi	r16, 0x08	; 8
    1900:	f4 cf       	rjmp	.-24     	; 0x18ea <__ashldi3+0x2>
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	44 1f       	adc	r20, r20
    1908:	55 1f       	adc	r21, r21
    190a:	66 1f       	adc	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 95       	dec	r16
    1914:	b2 f7       	brpl	.-20     	; 0x1902 <__ashldi3+0x1a>
    1916:	0f 91       	pop	r16
    1918:	08 95       	ret

0000191a <__adddi3>:
    191a:	2a 0d       	add	r18, r10
    191c:	3b 1d       	adc	r19, r11
    191e:	4c 1d       	adc	r20, r12
    1920:	5d 1d       	adc	r21, r13
    1922:	6e 1d       	adc	r22, r14
    1924:	7f 1d       	adc	r23, r15
    1926:	80 1f       	adc	r24, r16
    1928:	91 1f       	adc	r25, r17
    192a:	08 95       	ret

0000192c <__subdi3>:
    192c:	2a 19       	sub	r18, r10
    192e:	3b 09       	sbc	r19, r11
    1930:	4c 09       	sbc	r20, r12
    1932:	5d 09       	sbc	r21, r13
    1934:	6e 09       	sbc	r22, r14
    1936:	7f 09       	sbc	r23, r15
    1938:	80 0b       	sbc	r24, r16
    193a:	91 0b       	sbc	r25, r17
    193c:	08 95       	ret

0000193e <__cmpdi2>:
    193e:	2a 15       	cp	r18, r10
    1940:	3b 05       	cpc	r19, r11
    1942:	4c 05       	cpc	r20, r12
    1944:	5d 05       	cpc	r21, r13
    1946:	6e 05       	cpc	r22, r14
    1948:	7f 05       	cpc	r23, r15
    194a:	80 07       	cpc	r24, r16
    194c:	91 07       	cpc	r25, r17
    194e:	08 95       	ret

00001950 <__cmpdi2_s8>:
    1950:	00 24       	eor	r0, r0
    1952:	a7 fd       	sbrc	r26, 7
    1954:	00 94       	com	r0
    1956:	2a 17       	cp	r18, r26
    1958:	30 05       	cpc	r19, r0
    195a:	40 05       	cpc	r20, r0
    195c:	50 05       	cpc	r21, r0
    195e:	60 05       	cpc	r22, r0
    1960:	70 05       	cpc	r23, r0
    1962:	80 05       	cpc	r24, r0
    1964:	90 05       	cpc	r25, r0
    1966:	08 95       	ret

00001968 <__umulhisi3>:
    1968:	a2 9f       	mul	r26, r18
    196a:	b0 01       	movw	r22, r0
    196c:	b3 9f       	mul	r27, r19
    196e:	c0 01       	movw	r24, r0
    1970:	a3 9f       	mul	r26, r19
    1972:	70 0d       	add	r23, r0
    1974:	81 1d       	adc	r24, r1
    1976:	11 24       	eor	r1, r1
    1978:	91 1d       	adc	r25, r1
    197a:	b2 9f       	mul	r27, r18
    197c:	70 0d       	add	r23, r0
    197e:	81 1d       	adc	r24, r1
    1980:	11 24       	eor	r1, r1
    1982:	91 1d       	adc	r25, r1
    1984:	08 95       	ret

00001986 <eeprom_read_byte>:
    1986:	03 d0       	rcall	.+6      	; 0x198e <eeprom_mapen>
    1988:	80 81       	ld	r24, Z
    198a:	99 27       	eor	r25, r25
    198c:	08 95       	ret

0000198e <eeprom_mapen>:
    198e:	e0 ec       	ldi	r30, 0xC0	; 192
    1990:	f1 e0       	ldi	r31, 0x01	; 1
    1992:	37 85       	ldd	r19, Z+15	; 0x0f
    1994:	37 fd       	sbrc	r19, 7
    1996:	fd cf       	rjmp	.-6      	; 0x1992 <eeprom_mapen+0x4>
    1998:	34 85       	ldd	r19, Z+12	; 0x0c
    199a:	38 60       	ori	r19, 0x08	; 8
    199c:	34 87       	std	Z+12, r19	; 0x0c
    199e:	fc 01       	movw	r30, r24
    19a0:	e0 50       	subi	r30, 0x00	; 0
    19a2:	f0 4f       	sbci	r31, 0xF0	; 240
    19a4:	08 95       	ret

000019a6 <eeprom_read_word>:
    19a6:	0e 94 c7 0c 	call	0x198e	; 0x198e <eeprom_mapen>
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	08 95       	ret

000019b0 <eeprom_write_byte>:
    19b0:	26 2f       	mov	r18, r22

000019b2 <eeprom_write_r18>:
    19b2:	e0 ec       	ldi	r30, 0xC0	; 192
    19b4:	f1 e0       	ldi	r31, 0x01	; 1
    19b6:	37 85       	ldd	r19, Z+15	; 0x0f
    19b8:	37 fd       	sbrc	r19, 7
    19ba:	fd cf       	rjmp	.-6      	; 0x19b6 <eeprom_write_r18+0x4>
    19bc:	34 85       	ldd	r19, Z+12	; 0x0c
    19be:	37 7f       	andi	r19, 0xF7	; 247
    19c0:	34 87       	std	Z+12, r19	; 0x0c
    19c2:	37 85       	ldd	r19, Z+15	; 0x0f
    19c4:	31 ff       	sbrs	r19, 1
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <eeprom_write_r18+0x28>
    19c8:	36 e3       	ldi	r19, 0x36	; 54
    19ca:	32 87       	std	Z+10, r19	; 0x0a
    19cc:	38 ed       	ldi	r19, 0xD8	; 216
    19ce:	34 bf       	out	0x34, r19	; 52
    19d0:	31 e0       	ldi	r19, 0x01	; 1
    19d2:	33 87       	std	Z+11, r19	; 0x0b
    19d4:	37 85       	ldd	r19, Z+15	; 0x0f
    19d6:	37 fd       	sbrc	r19, 7
    19d8:	fd cf       	rjmp	.-6      	; 0x19d4 <eeprom_write_r18+0x22>
    19da:	33 e3       	ldi	r19, 0x33	; 51
    19dc:	32 87       	std	Z+10, r19	; 0x0a
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	12 82       	std	Z+2, r1	; 0x02
    19e4:	24 83       	std	Z+4, r18	; 0x04
    19e6:	25 e3       	ldi	r18, 0x35	; 53
    19e8:	22 87       	std	Z+10, r18	; 0x0a
    19ea:	28 ed       	ldi	r18, 0xD8	; 216
    19ec:	31 e0       	ldi	r19, 0x01	; 1
    19ee:	24 bf       	out	0x34, r18	; 52
    19f0:	33 87       	std	Z+11, r19	; 0x0b
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	08 95       	ret

000019f6 <eeprom_write_word>:
    19f6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
    19fa:	27 2f       	mov	r18, r23
    19fc:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <eeprom_write_r18>

00001a00 <_exit>:
    1a00:	f8 94       	cli

00001a02 <__stop_program>:
    1a02:	ff cf       	rjmp	.-2      	; 0x1a02 <__stop_program>
