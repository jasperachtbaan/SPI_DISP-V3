
SPI_DISP V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  00001a50  00001ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007b  0080211c  0080211c  00001c00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000465d  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a91  00000000  00000000  00006455  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000146a  00000000  00000000  00008ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  0000a350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003950  00000000  00000000  0000a834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001799  00000000  00000000  0000e184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000f91d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_10>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_14>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_20>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_77>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_79>
     140:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_80>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__vector_88>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e0 e5       	ldi	r30, 0x50	; 80
     210:	fa e1       	ldi	r31, 0x1A	; 26
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ac 31       	cpi	r26, 0x1C	; 28
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	21 e2       	ldi	r18, 0x21	; 33
     220:	ac e1       	ldi	r26, 0x1C	; 28
     222:	b1 e2       	ldi	r27, 0x21	; 33
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a7 39       	cpi	r26, 0x97	; 151
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <main>
     232:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <_Z13clk_set_32MHzv>:
		return 1;
	}
	else{
		return result;
	}
}
     23a:	e0 e5       	ldi	r30, 0x50	; 80
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
     244:	e1 e5       	ldi	r30, 0x51	; 81
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	81 ff       	sbrs	r24, 1
     24c:	fd cf       	rjmp	.-6      	; 0x248 <_Z13clk_set_32MHzv+0xe>
     24e:	88 ed       	ldi	r24, 0xD8	; 216
     250:	84 bf       	out	0x34, r24	; 52
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     258:	08 95       	ret

0000025a <_Z11setup_blinkv>:
     25a:	e0 e5       	ldi	r30, 0x50	; 80
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	84 60       	ori	r24, 0x04	; 4
     262:	80 83       	st	Z, r24
     264:	e1 e5       	ldi	r30, 0x51	; 81
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	82 ff       	sbrs	r24, 2
     26c:	fd cf       	rjmp	.-6      	; 0x268 <_Z11setup_blinkv+0xe>
     26e:	85 e0       	ldi	r24, 0x05	; 5
     270:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     274:	e1 e0       	ldi	r30, 0x01	; 1
     276:	f4 e0       	ldi	r31, 0x04	; 4
     278:	80 81       	ld	r24, Z
     27a:	80 fd       	sbrc	r24, 0
     27c:	fd cf       	rjmp	.-6      	; 0x278 <_Z11setup_blinkv+0x1e>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     284:	e1 e0       	ldi	r30, 0x01	; 1
     286:	f4 e0       	ldi	r31, 0x04	; 4
     288:	80 81       	ld	r24, Z
     28a:	80 fd       	sbrc	r24, 0
     28c:	fd cf       	rjmp	.-6      	; 0x288 <_Z11setup_blinkv+0x2e>
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
     29c:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
     2a0:	e1 e0       	ldi	r30, 0x01	; 1
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	80 81       	ld	r24, Z
     2a6:	80 fd       	sbrc	r24, 0
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <_Z11setup_blinkv+0x4a>
     2aa:	08 95       	ret

000002ac <_Z9setup_SPIv>:
     2ac:	8e e5       	ldi	r24, 0x5E	; 94
     2ae:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     2b2:	80 e1       	ldi	r24, 0x10	; 16
     2b4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2b8:	08 95       	ret

000002ba <_Z10setup_dispv>:
     2ba:	88 eb       	ldi	r24, 0xB8	; 184
     2bc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     2c0:	80 e1       	ldi	r24, 0x10	; 16
     2c2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     2c6:	8c e0       	ldi	r24, 0x0C	; 12
     2c8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2cc:	e2 ec       	ldi	r30, 0xC2	; 194
     2ce:	f8 e0       	ldi	r31, 0x08	; 8
     2d0:	80 81       	ld	r24, Z
     2d2:	88 23       	and	r24, r24
     2d4:	ec f7       	brge	.-6      	; 0x2d0 <_Z10setup_dispv+0x16>
     2d6:	e2 ec       	ldi	r30, 0xC2	; 194
     2d8:	f8 e0       	ldi	r31, 0x08	; 8
     2da:	80 81       	ld	r24, Z
     2dc:	80 68       	ori	r24, 0x80	; 128
     2de:	80 83       	st	Z, r24
     2e0:	80 e1       	ldi	r24, 0x10	; 16
     2e2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2e6:	e7 ec       	ldi	r30, 0xC7	; 199
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <_Z10setup_dispv+0x30>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <_Z10setup_dispv+0x36>
     2f0:	00 00       	nop
     2f2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     2f6:	88 e3       	ldi	r24, 0x38	; 56
     2f8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2fc:	e2 ec       	ldi	r30, 0xC2	; 194
     2fe:	f8 e0       	ldi	r31, 0x08	; 8
     300:	80 81       	ld	r24, Z
     302:	88 23       	and	r24, r24
     304:	ec f7       	brge	.-6      	; 0x300 <_Z10setup_dispv+0x46>
     306:	e2 ec       	ldi	r30, 0xC2	; 194
     308:	f8 e0       	ldi	r31, 0x08	; 8
     30a:	80 81       	ld	r24, Z
     30c:	80 68       	ori	r24, 0x80	; 128
     30e:	80 83       	st	Z, r24
     310:	80 e1       	ldi	r24, 0x10	; 16
     312:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     316:	e7 ec       	ldi	r30, 0xC7	; 199
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <_Z10setup_dispv+0x60>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <_Z10setup_dispv+0x66>
     320:	00 00       	nop
     322:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     32c:	e2 ec       	ldi	r30, 0xC2	; 194
     32e:	f8 e0       	ldi	r31, 0x08	; 8
     330:	80 81       	ld	r24, Z
     332:	88 23       	and	r24, r24
     334:	ec f7       	brge	.-6      	; 0x330 <_Z10setup_dispv+0x76>
     336:	e2 ec       	ldi	r30, 0xC2	; 194
     338:	f8 e0       	ldi	r31, 0x08	; 8
     33a:	80 81       	ld	r24, Z
     33c:	80 68       	ori	r24, 0x80	; 128
     33e:	80 83       	st	Z, r24
     340:	80 e1       	ldi	r24, 0x10	; 16
     342:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     346:	87 ec       	ldi	r24, 0xC7	; 199
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <_Z10setup_dispv+0x90>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_Z10setup_dispv+0x96>
     350:	00 00       	nop
     352:	ef e9       	ldi	r30, 0x9F	; 159
     354:	f8 e2       	ldi	r31, 0x28	; 40
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <_Z10setup_dispv+0x9c>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <_Z10setup_dispv+0xa2>
     35c:	00 00       	nop
     35e:	08 95       	ret

00000360 <_Z9setup_btnv>:
     360:	87 e0       	ldi	r24, 0x07	; 7
     362:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
     366:	8b e8       	ldi	r24, 0x8B	; 139
     368:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <__TEXT_REGION_LENGTH__+0x700903>
     36c:	84 e8       	ldi	r24, 0x84	; 132
     36e:	9e e1       	ldi	r25, 0x1E	; 30
     370:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     374:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x700906>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     386:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     38a:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     38e:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
     392:	84 e0       	ldi	r24, 0x04	; 4
     394:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     398:	e2 e5       	ldi	r30, 0x52	; 82
     39a:	f6 e0       	ldi	r31, 0x06	; 6
     39c:	8b e1       	ldi	r24, 0x1B	; 27
     39e:	80 83       	st	Z, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	80 64       	ori	r24, 0x40	; 64
     3a4:	80 83       	st	Z, r24
     3a6:	82 e6       	ldi	r24, 0x62	; 98
     3a8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__TEXT_REGION_LENGTH__+0x700183>
     3ac:	08 95       	ret

000003ae <_Z9setup_intv>:
     3ae:	87 e0       	ldi	r24, 0x07	; 7
     3b0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     3b4:	78 94       	sei
     3b6:	08 95       	ret

000003b8 <_Z9setup_PWMv>:
     3b8:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     3bc:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3c6:	83 e1       	ldi	r24, 0x13	; 19
     3c8:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     3cc:	8e ef       	ldi	r24, 0xFE	; 254
     3ce:	9f ef       	ldi	r25, 0xFF	; 255
     3d0:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     3d4:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	89 ef       	ldi	r24, 0xF9	; 249
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <_Z9setup_PWMv+0x26>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <_Z9setup_PWMv+0x30>
     3e8:	00 00       	nop
     3ea:	e1 e8       	ldi	r30, 0x81	; 129
     3ec:	f6 e0       	ldi	r31, 0x06	; 6
     3ee:	80 81       	ld	r24, Z
     3f0:	81 60       	ori	r24, 0x01	; 1
     3f2:	80 83       	st	Z, r24
     3f4:	08 95       	ret

000003f6 <_Z9QDEC_INITv>:
     3f6:	80 e3       	ldi	r24, 0x30	; 48
     3f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     402:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__TEXT_REGION_LENGTH__+0x700675>
     406:	8c e6       	ldi	r24, 0x6C	; 108
     408:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
     40c:	8d e6       	ldi	r24, 0x6D	; 109
     40e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x700181>
     412:	89 e0       	ldi	r24, 0x09	; 9
     414:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__TEXT_REGION_LENGTH__+0x700188>
     418:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__TEXT_REGION_LENGTH__+0x700189>
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     422:	88 e6       	ldi	r24, 0x68	; 104
     424:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <__TEXT_REGION_LENGTH__+0x700803>
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     430:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     434:	8f e3       	ldi	r24, 0x3F	; 63
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
     43c:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
     440:	08 95       	ret

00000442 <_Z8DMX_initv>:
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
     448:	88 e5       	ldi	r24, 0x58	; 88
     44a:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     44e:	8a e6       	ldi	r24, 0x6A	; 106
     450:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
     454:	85 e0       	ldi	r24, 0x05	; 5
     456:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     45a:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
     45e:	8a e8       	ldi	r24, 0x8A	; 138
     460:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <__TEXT_REGION_LENGTH__+0x700843>
     464:	87 e5       	ldi	r24, 0x57	; 87
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
     46c:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
     470:	8b e0       	ldi	r24, 0x0B	; 11
     472:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
     476:	80 e8       	ldi	r24, 0x80	; 128
     478:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
     47c:	83 e9       	ldi	r24, 0x93	; 147
     47e:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
     482:	08 95       	ret

00000484 <_Z17update_EEPROM_RAMv>:
     484:	cf 93       	push	r28
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	09 f0       	breq	.+2      	; 0x492 <_Z17update_EEPROM_RAMv+0xe>
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	c6 2f       	mov	r28, r22
     494:	c1 95       	neg	r28
     496:	83 e1       	ldi	r24, 0x13	; 19
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <eeprom_read_word>
     49e:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <brightness>
     4a2:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <brightness+0x1>
     4a6:	82 17       	cp	r24, r18
     4a8:	93 07       	cpc	r25, r19
     4aa:	41 f0       	breq	.+16     	; 0x4bc <_Z17update_EEPROM_RAMv+0x38>
     4ac:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <brightness>
     4b0:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <brightness+0x1>
     4b4:	83 e1       	ldi	r24, 0x13	; 19
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <eeprom_write_word>
     4bc:	85 e1       	ldi	r24, 0x15	; 21
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <eeprom_read_word>
     4c4:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
     4c8:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
     4cc:	82 17       	cp	r24, r18
     4ce:	93 07       	cpc	r25, r19
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <_Z17update_EEPROM_RAMv+0x5e>
     4d2:	60 91 01 20 	lds	r22, 0x2001	; 0x802001 <DMXChan>
     4d6:	70 91 02 20 	lds	r23, 0x2002	; 0x802002 <DMXChan+0x1>
     4da:	85 e1       	ldi	r24, 0x15	; 21
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <eeprom_write_word>
     4e2:	80 e1       	ldi	r24, 0x10	; 16
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <eeprom_read_byte>
     4ea:	8c 17       	cp	r24, r28
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <_Z17update_EEPROM_RAMv+0x74>
     4ee:	6c 2f       	mov	r22, r28
     4f0:	80 e1       	ldi	r24, 0x10	; 16
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <eeprom_write_byte>
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_Z10updateDispv>:
inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

void updateDisp(){
     4fc:	4f 92       	push	r4
     4fe:	5f 92       	push	r5
     500:	6f 92       	push	r6
     502:	7f 92       	push	r7
     504:	8f 92       	push	r8
     506:	9f 92       	push	r9
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	a1 97       	sbiw	r28, 0x21	; 33
     522:	cd bf       	out	0x3d, r28	; 61
     524:	de bf       	out	0x3e, r29	; 62
     526:	8b e2       	ldi	r24, 0x2B	; 43
     528:	91 e2       	ldi	r25, 0x21	; 33
     52a:	4b e4       	ldi	r20, 0x4B	; 75
     52c:	51 e2       	ldi	r21, 0x21	; 33
     52e:	dc 01       	movw	r26, r24
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     530:	bc 01       	movw	r22, r24
     532:	60 95       	com	r22
     534:	70 95       	com	r23
			RTC_CNT = 0;
     536:	08 e0       	ldi	r16, 0x08	; 8
     538:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     53a:	3d 91       	ld	r19, X+
     53c:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     540:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     544:	ea 0f       	add	r30, r26
     546:	fb 1f       	adc	r31, r27
     548:	e6 0f       	add	r30, r22
     54a:	f7 1f       	adc	r31, r23
     54c:	20 81       	ld	r18, Z
     54e:	32 17       	cp	r19, r18
     550:	39 f0       	breq	.+14     	; 0x560 <_Z10updateDispv+0x64>
			RTC_CNT = 0;
     552:	f8 01       	movw	r30, r16
     554:	10 82       	st	Z, r1
     556:	11 82       	std	Z+1, r1	; 0x01
			editCounter = 0;
     558:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     55c:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	uint8_t lowBound = 0xFF; //Lowest number in what the two arrays differ
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
     560:	4a 17       	cp	r20, r26
     562:	5b 07       	cpc	r21, r27
     564:	51 f7       	brne	.-44     	; 0x53a <_Z10updateDispv+0x3e>
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
			RTC_CNT = 0;
			editCounter = 0;
		}
	}
	if(RTC_CNT > 512){
     566:	a0 90 08 04 	lds	r10, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     56a:	b0 90 09 04 	lds	r11, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     56e:	c0 90 4c 21 	lds	r12, 0x214C	; 0x80214c <toBeDispPtr>
     572:	d0 90 4d 21 	lds	r13, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     576:	be 01       	movw	r22, r28
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <currBlinkMaskPtr>
     580:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <currBlinkMaskPtr+0x1>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     584:	fb 01       	movw	r30, r22
     586:	46 01       	movw	r8, r12
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     588:	68 94       	set
     58a:	ee 24       	eor	r14, r14
     58c:	e5 f8       	bld	r14, 5
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
     58e:	11 e0       	ldi	r17, 0x01	; 1
     590:	a1 16       	cp	r10, r17
     592:	12 e0       	ldi	r17, 0x02	; 2
     594:	b1 06       	cpc	r11, r17
     596:	08 f4       	brcc	.+2      	; 0x59a <_Z10updateDispv+0x9e>
     598:	d0 c0       	rjmp	.+416    	; 0x73a <_Z10updateDispv+0x23e>
     59a:	d9 01       	movw	r26, r18
     59c:	fc 90       	ld	r15, X
     59e:	ff 20       	and	r15, r15
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <_Z10updateDispv+0xa8>
     5a2:	cb c0       	rjmp	.+406    	; 0x73a <_Z10updateDispv+0x23e>
     5a4:	f0 90 93 21 	lds	r15, 0x2193	; 0x802193 <editMode>
     5a8:	f1 10       	cpse	r15, r1
     5aa:	cb c0       	rjmp	.+406    	; 0x742 <_Z10updateDispv+0x246>
     5ac:	c6 c0       	rjmp	.+396    	; 0x73a <_Z10updateDispv+0x23e>
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
     5ae:	d4 01       	movw	r26, r8
     5b0:	fd 90       	ld	r15, X+
     5b2:	4d 01       	movw	r8, r26
     5b4:	dc 01       	movw	r26, r24
     5b6:	fd 92       	st	X+, r15
     5b8:	cd 01       	movw	r24, r26
     5ba:	31 96       	adiw	r30, 0x01	; 1
     5bc:	bf ef       	ldi	r27, 0xFF	; 255
     5be:	cb 1a       	sub	r12, r27
     5c0:	db 0a       	sbc	r13, r27
     5c2:	2f 5f       	subi	r18, 0xFF	; 255
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
     5c6:	48 17       	cp	r20, r24
     5c8:	59 07       	cpc	r21, r25
     5ca:	09 f7       	brne	.-62     	; 0x58e <_Z10updateDispv+0x92>
     5cc:	e1 e5       	ldi	r30, 0x51	; 81
     5ce:	f1 e2       	ldi	r31, 0x21	; 33
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	d1 2c       	mov	r13, r1
     5d4:	3f ef       	ldi	r19, 0xFF	; 255
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
     5d6:	db 01       	movw	r26, r22
     5d8:	9d 91       	ld	r25, X+
     5da:	bd 01       	movw	r22, r26
     5dc:	20 81       	ld	r18, Z
     5de:	29 17       	cp	r18, r25
     5e0:	39 f0       	breq	.+14     	; 0x5f0 <_Z10updateDispv+0xf4>
			currDispData[i] = temp[i];
     5e2:	90 83       	st	Z, r25
			highBound = i;
			if(lowBound == 0xFF){
     5e4:	3f 3f       	cpi	r19, 0xFF	; 255
     5e6:	19 f4       	brne	.+6      	; 0x5ee <_Z10updateDispv+0xf2>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     5e8:	d8 2e       	mov	r13, r24
			if(lowBound == 0xFF){
				lowBound = i;
     5ea:	38 2f       	mov	r19, r24
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <_Z10updateDispv+0xf4>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     5ee:	d8 2e       	mov	r13, r24
     5f0:	31 96       	adiw	r30, 0x01	; 1
     5f2:	8f 5f       	subi	r24, 0xFF	; 255
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
     5f4:	80 32       	cpi	r24, 0x20	; 32
     5f6:	79 f7       	brne	.-34     	; 0x5d6 <_Z10updateDispv+0xda>
			if(lowBound == 0xFF){
				lowBound = i;
			}
		}
	}
	if(lowBound != 0xFF){ //If anything has changed on the display
     5f8:	3f 3f       	cpi	r19, 0xFF	; 255
     5fa:	09 f4       	brne	.+2      	; 0x5fe <_Z10updateDispv+0x102>
     5fc:	a4 c0       	rjmp	.+328    	; 0x746 <_Z10updateDispv+0x24a>
		uint8_t tempPos = lowBound;
		if(tempPos > 15){
     5fe:	30 31       	cpi	r19, 0x10	; 16
     600:	18 f0       	brcs	.+6      	; 0x608 <_Z10updateDispv+0x10c>
			tempPos += 48;
     602:	80 e3       	ldi	r24, 0x30	; 48
     604:	83 0f       	add	r24, r19
     606:	01 c0       	rjmp	.+2      	; 0x60a <_Z10updateDispv+0x10e>
     608:	83 2f       	mov	r24, r19
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
     60a:	80 68       	ori	r24, 0x80	; 128
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     60c:	90 e1       	ldi	r25, 0x10	; 16
     60e:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	SPIC_DATA = SPIdata;
     612:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     616:	e2 ec       	ldi	r30, 0xC2	; 194
     618:	f8 e0       	ldi	r31, 0x08	; 8
     61a:	80 81       	ld	r24, Z
     61c:	88 23       	and	r24, r24
     61e:	ec f7       	brge	.-6      	; 0x61a <_Z10updateDispv+0x11e>
	SPIC_STATUS |= SPI_IF_bm;
     620:	e2 ec       	ldi	r30, 0xC2	; 194
     622:	f8 e0       	ldi	r31, 0x08	; 8
     624:	80 81       	ld	r24, Z
     626:	80 68       	ori	r24, 0x80	; 128
     628:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     62a:	e5 e4       	ldi	r30, 0x45	; 69
     62c:	f6 e0       	ldi	r31, 0x06	; 6
     62e:	80 e1       	ldi	r24, 0x10	; 16
     630:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     632:	87 ec       	ldi	r24, 0xC7	; 199
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <_Z10updateDispv+0x13a>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <_Z10updateDispv+0x140>
     63c:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     63e:	88 e0       	ldi	r24, 0x08	; 8
     640:	80 83       	st	Z, r24
     642:	9a e0       	ldi	r25, 0x0A	; 10
     644:	9a 95       	dec	r25
     646:	f1 f7       	brne	.-4      	; 0x644 <_Z10updateDispv+0x148>
     648:	00 c0       	rjmp	.+0      	; 0x64a <_Z10updateDispv+0x14e>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     64a:	43 2f       	mov	r20, r19
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	8d 2c       	mov	r8, r13
     654:	91 2c       	mov	r9, r1
     656:	a1 2c       	mov	r10, r1
     658:	b1 2c       	mov	r11, r1
     65a:	84 16       	cp	r8, r20
     65c:	95 06       	cpc	r9, r21
     65e:	a6 06       	cpc	r10, r22
     660:	b7 06       	cpc	r11, r23
     662:	08 f4       	brcc	.+2      	; 0x666 <_Z10updateDispv+0x16a>
     664:	62 c0       	rjmp	.+196    	; 0x72a <_Z10updateDispv+0x22e>
     666:	a3 2f       	mov	r26, r19
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	fd 01       	movw	r30, r26
     66c:	ef 5a       	subi	r30, 0xAF	; 175
     66e:	fe 4d       	sbci	r31, 0xDE	; 222
     670:	2f 01       	movw	r4, r30
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     672:	06 e4       	ldi	r16, 0x46	; 70
     674:	16 e0       	ldi	r17, 0x06	; 6
     676:	68 94       	set
     678:	cc 24       	eor	r12, r12
     67a:	c4 f8       	bld	r12, 4
     67c:	9c 2d       	mov	r25, r12
	SPIC_DATA = SPIdata;
     67e:	0f 2e       	mov	r0, r31
     680:	f3 ec       	ldi	r31, 0xC3	; 195
     682:	ef 2e       	mov	r14, r31
     684:	f8 e0       	ldi	r31, 0x08	; 8
     686:	ff 2e       	mov	r15, r31
     688:	f0 2d       	mov	r31, r0
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     68a:	e2 ec       	ldi	r30, 0xC2	; 194
     68c:	f8 e0       	ldi	r31, 0x08	; 8
	SPIC_STATUS |= SPI_IF_bm;
	PORTC_OUTSET = (1 << SS_PIN);
     68e:	25 e4       	ldi	r18, 0x45	; 69
     690:	36 e0       	ldi	r19, 0x06	; 6
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     692:	68 94       	set
     694:	77 24       	eor	r7, r7
     696:	73 f8       	bld	r7, 3
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
	SPIC_DATA = SPIdata;
     698:	0f 2e       	mov	r0, r31
     69a:	f0 ec       	ldi	r31, 0xC0	; 192
     69c:	6f 2e       	mov	r6, r31
     69e:	f0 2d       	mov	r31, r0
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
     6a0:	d2 01       	movw	r26, r4
     6a2:	8d 91       	ld	r24, X+
     6a4:	2d 01       	movw	r4, r26
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     6a6:	d8 01       	movw	r26, r16
     6a8:	9c 93       	st	X, r25
	SPIC_DATA = SPIdata;
     6aa:	d7 01       	movw	r26, r14
     6ac:	8c 93       	st	X, r24
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     6ae:	80 81       	ld	r24, Z
     6b0:	88 23       	and	r24, r24
     6b2:	ec f7       	brge	.-6      	; 0x6ae <_Z10updateDispv+0x1b2>
	SPIC_STATUS |= SPI_IF_bm;
     6b4:	80 81       	ld	r24, Z
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     6ba:	d9 01       	movw	r26, r18
     6bc:	9c 93       	st	X, r25
     6be:	a7 ec       	ldi	r26, 0xC7	; 199
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <_Z10updateDispv+0x1c6>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <_Z10updateDispv+0x1cc>
     6c8:	00 00       	nop
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
			if(i == 15 && highBound != 15){
     6ca:	4f 30       	cpi	r20, 0x0F	; 15
     6cc:	51 05       	cpc	r21, r1
     6ce:	61 05       	cpc	r22, r1
     6d0:	71 05       	cpc	r23, r1
     6d2:	09 f5       	brne	.+66     	; 0x716 <_Z10updateDispv+0x21a>
     6d4:	bf e0       	ldi	r27, 0x0F	; 15
     6d6:	db 16       	cp	r13, r27
     6d8:	41 f1       	breq	.+80     	; 0x72a <_Z10updateDispv+0x22e>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     6da:	d8 01       	movw	r26, r16
     6dc:	7c 92       	st	X, r7
     6de:	ba e0       	ldi	r27, 0x0A	; 10
     6e0:	ba 95       	dec	r27
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <_Z10updateDispv+0x1e4>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <_Z10updateDispv+0x1ea>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     6e6:	d8 01       	movw	r26, r16
     6e8:	cc 92       	st	X, r12
	SPIC_DATA = SPIdata;
     6ea:	d7 01       	movw	r26, r14
     6ec:	6c 92       	st	X, r6
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     6ee:	80 81       	ld	r24, Z
     6f0:	88 23       	and	r24, r24
     6f2:	ec f7       	brge	.-6      	; 0x6ee <_Z10updateDispv+0x1f2>
	SPIC_STATUS |= SPI_IF_bm;
     6f4:	80 81       	ld	r24, Z
     6f6:	80 68       	ori	r24, 0x80	; 128
     6f8:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     6fa:	d9 01       	movw	r26, r18
     6fc:	cc 92       	st	X, r12
     6fe:	a7 ec       	ldi	r26, 0xC7	; 199
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	11 97       	sbiw	r26, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <_Z10updateDispv+0x206>
     706:	00 c0       	rjmp	.+0      	; 0x708 <_Z10updateDispv+0x20c>
     708:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     70a:	d9 01       	movw	r26, r18
     70c:	7c 92       	st	X, r7
     70e:	ba e0       	ldi	r27, 0x0A	; 10
     710:	ba 95       	dec	r27
     712:	f1 f7       	brne	.-4      	; 0x710 <_Z10updateDispv+0x214>
     714:	00 c0       	rjmp	.+0      	; 0x716 <_Z10updateDispv+0x21a>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     716:	4f 5f       	subi	r20, 0xFF	; 255
     718:	5f 4f       	sbci	r21, 0xFF	; 255
     71a:	6f 4f       	sbci	r22, 0xFF	; 255
     71c:	7f 4f       	sbci	r23, 0xFF	; 255
     71e:	84 16       	cp	r8, r20
     720:	95 06       	cpc	r9, r21
     722:	a6 06       	cpc	r10, r22
     724:	b7 06       	cpc	r11, r23
     726:	08 f0       	brcs	.+2      	; 0x72a <_Z10updateDispv+0x22e>
     728:	bb cf       	rjmp	.-138    	; 0x6a0 <_Z10updateDispv+0x1a4>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     72a:	88 e0       	ldi	r24, 0x08	; 8
     72c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     730:	ea e0       	ldi	r30, 0x0A	; 10
     732:	ea 95       	dec	r30
     734:	f1 f7       	brne	.-4      	; 0x732 <_Z10updateDispv+0x236>
     736:	00 c0       	rjmp	.+0      	; 0x738 <_Z10updateDispv+0x23c>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     738:	06 c0       	rjmp	.+12     	; 0x746 <_Z10updateDispv+0x24a>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     73a:	d6 01       	movw	r26, r12
     73c:	fc 90       	ld	r15, X
     73e:	f0 82       	st	Z, r15
     740:	36 cf       	rjmp	.-404    	; 0x5ae <_Z10updateDispv+0xb2>
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     742:	e0 82       	st	Z, r14
     744:	34 cf       	rjmp	.-408    	; 0x5ae <_Z10updateDispv+0xb2>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     746:	a1 96       	adiw	r28, 0x21	; 33
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	9f 90       	pop	r9
     762:	8f 90       	pop	r8
     764:	7f 90       	pop	r7
     766:	6f 90       	pop	r6
     768:	5f 90       	pop	r5
     76a:	4f 90       	pop	r4
     76c:	08 95       	ret

0000076e <_Z12LCD_PRINTDECjhh>:
inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
	currCursorPos++;
}

void LCD_PRINTDEC(uint16_t numToPrint, uint8_t pos, uint8_t noOfDigits){
     76e:	2f 92       	push	r2
     770:	3f 92       	push	r3
     772:	4f 92       	push	r4
     774:	5f 92       	push	r5
     776:	6f 92       	push	r6
     778:	7f 92       	push	r7
     77a:	8f 92       	push	r8
     77c:	9f 92       	push	r9
     77e:	af 92       	push	r10
     780:	bf 92       	push	r11
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2e 97       	sbiw	r28, 0x0e	; 14
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	56 2e       	mov	r5, r22
	//currCursorPos = pos;
	//WR_CHAR();
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
     79e:	6c 01       	movw	r12, r24
     7a0:	e1 2c       	mov	r14, r1
     7a2:	f1 2c       	mov	r15, r1
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	10 e0       	ldi	r17, 0x00	; 0
     7a8:	98 01       	movw	r18, r16
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	da 82       	std	Y+2, r13	; 0x02
     7ae:	eb 82       	std	Y+3, r14	; 0x03
     7b0:	fc 82       	std	Y+4, r15	; 0x04
     7b2:	0d 83       	std	Y+5, r16	; 0x05
     7b4:	1e 83       	std	Y+6, r17	; 0x06
     7b6:	2f 83       	std	Y+7, r18	; 0x07
     7b8:	38 87       	std	Y+8, r19	; 0x08
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
     7ba:	4f 3f       	cpi	r20, 0xFF	; 255
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <_Z12LCD_PRINTDECjhh+0x52>
     7be:	6c c0       	rjmp	.+216    	; 0x898 <_Z12LCD_PRINTDECjhh+0x12a>
     7c0:	3e c0       	rjmp	.+124    	; 0x83e <_Z12LCD_PRINTDECjhh+0xd0>

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
		result *= gnd;
     7c2:	2a 2f       	mov	r18, r26
     7c4:	3b 2d       	mov	r19, r11
     7c6:	4c 2d       	mov	r20, r12
     7c8:	5d 2d       	mov	r21, r13
     7ca:	6e 2d       	mov	r22, r14
     7cc:	7f 2d       	mov	r23, r15
     7ce:	80 2f       	mov	r24, r16
     7d0:	91 2f       	mov	r25, r17
     7d2:	01 e0       	ldi	r16, 0x01	; 1
     7d4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__ashldi3>
     7d8:	32 2e       	mov	r3, r18
     7da:	43 2e       	mov	r4, r19
     7dc:	64 2e       	mov	r6, r20
     7de:	75 2e       	mov	r7, r21
     7e0:	6a 87       	std	Y+10, r22	; 0x0a
     7e2:	79 87       	std	Y+9, r23	; 0x09
     7e4:	b8 2f       	mov	r27, r24
     7e6:	a9 2f       	mov	r26, r25
     7e8:	02 e0       	ldi	r16, 0x02	; 2
     7ea:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__ashldi3>
     7ee:	a2 2e       	mov	r10, r18
     7f0:	b3 2e       	mov	r11, r19
     7f2:	c4 2e       	mov	r12, r20
     7f4:	d5 2e       	mov	r13, r21
     7f6:	e6 2e       	mov	r14, r22
     7f8:	f7 2e       	mov	r15, r23
     7fa:	08 2f       	mov	r16, r24
     7fc:	19 2f       	mov	r17, r25
     7fe:	23 2d       	mov	r18, r3
     800:	34 2d       	mov	r19, r4
     802:	46 2d       	mov	r20, r6
     804:	57 2d       	mov	r21, r7
     806:	6a 85       	ldd	r22, Y+10	; 0x0a
     808:	79 85       	ldd	r23, Y+9	; 0x09
     80a:	8b 2f       	mov	r24, r27
     80c:	9a 2f       	mov	r25, r26
     80e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__adddi3>
     812:	a2 2f       	mov	r26, r18
     814:	b3 2e       	mov	r11, r19
     816:	c4 2e       	mov	r12, r20
     818:	d5 2e       	mov	r13, r21
     81a:	e6 2e       	mov	r14, r22
     81c:	f7 2e       	mov	r15, r23
     81e:	08 2f       	mov	r16, r24
     820:	19 2f       	mov	r17, r25
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     822:	31 96       	adiw	r30, 0x01	; 1
     824:	e8 15       	cp	r30, r8
     826:	f9 05       	cpc	r31, r9
     828:	64 f2       	brlt	.-104    	; 0x7c2 <_Z12LCD_PRINTDECjhh+0x54>
     82a:	13 c0       	rjmp	.+38     	; 0x852 <_Z12LCD_PRINTDECjhh+0xe4>
     82c:	aa e0       	ldi	r26, 0x0A	; 10
     82e:	b1 2c       	mov	r11, r1
     830:	c1 2c       	mov	r12, r1
     832:	d1 2c       	mov	r13, r1
     834:	e1 2c       	mov	r14, r1
     836:	f1 2c       	mov	r15, r1
     838:	00 e0       	ldi	r16, 0x00	; 0
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	0a c0       	rjmp	.+20     	; 0x852 <_Z12LCD_PRINTDECjhh+0xe4>
     83e:	81 2c       	mov	r8, r1
     840:	91 2c       	mov	r9, r1
     842:	aa e0       	ldi	r26, 0x0A	; 10
     844:	b1 2c       	mov	r11, r1
     846:	c1 2c       	mov	r12, r1
     848:	d1 2c       	mov	r13, r1
     84a:	e1 2c       	mov	r14, r1
     84c:	f1 2c       	mov	r15, r1
     84e:	00 e0       	ldi	r16, 0x00	; 0
     850:	10 e0       	ldi	r17, 0x00	; 0
		result *= gnd;
	}
	if(exp == 0){
     852:	81 14       	cp	r8, r1
     854:	91 04       	cpc	r9, r1
     856:	09 f4       	brne	.+2      	; 0x85a <_Z12LCD_PRINTDECjhh+0xec>
     858:	1b c1       	rjmp	.+566    	; 0xa90 <_Z12LCD_PRINTDECjhh+0x322>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     85a:	29 81       	ldd	r18, Y+1	; 0x01
     85c:	3a 81       	ldd	r19, Y+2	; 0x02
     85e:	4b 81       	ldd	r20, Y+3	; 0x03
     860:	5c 81       	ldd	r21, Y+4	; 0x04
     862:	6d 81       	ldd	r22, Y+5	; 0x05
     864:	7e 81       	ldd	r23, Y+6	; 0x06
     866:	8f 81       	ldd	r24, Y+7	; 0x07
     868:	98 85       	ldd	r25, Y+8	; 0x08
     86a:	aa 2e       	mov	r10, r26
     86c:	0e 94 c5 0c 	call	0x198a	; 0x198a <__cmpdi2>
     870:	0c f4       	brge	.+2      	; 0x874 <_Z12LCD_PRINTDECjhh+0x106>
     872:	fd c0       	rjmp	.+506    	; 0xa6e <_Z12LCD_PRINTDECjhh+0x300>
				check = true;
			}
			decCounter++;
     874:	0f ef       	ldi	r16, 0xFF	; 255
     876:	80 1a       	sub	r8, r16
     878:	90 0a       	sbc	r9, r16
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     87a:	12 e0       	ldi	r17, 0x02	; 2
     87c:	81 16       	cp	r8, r17
     87e:	91 04       	cpc	r9, r1
     880:	ac f2       	brlt	.-86     	; 0x82c <_Z12LCD_PRINTDECjhh+0xbe>
     882:	aa e0       	ldi	r26, 0x0A	; 10
     884:	b1 2c       	mov	r11, r1
     886:	c1 2c       	mov	r12, r1
     888:	d1 2c       	mov	r13, r1
     88a:	e1 2c       	mov	r14, r1
     88c:	f1 2c       	mov	r15, r1
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	e1 e0       	ldi	r30, 0x01	; 1
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	95 cf       	rjmp	.-214    	; 0x7c2 <_Z12LCD_PRINTDECjhh+0x54>
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
	}
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
     898:	84 2f       	mov	r24, r20
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	1c 01       	movw	r2, r24
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	22 1a       	sub	r2, r18
     8a2:	31 08       	sbc	r3, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     8a4:	33 20       	and	r3, r3
     8a6:	0c f4       	brge	.+2      	; 0x8aa <_Z12LCD_PRINTDECjhh+0x13c>
     8a8:	01 c1       	rjmp	.+514    	; 0xaac <_Z12LCD_PRINTDECjhh+0x33e>
     8aa:	85 2d       	mov	r24, r5
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	8b 87       	std	Y+11, r24	; 0x0b
     8b0:	9c 87       	std	Y+12, r25	; 0x0c
     8b2:	41 2c       	mov	r4, r1
     8b4:	51 2c       	mov	r5, r1
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	29 16       	cp	r2, r25
     8ba:	31 04       	cpc	r3, r1
     8bc:	7c f1       	brlt	.+94     	; 0x91c <_Z12LCD_PRINTDECjhh+0x1ae>
     8be:	2a e0       	ldi	r18, 0x0A	; 10
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	e1 e0       	ldi	r30, 0x01	; 1
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
		result *= gnd;
     8d2:	01 e0       	ldi	r16, 0x01	; 1
     8d4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__ashldi3>
     8d8:	62 2e       	mov	r6, r18
     8da:	73 2e       	mov	r7, r19
     8dc:	84 2e       	mov	r8, r20
     8de:	95 2e       	mov	r9, r21
     8e0:	6a 87       	std	Y+10, r22	; 0x0a
     8e2:	79 87       	std	Y+9, r23	; 0x09
     8e4:	b8 2f       	mov	r27, r24
     8e6:	a9 2f       	mov	r26, r25
     8e8:	02 e0       	ldi	r16, 0x02	; 2
     8ea:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__ashldi3>
     8ee:	a2 2e       	mov	r10, r18
     8f0:	b3 2e       	mov	r11, r19
     8f2:	c4 2e       	mov	r12, r20
     8f4:	d5 2e       	mov	r13, r21
     8f6:	e6 2e       	mov	r14, r22
     8f8:	f7 2e       	mov	r15, r23
     8fa:	08 2f       	mov	r16, r24
     8fc:	19 2f       	mov	r17, r25
     8fe:	26 2d       	mov	r18, r6
     900:	37 2d       	mov	r19, r7
     902:	48 2d       	mov	r20, r8
     904:	59 2d       	mov	r21, r9
     906:	6a 85       	ldd	r22, Y+10	; 0x0a
     908:	79 85       	ldd	r23, Y+9	; 0x09
     90a:	8b 2f       	mov	r24, r27
     90c:	9a 2f       	mov	r25, r26
     90e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__adddi3>
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     912:	31 96       	adiw	r30, 0x01	; 1
     914:	e2 15       	cp	r30, r2
     916:	f3 05       	cpc	r31, r3
     918:	e1 f6       	brne	.-72     	; 0x8d2 <_Z12LCD_PRINTDECjhh+0x164>
     91a:	08 c0       	rjmp	.+16     	; 0x92c <_Z12LCD_PRINTDECjhh+0x1be>
	//PORTD_INTCTRL |= PORT_INT0LVL_HI_gc;
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
     91c:	2a e0       	ldi	r18, 0x0A	; 10
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 1; i < exp; i++){
		result *= gnd;
	}
	if(exp == 0){
     92c:	21 14       	cp	r2, r1
     92e:	31 04       	cpc	r3, r1
     930:	49 f0       	breq	.+18     	; 0x944 <_Z12LCD_PRINTDECjhh+0x1d6>
     932:	2d 87       	std	Y+13, r18	; 0x0d
     934:	73 2e       	mov	r7, r19
     936:	84 2e       	mov	r8, r20
     938:	95 2e       	mov	r9, r21
     93a:	6e 87       	std	Y+14, r22	; 0x0e
     93c:	79 87       	std	Y+9, r23	; 0x09
     93e:	8a 87       	std	Y+10, r24	; 0x0a
     940:	69 2e       	mov	r6, r25
     942:	09 c0       	rjmp	.+18     	; 0x956 <_Z12LCD_PRINTDECjhh+0x1e8>
		return 1;
     944:	01 e0       	ldi	r16, 0x01	; 1
     946:	0d 87       	std	Y+13, r16	; 0x0d
     948:	71 2c       	mov	r7, r1
     94a:	81 2c       	mov	r8, r1
     94c:	91 2c       	mov	r9, r1
     94e:	1e 86       	std	Y+14, r1	; 0x0e
     950:	19 86       	std	Y+9, r1	; 0x09
     952:	1a 86       	std	Y+10, r1	; 0x0a
     954:	61 2c       	mov	r6, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
		int16_t t;
		for(t = 0; startNum - (mathPow(10, i) * t) >= 0; t++){} //t = 9 if i = 1 and startnum = 90, t = 3 if i = 2 and startnum is 356
     956:	ad 84       	ldd	r10, Y+13	; 0x0d
     958:	b7 2c       	mov	r11, r7
     95a:	c8 2c       	mov	r12, r8
     95c:	d9 2c       	mov	r13, r9
     95e:	ee 84       	ldd	r14, Y+14	; 0x0e
     960:	f9 84       	ldd	r15, Y+9	; 0x09
     962:	0a 85       	ldd	r16, Y+10	; 0x0a
     964:	16 2d       	mov	r17, r6
     966:	24 2d       	mov	r18, r4
     968:	35 2d       	mov	r19, r5
     96a:	95 2d       	mov	r25, r5
     96c:	99 0f       	add	r25, r25
     96e:	99 0b       	sbc	r25, r25
     970:	49 2f       	mov	r20, r25
     972:	59 2f       	mov	r21, r25
     974:	69 2f       	mov	r22, r25
     976:	79 2f       	mov	r23, r25
     978:	89 2f       	mov	r24, r25
     97a:	0e 94 41 0c 	call	0x1882	; 0x1882 <__muldi3>
     97e:	a2 2e       	mov	r10, r18
     980:	b3 2e       	mov	r11, r19
     982:	c4 2e       	mov	r12, r20
     984:	d5 2e       	mov	r13, r21
     986:	e6 2e       	mov	r14, r22
     988:	f7 2e       	mov	r15, r23
     98a:	08 2f       	mov	r16, r24
     98c:	19 2f       	mov	r17, r25
     98e:	29 81       	ldd	r18, Y+1	; 0x01
     990:	3a 81       	ldd	r19, Y+2	; 0x02
     992:	4b 81       	ldd	r20, Y+3	; 0x03
     994:	5c 81       	ldd	r21, Y+4	; 0x04
     996:	6d 81       	ldd	r22, Y+5	; 0x05
     998:	7e 81       	ldd	r23, Y+6	; 0x06
     99a:	8f 81       	ldd	r24, Y+7	; 0x07
     99c:	98 85       	ldd	r25, Y+8	; 0x08
     99e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__subdi3>
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	0e 94 ce 0c 	call	0x199c	; 0x199c <__cmpdi2_s8>
     9a8:	24 f0       	brlt	.+8      	; 0x9b2 <_Z12LCD_PRINTDECjhh+0x244>
     9aa:	1f ef       	ldi	r17, 0xFF	; 255
     9ac:	41 1a       	sub	r4, r17
     9ae:	51 0a       	sbc	r5, r17
     9b0:	82 cf       	rjmp	.-252    	; 0x8b6 <_Z12LCD_PRINTDECjhh+0x148>
     9b2:	2d 85       	ldd	r18, Y+13	; 0x0d
     9b4:	3e 85       	ldd	r19, Y+14	; 0x0e
		if(t > 0){
     9b6:	14 14       	cp	r1, r4
     9b8:	15 04       	cpc	r1, r5
     9ba:	ec f5       	brge	.+122    	; 0xa36 <_Z12LCD_PRINTDECjhh+0x2c8>
			startNum -= mathPow(10, i) * (t - 1); //Subtract the printed number from the start number
     9bc:	a2 01       	movw	r20, r4
     9be:	41 50       	subi	r20, 0x01	; 1
     9c0:	51 09       	sbc	r21, r1
     9c2:	95 2f       	mov	r25, r21
     9c4:	99 0f       	add	r25, r25
     9c6:	99 0b       	sbc	r25, r25
     9c8:	a2 2e       	mov	r10, r18
     9ca:	b7 2c       	mov	r11, r7
     9cc:	c8 2c       	mov	r12, r8
     9ce:	d9 2c       	mov	r13, r9
     9d0:	e3 2e       	mov	r14, r19
     9d2:	f9 84       	ldd	r15, Y+9	; 0x09
     9d4:	0a 85       	ldd	r16, Y+10	; 0x0a
     9d6:	16 2d       	mov	r17, r6
     9d8:	24 2f       	mov	r18, r20
     9da:	35 2f       	mov	r19, r21
     9dc:	49 2f       	mov	r20, r25
     9de:	59 2f       	mov	r21, r25
     9e0:	69 2f       	mov	r22, r25
     9e2:	79 2f       	mov	r23, r25
     9e4:	89 2f       	mov	r24, r25
     9e6:	0e 94 41 0c 	call	0x1882	; 0x1882 <__muldi3>
     9ea:	a2 2e       	mov	r10, r18
     9ec:	b3 2e       	mov	r11, r19
     9ee:	c4 2e       	mov	r12, r20
     9f0:	d5 2e       	mov	r13, r21
     9f2:	e6 2e       	mov	r14, r22
     9f4:	f7 2e       	mov	r15, r23
     9f6:	08 2f       	mov	r16, r24
     9f8:	19 2f       	mov	r17, r25
     9fa:	29 81       	ldd	r18, Y+1	; 0x01
     9fc:	3a 81       	ldd	r19, Y+2	; 0x02
     9fe:	4b 81       	ldd	r20, Y+3	; 0x03
     a00:	5c 81       	ldd	r21, Y+4	; 0x04
     a02:	6d 81       	ldd	r22, Y+5	; 0x05
     a04:	7e 81       	ldd	r23, Y+6	; 0x06
     a06:	8f 81       	ldd	r24, Y+7	; 0x07
     a08:	98 85       	ldd	r25, Y+8	; 0x08
     a0a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__subdi3>
     a0e:	29 83       	std	Y+1, r18	; 0x01
     a10:	3a 83       	std	Y+2, r19	; 0x02
     a12:	4b 83       	std	Y+3, r20	; 0x03
     a14:	5c 83       	std	Y+4, r21	; 0x04
     a16:	6d 83       	std	Y+5, r22	; 0x05
     a18:	7e 83       	std	Y+6, r23	; 0x06
     a1a:	8f 83       	std	Y+7, r24	; 0x07
     a1c:	98 87       	std	Y+8, r25	; 0x08
			*(toBeDispPtr + pos + decCounter - i) = 0x2F + t;
     a1e:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     a22:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a26:	8b 85       	ldd	r24, Y+11	; 0x0b
     a28:	9c 85       	ldd	r25, Y+12	; 0x0c
     a2a:	e8 0f       	add	r30, r24
     a2c:	f9 1f       	adc	r31, r25
     a2e:	8f e2       	ldi	r24, 0x2F	; 47
     a30:	84 0d       	add	r24, r4
     a32:	80 83       	st	Z, r24
     a34:	0d c0       	rjmp	.+26     	; 0xa50 <_Z12LCD_PRINTDECjhh+0x2e2>
		}
		else{
			*(toBeDispPtr + pos + decCounter - i) = 0x30;
     a36:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     a3a:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a3e:	cb 84       	ldd	r12, Y+11	; 0x0b
     a40:	dc 84       	ldd	r13, Y+12	; 0x0c
     a42:	ec 0d       	add	r30, r12
     a44:	fd 1d       	adc	r31, r13
     a46:	0f 2e       	mov	r0, r31
     a48:	f0 e3       	ldi	r31, 0x30	; 48
     a4a:	df 2e       	mov	r13, r31
     a4c:	f0 2d       	mov	r31, r0
     a4e:	d0 82       	st	Z, r13
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     a50:	01 e0       	ldi	r16, 0x01	; 1
     a52:	20 1a       	sub	r2, r16
     a54:	31 08       	sbc	r3, r1
     a56:	2b 85       	ldd	r18, Y+11	; 0x0b
     a58:	3c 85       	ldd	r19, Y+12	; 0x0c
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	2b 87       	std	Y+11, r18	; 0x0b
     a60:	3c 87       	std	Y+12, r19	; 0x0c
     a62:	3f ef       	ldi	r19, 0xFF	; 255
     a64:	23 16       	cp	r2, r19
     a66:	33 06       	cpc	r3, r19
     a68:	09 f0       	breq	.+2      	; 0xa6c <_Z12LCD_PRINTDECjhh+0x2fe>
     a6a:	23 cf       	rjmp	.-442    	; 0x8b2 <_Z12LCD_PRINTDECjhh+0x144>
     a6c:	1f c0       	rjmp	.+62     	; 0xaac <_Z12LCD_PRINTDECjhh+0x33e>
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
     a6e:	14 01       	movw	r2, r8
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	28 1a       	sub	r2, r24
     a74:	31 08       	sbc	r3, r1
     a76:	16 cf       	rjmp	.-468    	; 0x8a4 <_Z12LCD_PRINTDECjhh+0x136>
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
     a78:	9f ef       	ldi	r25, 0xFF	; 255
     a7a:	89 1a       	sub	r8, r25
     a7c:	99 0a       	sbc	r9, r25
     a7e:	aa e0       	ldi	r26, 0x0A	; 10
     a80:	b1 2c       	mov	r11, r1
     a82:	c1 2c       	mov	r12, r1
     a84:	d1 2c       	mov	r13, r1
     a86:	e1 2c       	mov	r14, r1
     a88:	f1 2c       	mov	r15, r1
     a8a:	00 e0       	ldi	r16, 0x00	; 0
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	e1 ce       	rjmp	.-574    	; 0x852 <_Z12LCD_PRINTDECjhh+0xe4>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     a90:	29 81       	ldd	r18, Y+1	; 0x01
     a92:	3a 81       	ldd	r19, Y+2	; 0x02
     a94:	4b 81       	ldd	r20, Y+3	; 0x03
     a96:	5c 81       	ldd	r21, Y+4	; 0x04
     a98:	6d 81       	ldd	r22, Y+5	; 0x05
     a9a:	7e 81       	ldd	r23, Y+6	; 0x06
     a9c:	8f 81       	ldd	r24, Y+7	; 0x07
     a9e:	98 85       	ldd	r25, Y+8	; 0x08
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	0e 94 ce 0c 	call	0x199c	; 0x199c <__cmpdi2_s8>
     aa6:	19 f3       	breq	.-58     	; 0xa6e <_Z12LCD_PRINTDECjhh+0x300>
     aa8:	14 f3       	brlt	.-60     	; 0xa6e <_Z12LCD_PRINTDECjhh+0x300>
     aaa:	e6 cf       	rjmp	.-52     	; 0xa78 <_Z12LCD_PRINTDECjhh+0x30a>
		}
		
		
	}
	//NWR_CHAR();
}
     aac:	2e 96       	adiw	r28, 0x0e	; 14
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	7f 90       	pop	r7
     acc:	6f 90       	pop	r6
     ace:	5f 90       	pop	r5
     ad0:	4f 90       	pop	r4
     ad2:	3f 90       	pop	r3
     ad4:	2f 90       	pop	r2
     ad6:	08 95       	ret

00000ad8 <_Z9LCD_PRINTPch>:

void LCD_PRINT(char charBuf[32], uint8_t pos){
	currCursorPos = pos;
     ad8:	60 93 4e 21 	sts	0x214E, r22	; 0x80214e <currCursorPos>
     adc:	fc 01       	movw	r30, r24
	int i = 0;
	bool NULL_FOUND = false;
	for(i = 0; !NULL_FOUND; i++){
		if(charBuf[i] == '\0'){
     ade:	91 91       	ld	r25, Z+
     ae0:	99 23       	and	r25, r25
     ae2:	79 f0       	breq	.+30     	; 0xb02 <_Z9LCD_PRINTPch+0x2a>
		NWR_CHAR();
	}
}

inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
     ae4:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     ae8:	a0 91 4c 21 	lds	r26, 0x214C	; 0x80214c <toBeDispPtr>
     aec:	b0 91 4d 21 	lds	r27, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     af0:	a8 0f       	add	r26, r24
     af2:	b1 1d       	adc	r27, r1
     af4:	9c 93       	st	X, r25
	currCursorPos++;
     af6:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <currCursorPos>
     b00:	ee cf       	rjmp	.-36     	; 0xade <_Z9LCD_PRINTPch+0x6>
     b02:	08 95       	ret

00000b04 <_Z13setScrnAndPWMj>:
			setCharInToBe(charBuf[i]);
		}
	}
}

void setScrnAndPWM(uint16_t tempVal){ //Update screen with brightness value and update PWM
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
	uint16_t fullTemp = (double)tempVal * (double)tempVal * 0.11111;
     b0c:	bc 01       	movw	r22, r24
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 1d 0b 	call	0x163a	; 0x163a <__floatunsisf>
     b16:	6b 01       	movw	r12, r22
     b18:	7c 01       	movw	r14, r24
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__mulsf3>
     b22:	24 ea       	ldi	r18, 0xA4	; 164
     b24:	3d e8       	ldi	r19, 0x8D	; 141
     b26:	43 ee       	ldi	r20, 0xE3	; 227
     b28:	5d e3       	ldi	r21, 0x3D	; 61
     b2a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__mulsf3>
     b2e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fixunssfsi>
	TCE0_CCABUF = fullTemp;
     b32:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
     b36:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
	uint16_t dispVal = (double)tempVal / 7.68;
	LCD_PRINTDEC(dispVal, 28, 0x3);
     b3a:	2f e8       	ldi	r18, 0x8F	; 143
     b3c:	32 ec       	ldi	r19, 0xC2	; 194
     b3e:	45 ef       	ldi	r20, 0xF5	; 245
     b40:	50 e4       	ldi	r21, 0x40	; 64
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__divsf3>
     b4a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fixunssfsi>
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	43 e0       	ldi	r20, 0x03	; 3
     b54:	6c e1       	ldi	r22, 0x1C	; 28
     b56:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12LCD_PRINTDECjhh>
}
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	08 95       	ret

00000b64 <_Z16updateBrightnessv>:

void updateBrightness(){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	uint16_t tempStore = TCC0_CNT;
     b68:	c0 91 20 08 	lds	r28, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     b6c:	d0 91 21 08 	lds	r29, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
     b70:	be 01       	movw	r22, r28
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 1d 0b 	call	0x163a	; 0x163a <__floatunsisf>
     b7a:	27 ed       	ldi	r18, 0xD7	; 215
     b7c:	3f ed       	ldi	r19, 0xDF	; 223
     b7e:	4f e3       	ldi	r20, 0x3F	; 63
     b80:	55 e4       	ldi	r21, 0x45	; 69
     b82:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__gesf2>
     b86:	18 16       	cp	r1, r24
     b88:	34 f0       	brlt	.+12     	; 0xb96 <_Z16updateBrightnessv+0x32>
		tempStore = (int)MAX_CNT_BRIGHTNESS;
	}
	//Set a minimum brightness threshold
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
     b8a:	c8 30       	cpi	r28, 0x08	; 8
     b8c:	d1 05       	cpc	r29, r1
     b8e:	28 f4       	brcc	.+10     	; 0xb9a <_Z16updateBrightnessv+0x36>
		tempStore = 0;
     b90:	c0 e0       	ldi	r28, 0x00	; 0
     b92:	d0 e0       	ldi	r29, 0x00	; 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <_Z16updateBrightnessv+0x36>
void updateBrightness(){
	uint16_t tempStore = TCC0_CNT;
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
		tempStore = (int)MAX_CNT_BRIGHTNESS;
     b96:	c0 e0       	ldi	r28, 0x00	; 0
     b98:	dc e0       	ldi	r29, 0x0C	; 12
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
		tempStore = 0;
	}
	#define BRIGHTNESS_FINAL_DIV (BRIGHTNESS_DIV * 4)
	brightness = tempStore / BRIGHTNESS_FINAL_DIV;
     b9a:	d6 95       	lsr	r29
     b9c:	c7 95       	ror	r28
     b9e:	d6 95       	lsr	r29
     ba0:	c7 95       	ror	r28
     ba2:	c0 93 23 21 	sts	0x2123, r28	; 0x802123 <brightness>
     ba6:	d0 93 24 21 	sts	0x2124, r29	; 0x802124 <brightness+0x1>
	setScrnAndPWM(brightness);
     baa:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     bae:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     bb2:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z13setScrnAndPWMj>
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_Z7setMode10DMXMANMode>:

//Mode control functions
void setMode(DMXMANMode tempMode){
	if(tempMode == DMX){
     bbc:	81 11       	cpse	r24, r1
     bbe:	33 c0       	rjmp	.+102    	; 0xc26 <_Z7setMode10DMXMANMode+0x6a>
		if(editMode){
     bc0:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     bc4:	88 23       	and	r24, r24
     bc6:	31 f0       	breq	.+12     	; 0xbd4 <_Z7setMode10DMXMANMode+0x18>
			currBlinkMaskPtr = DMXBlinkVal0;
     bc8:	8a ee       	ldi	r24, 0xEA	; 234
     bca:	90 e2       	ldi	r25, 0x20	; 32
     bcc:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     bd0:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = DMXdisp;
     bd4:	84 e2       	ldi	r24, 0x24	; 36
     bd6:	90 e2       	ldi	r25, 0x20	; 32
     bd8:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     bdc:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = DMX;
     be0:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <currentMode>
	USARTD0_CTRLB &= ~USART_RXEN_bm;
	//PORTD_INTCTRL &= ~PORT_INT0LVL_HI_gc;
}

inline void DMX_ENABLE(){//Enable all DMX interrupts
	TCC1_INTCTRLA |= TC_OVFINTLVL_HI_gc;//Enable timer0 interrupt
     be4:	e6 e4       	ldi	r30, 0x46	; 70
     be6:	f8 e0       	ldi	r31, 0x08	; 8
     be8:	80 81       	ld	r24, Z
     bea:	83 60       	ori	r24, 0x03	; 3
     bec:	80 83       	st	Z, r24
	USARTD0_CTRLA |= USART_RXCINTLVL_MED_gc;//Enable USART interrupt
     bee:	e3 ea       	ldi	r30, 0xA3	; 163
     bf0:	f9 e0       	ldi	r31, 0x09	; 9
     bf2:	80 81       	ld	r24, Z
     bf4:	80 62       	ori	r24, 0x20	; 32
     bf6:	80 83       	st	Z, r24
	USARTD0_CTRLB |= USART_RXEN_bm;
     bf8:	e4 ea       	ldi	r30, 0xA4	; 164
     bfa:	f9 e0       	ldi	r31, 0x09	; 9
     bfc:	80 81       	ld	r24, Z
     bfe:	80 61       	ori	r24, 0x10	; 16
     c00:	80 83       	st	Z, r24
			currBlinkMaskPtr = DMXBlinkVal0;
		}
		toBeDispPtr = DMXdisp;
		currentMode = DMX;
		DMX_ENABLE();
		LCD_PRINTDEC(DMXChan, 22, 3);
     c02:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     c06:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     c0a:	43 e0       	ldi	r20, 0x03	; 3
     c0c:	66 e1       	ldi	r22, 0x16	; 22
     c0e:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12LCD_PRINTDECjhh>
		LCD_PRINTDEC(DMXChan + 1, 28, 3);
     c12:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     c16:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     c1a:	43 e0       	ldi	r20, 0x03	; 3
     c1c:	6c e1       	ldi	r22, 0x1C	; 28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12LCD_PRINTDECjhh>
     c24:	08 95       	ret
	}
	if(tempMode == MAN){
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	41 f5       	brne	.+80     	; 0xc7a <_Z7setMode10DMXMANMode+0xbe>
		if(editMode){
     c2a:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     c2e:	88 23       	and	r24, r24
     c30:	31 f0       	breq	.+12     	; 0xc3e <_Z7setMode10DMXMANMode+0x82>
			currBlinkMaskPtr = MANBlinkVal0;
     c32:	86 e6       	ldi	r24, 0x66	; 102
     c34:	90 e2       	ldi	r25, 0x20	; 32
     c36:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     c3a:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = MANdisp;
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	90 e2       	ldi	r25, 0x20	; 32
     c42:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     c46:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = MAN;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <currentMode>
		eeprom_write_byte(MODE_addr, modeByte);
	}
}

inline void DMX_DISABLE(){//Disable all DMX interrupts
	TCC1_INTCTRLA &= ~TC_OVFINTLVL_HI_gc;//Disable timer0 interrupt
     c50:	e6 e4       	ldi	r30, 0x46	; 70
     c52:	f8 e0       	ldi	r31, 0x08	; 8
     c54:	80 81       	ld	r24, Z
     c56:	8c 7f       	andi	r24, 0xFC	; 252
     c58:	80 83       	st	Z, r24
	USARTD0_CTRLA &= ~USART_RXCINTLVL_MED_gc;//Disable USART interrupt
     c5a:	e3 ea       	ldi	r30, 0xA3	; 163
     c5c:	f9 e0       	ldi	r31, 0x09	; 9
     c5e:	80 81       	ld	r24, Z
     c60:	8f 7d       	andi	r24, 0xDF	; 223
     c62:	80 83       	st	Z, r24
	USARTD0_CTRLB &= ~USART_RXEN_bm;
     c64:	e4 ea       	ldi	r30, 0xA4	; 164
     c66:	f9 e0       	ldi	r31, 0x09	; 9
     c68:	80 81       	ld	r24, Z
     c6a:	8f 7e       	andi	r24, 0xEF	; 239
     c6c:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal0;
		}
		toBeDispPtr = MANdisp;
		currentMode = MAN;
		DMX_DISABLE();
		setScrnAndPWM(brightness);
     c6e:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     c72:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     c76:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z13setScrnAndPWMj>
     c7a:	08 95       	ret

00000c7c <_Z17update_RAM_EEPROMv>:
	}
}

void update_RAM_EEPROM(){ //Updates RAM with all brightness, mode and DMX information from values stored in the EEPROM
	brightness = eeprom_read_word(BRIGHTNESS_addr);
     c7c:	83 e1       	ldi	r24, 0x13	; 19
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <eeprom_read_word>
     c84:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <brightness>
     c88:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <brightness+0x1>
	DMXChan = eeprom_read_word(DMX_addr);
     c8c:	85 e1       	ldi	r24, 0x15	; 21
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <eeprom_read_word>
     c94:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
     c98:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
	if(eeprom_read_byte(MODE_addr)){
     c9c:	80 e1       	ldi	r24, 0x10	; 16
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <eeprom_read_byte>
     ca4:	88 23       	and	r24, r24
     ca6:	51 f0       	breq	.+20     	; 0xcbc <_Z17update_RAM_EEPROMv+0x40>
		setScrnAndPWM(brightness);
     ca8:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     cac:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     cb0:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z13setScrnAndPWMj>
		setMode(MAN);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z7setMode10DMXMANMode>
     cba:	08 95       	ret
	}
	else{
		setMode(DMX);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z7setMode10DMXMANMode>
     cc2:	08 95       	ret

00000cc4 <_Z16setPermanentModeb>:
	}
}

void setPermanentMode(bool temp){
     cc4:	cf 93       	push	r28
	if(blinkTimeoutIgnore != temp){
     cc6:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <blinkTimeoutIgnore>
     cca:	98 17       	cp	r25, r24
     ccc:	81 f0       	breq	.+32     	; 0xcee <_Z16setPermanentModeb+0x2a>
     cce:	c8 2f       	mov	r28, r24
		if(temp){
     cd0:	88 23       	and	r24, r24
     cd2:	31 f0       	breq	.+12     	; 0xce0 <_Z16setPermanentModeb+0x1c>
			LCD_PRINT("P", 15);
     cd4:	6f e0       	ldi	r22, 0x0F	; 15
     cd6:	8b e0       	ldi	r24, 0x0B	; 11
     cd8:	91 e2       	ldi	r25, 0x21	; 33
     cda:	0e 94 6c 05 	call	0xad8	; 0xad8 <_Z9LCD_PRINTPch>
     cde:	05 c0       	rjmp	.+10     	; 0xcea <_Z16setPermanentModeb+0x26>
		}
		else{
			LCD_PRINT(" ", 15);
     ce0:	6f e0       	ldi	r22, 0x0F	; 15
     ce2:	82 e1       	ldi	r24, 0x12	; 18
     ce4:	91 e2       	ldi	r25, 0x21	; 33
     ce6:	0e 94 6c 05 	call	0xad8	; 0xad8 <_Z9LCD_PRINTPch>
		}
		blinkTimeoutIgnore = temp;
     cea:	c0 93 1d 21 	sts	0x211D, r28	; 0x80211d <blinkTimeoutIgnore>
	}
}
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <_Z10setEncMode11encoderMode>:

void setEncMode(encoderMode tempMode){
	switch(tempMode){
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	d9 f0       	breq	.+54     	; 0xd2c <_Z10setEncMode11encoderMode+0x3a>
     cf6:	30 f0       	brcs	.+12     	; 0xd04 <_Z10setEncMode11encoderMode+0x12>
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	f1 f1       	breq	.+124    	; 0xd78 <_Z10setEncMode11encoderMode+0x86>
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	09 f4       	brne	.+2      	; 0xd02 <_Z10setEncMode11encoderMode+0x10>
     d00:	62 c0       	rjmp	.+196    	; 0xdc6 <_Z10setEncMode11encoderMode+0xd4>
     d02:	08 95       	ret
		case OFF:
		EncoderMode = OFF;
     d04:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <EncoderMode>
		TCC0_CTRLA &= ~TC_CLKSEL_DIV1_gc;
     d08:	e0 e0       	ldi	r30, 0x00	; 0
     d0a:	f8 e0       	ldi	r31, 0x08	; 8
     d0c:	80 81       	ld	r24, Z
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     d12:	e6 e0       	ldi	r30, 0x06	; 6
     d14:	f8 e0       	ldi	r31, 0x08	; 8
     d16:	80 81       	ld	r24, Z
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d1c:	e7 e0       	ldi	r30, 0x07	; 7
     d1e:	f8 e0       	ldi	r31, 0x08	; 8
     d20:	80 81       	ld	r24, Z
     d22:	8a 7f       	andi	r24, 0xFA	; 250
     d24:	80 83       	st	Z, r24
		update_EEPROM_RAM();
     d26:	0e 94 42 02 	call	0x484	; 0x484 <_Z17update_EEPROM_RAMv>
		break;
     d2a:	08 95       	ret

		case MODESEL:
		#define TCC0_CNT_MODE (int)(160 * MODE_DIV)
		#define TCC0_PER_MODE (int)(320 * MODE_DIV)
		TCC0_CNT = TCC0_CNT_MODE;
     d2c:	80 ea       	ldi	r24, 0xA0	; 160
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d34:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     d38:	e1 e0       	ldi	r30, 0x01	; 1
     d3a:	f8 e0       	ldi	r31, 0x08	; 8
     d3c:	80 81       	ld	r24, Z
     d3e:	88 7f       	andi	r24, 0xF8	; 248
     d40:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_MODE;
     d42:	80 e4       	ldi	r24, 0x40	; 64
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d4a:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     d4e:	e6 e0       	ldi	r30, 0x06	; 6
     d50:	f8 e0       	ldi	r31, 0x08	; 8
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
		OVF_firstSam = true;
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <OVF_firstSam>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d5e:	e7 e0       	ldi	r30, 0x07	; 7
     d60:	f8 e0       	ldi	r31, 0x08	; 8
     d62:	80 81       	ld	r24, Z
     d64:	8a 7f       	andi	r24, 0xFA	; 250
     d66:	80 83       	st	Z, r24
		EncoderMode = MODESEL;
     d68:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     d6c:	e0 e0       	ldi	r30, 0x00	; 0
     d6e:	f8 e0       	ldi	r31, 0x08	; 8
     d70:	80 81       	ld	r24, Z
     d72:	81 60       	ori	r24, 0x01	; 1
     d74:	80 83       	st	Z, r24
		break;
     d76:	08 95       	ret

		case CHANSEL:
		#define TCC0_CNT_CHAN (int)(160 * CHANNEL_DIV)
		#define TCC0_PER_CHAN (int)(320 * CHANNEL_DIV)
		TCC0_CNT = TCC0_CNT_CHAN;
     d78:	80 ea       	ldi	r24, 0xA0	; 160
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d80:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     d84:	e1 e0       	ldi	r30, 0x01	; 1
     d86:	f8 e0       	ldi	r31, 0x08	; 8
     d88:	80 81       	ld	r24, Z
     d8a:	88 7f       	andi	r24, 0xF8	; 248
     d8c:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_CHAN;
     d8e:	80 e4       	ldi	r24, 0x40	; 64
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d96:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     d9a:	e6 e0       	ldi	r30, 0x06	; 6
     d9c:	f8 e0       	ldi	r31, 0x08	; 8
     d9e:	80 81       	ld	r24, Z
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	80 83       	st	Z, r24
		OVF_firstSam = true;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <OVF_firstSam>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     daa:	e7 e0       	ldi	r30, 0x07	; 7
     dac:	f8 e0       	ldi	r31, 0x08	; 8
     dae:	80 81       	ld	r24, Z
     db0:	8a 7f       	andi	r24, 0xFA	; 250
     db2:	80 83       	st	Z, r24
		EncoderMode = CHANSEL;
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     dba:	e0 e0       	ldi	r30, 0x00	; 0
     dbc:	f8 e0       	ldi	r31, 0x08	; 8
     dbe:	80 81       	ld	r24, Z
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	80 83       	st	Z, r24
		break;
     dc4:	08 95       	ret

		case BRIGHTSEL:
		EncoderMode = BRIGHTSEL;
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     dcc:	e0 e0       	ldi	r30, 0x00	; 0
     dce:	f8 e0       	ldi	r31, 0x08	; 8
     dd0:	80 81       	ld	r24, Z
     dd2:	81 60       	ori	r24, 0x01	; 1
     dd4:	80 83       	st	Z, r24
		TCC0_CTRLB |= TC_WGMODE_DS_B_gc;
     dd6:	e1 e0       	ldi	r30, 0x01	; 1
     dd8:	f8 e0       	ldi	r31, 0x08	; 8
     dda:	80 81       	ld	r24, Z
     ddc:	87 60       	ori	r24, 0x07	; 7
     dde:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     de0:	e6 e0       	ldi	r30, 0x06	; 6
     de2:	f8 e0       	ldi	r31, 0x08	; 8
     de4:	80 81       	ld	r24, Z
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     dea:	e7 e0       	ldi	r30, 0x07	; 7
     dec:	f8 e0       	ldi	r31, 0x08	; 8
     dee:	80 81       	ld	r24, Z
     df0:	8a 7f       	andi	r24, 0xFA	; 250
     df2:	80 83       	st	Z, r24
		#define TCC0_PER_BRIGHTNESS (3080 * BRIGHTNESS_DIV)
		TCC0_PER = TCC0_PER_BRIGHTNESS;
     df4:	88 e0       	ldi	r24, 0x08	; 8
     df6:	9c e0       	ldi	r25, 0x0C	; 12
     df8:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     dfc:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = (int)(brightness * BRIGHTNESS_FINAL_DIV);
     e00:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     e04:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     e14:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     e18:	08 95       	ret

00000e1a <_Z12exitEditModev>:
		break;
	}
}

void exitEditMode(){
	setEncMode(OFF);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z10setEncMode11encoderMode>
	currBlinkMaskPtr = NULLBlinkVal;
     e20:	82 e7       	ldi	r24, 0x72	; 114
     e22:	91 e2       	ldi	r25, 0x21	; 33
     e24:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e28:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
	editMode = false;
     e2c:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
	TCD0_PER = BUTTON_DELAY;
     e30:	84 e8       	ldi	r24, 0x84	; 132
     e32:	9e e1       	ldi	r25, 0x1E	; 30
     e34:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e38:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	setPermanentMode(false);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z16setPermanentModeb>
     e42:	08 95       	ret

00000e44 <__vector_79>:
}



//All ISR
ISR(TCD0_CCA_vect){
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	8f 93       	push	r24
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
	#ifdef INVERT_BUTTON
		PORTC_PIN2CTRL |= PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
     e54:	e2 e5       	ldi	r30, 0x52	; 82
     e56:	f6 e0       	ldi	r31, 0x06	; 6
     e58:	80 81       	ld	r24, Z
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	80 83       	st	Z, r24
	#else
		PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
    #endif
	
	TCD0_INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
     e5e:	e7 e0       	ldi	r30, 0x07	; 7
     e60:	f9 e0       	ldi	r31, 0x09	; 9
     e62:	80 81       	ld	r24, Z
     e64:	8e 7f       	andi	r24, 0xFE	; 254
     e66:	80 83       	st	Z, r24
} 
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	8f 91       	pop	r24
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_80>:

ISR(TCD0_CCB_vect){
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	ef 93       	push	r30
     e88:	ff 93       	push	r31
	TCD0_PER = 1000; //Set debounce timer for short press detection
     e8a:	88 ee       	ldi	r24, 0xE8	; 232
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e92:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	longPressDetection = false;
     e96:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
	TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
     e9a:	e7 e0       	ldi	r30, 0x07	; 7
     e9c:	f9 e0       	ldi	r31, 0x09	; 9
     e9e:	80 81       	ld	r24, Z
     ea0:	8b 7f       	andi	r24, 0xFB	; 251
     ea2:	80 83       	st	Z, r24
}
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <_Z21buttonRegularResponsev>:

void buttonRegularResponse(){
	if(!editMode){
     eb6:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     eba:	81 11       	cpse	r24, r1
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <_Z21buttonRegularResponsev+0x26>
		TCD0_PER = 1000; //Set debounce timer for short press detection
     ebe:	88 ee       	ldi	r24, 0xE8	; 232
     ec0:	93 e0       	ldi	r25, 0x03	; 3
     ec2:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     ec6:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
		editMode = true;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <editMode>
		currentSelector = 0;
     ed0:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <currentSelector>
		editCounter = 0;
     ed4:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     ed8:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	}
	if(currentMode == DMX){
     edc:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     ee0:	81 11       	cpse	r24, r1
     ee2:	3c c0       	rjmp	.+120    	; 0xf5c <_Z21buttonRegularResponsev+0xa6>
		switch(currentSelector){
     ee4:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	11 f1       	breq	.+68     	; 0xf30 <_Z21buttonRegularResponsev+0x7a>
     eec:	28 f4       	brcc	.+10     	; 0xef8 <_Z21buttonRegularResponsev+0x42>
     eee:	88 23       	and	r24, r24
     ef0:	41 f0       	breq	.+16     	; 0xf02 <_Z21buttonRegularResponsev+0x4c>
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	81 f0       	breq	.+32     	; 0xf16 <_Z21buttonRegularResponsev+0x60>
     ef6:	32 c0       	rjmp	.+100    	; 0xf5c <_Z21buttonRegularResponsev+0xa6>
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	21 f1       	breq	.+72     	; 0xf44 <_Z21buttonRegularResponsev+0x8e>
     efc:	84 30       	cpi	r24, 0x04	; 4
     efe:	61 f1       	breq	.+88     	; 0xf58 <_Z21buttonRegularResponsev+0xa2>
     f00:	2d c0       	rjmp	.+90     	; 0xf5c <_Z21buttonRegularResponsev+0xa6>
			case 0:
			currBlinkMaskPtr = DMXBlinkVal0;
     f02:	8a ee       	ldi	r24, 0xEA	; 234
     f04:	90 e2       	ldi	r25, 0x20	; 32
     f06:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f0a:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z10setEncMode11encoderMode>
			break;
     f14:	23 c0       	rjmp	.+70     	; 0xf5c <_Z21buttonRegularResponsev+0xa6>
			case 1:
			currBlinkMaskPtr = DMXBlinkVal1;
     f16:	89 ec       	ldi	r24, 0xC9	; 201
     f18:	90 e2       	ldi	r25, 0x20	; 32
     f1a:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f1e:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 100;
     f22:	84 e6       	ldi	r24, 0x64	; 100
     f24:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			setEncMode(CHANSEL);
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z10setEncMode11encoderMode>
			break;
     f2e:	16 c0       	rjmp	.+44     	; 0xf5c <_Z21buttonRegularResponsev+0xa6>
			case 2:
			currBlinkMaskPtr = DMXBlinkVal2;
     f30:	88 ea       	ldi	r24, 0xA8	; 168
     f32:	90 e2       	ldi	r25, 0x20	; 32
     f34:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f38:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 10;
     f3c:	8a e0       	ldi	r24, 0x0A	; 10
     f3e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     f42:	4b c0       	rjmp	.+150    	; 0xfda <_Z21buttonRegularResponsev+0x124>
			case 3:
			currBlinkMaskPtr = DMXBlinkVal3;
     f44:	87 e8       	ldi	r24, 0x87	; 135
     f46:	90 e2       	ldi	r25, 0x20	; 32
     f48:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f4c:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			dmxMult = 1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     f56:	41 c0       	rjmp	.+130    	; 0xfda <_Z21buttonRegularResponsev+0x124>
			case 4:
			exitEditMode();
     f58:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_Z12exitEditModev>
			break;
		}
	}
	if(currentMode == MAN){
     f5c:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	d9 f5       	brne	.+118    	; 0xfda <_Z21buttonRegularResponsev+0x124>
		switch(currentSelector){
     f64:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	71 f0       	breq	.+28     	; 0xf88 <_Z21buttonRegularResponsev+0xd2>
     f6c:	18 f0       	brcs	.+6      	; 0xf74 <_Z21buttonRegularResponsev+0xbe>
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	91 f1       	breq	.+100    	; 0xfd6 <_Z21buttonRegularResponsev+0x120>
     f72:	33 c0       	rjmp	.+102    	; 0xfda <_Z21buttonRegularResponsev+0x124>
			case 0:
			currBlinkMaskPtr = MANBlinkVal0;
     f74:	86 e6       	ldi	r24, 0x66	; 102
     f76:	90 e2       	ldi	r25, 0x20	; 32
     f78:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f7c:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z10setEncMode11encoderMode>
			break;
     f86:	29 c0       	rjmp	.+82     	; 0xfda <_Z21buttonRegularResponsev+0x124>
			case 1:
			TCD0_CNT = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
     f90:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
			TCD0_PER = 46875;
     f94:	8b e1       	ldi	r24, 0x1B	; 27
     f96:	97 eb       	ldi	r25, 0xB7	; 183
     f98:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     f9c:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
			TCD0_CCB = 0;
     fa0:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     fa4:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
			TCD0_INTFLAGS |= (1 << 5); //Clear flag because the timer was just at 0
     fa8:	ec e0       	ldi	r30, 0x0C	; 12
     faa:	f9 e0       	ldi	r31, 0x09	; 9
     fac:	80 81       	ld	r24, Z
     fae:	80 62       	ori	r24, 0x20	; 32
     fb0:	80 83       	st	Z, r24
			longPressDetection = true;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <__data_end>
			TCD0_INTCTRLB |= TC_CCBINTLVL_LO_gc; //When the button is released before the longPress mark, return to normal operation
     fb8:	e7 e0       	ldi	r30, 0x07	; 7
     fba:	f9 e0       	ldi	r31, 0x09	; 9
     fbc:	80 81       	ld	r24, Z
     fbe:	84 60       	ori	r24, 0x04	; 4
     fc0:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal1;
     fc2:	85 e4       	ldi	r24, 0x45	; 69
     fc4:	90 e2       	ldi	r25, 0x20	; 32
     fc6:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     fca:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
			setEncMode(BRIGHTSEL);
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z10setEncMode11encoderMode>
			break;
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <_Z21buttonRegularResponsev+0x124>
			case 2:
			exitEditMode();
     fd6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_Z12exitEditModev>
			break;
		}
	}
	currentSelector++;
     fda:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <currentSelector>
     fe4:	08 95       	ret

00000fe6 <__vector_77>:
}

//PC2 interrupt when button is pressed
ISR(TCD0_OVF_vect){
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
	
	if(longPressDetection){
    1008:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
    100c:	88 23       	and	r24, r24
    100e:	89 f0       	breq	.+34     	; 0x1032 <__vector_77+0x4c>
		setPermanentMode(true);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z16setPermanentModeb>
		
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc;
    1016:	e7 e0       	ldi	r30, 0x07	; 7
    1018:	f9 e0       	ldi	r31, 0x09	; 9
    101a:	80 81       	ld	r24, Z
    101c:	8b 7f       	andi	r24, 0xFB	; 251
    101e:	80 83       	st	Z, r24
		longPressDetection = false;
    1020:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		//Short press detection again
		TCD0_PER = 1000;
    1024:	88 ee       	ldi	r24, 0xE8	; 232
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    102c:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <__vector_77+0x50>
	}
	else{
		buttonRegularResponse();
    1032:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_Z21buttonRegularResponsev>
	}
	if(!longPressDetection){
    1036:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
    103a:	81 11       	cpse	r24, r1
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <__vector_77+0x6c>
		#ifdef INVERT_BUTTON
			PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //Invert button behaviour
    103e:	e2 e5       	ldi	r30, 0x52	; 82
    1040:	f6 e0       	ldi	r31, 0x06	; 6
    1042:	80 81       	ld	r24, Z
    1044:	8f 7b       	andi	r24, 0xBF	; 191
    1046:	80 83       	st	Z, r24
		#else
			PORTC_PIN2CTRL |= PORT_INVEN_bm;
		#endif
		TCD0_INTCTRLB |= TC_CCAINTLVL_LO_gc; //Setup compare interrupt so input will be un-inverted after release
    1048:	e7 e0       	ldi	r30, 0x07	; 7
    104a:	f9 e0       	ldi	r31, 0x09	; 9
    104c:	80 81       	ld	r24, Z
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	80 83       	st	Z, r24
	}
	
}
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	bf 91       	pop	r27
    1058:	af 91       	pop	r26
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	7f 91       	pop	r23
    1060:	6f 91       	pop	r22
    1062:	5f 91       	pop	r21
    1064:	4f 91       	pop	r20
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <__vector_14>:

ISR(TCC0_OVF_vect){
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
	if(!OVF_firstSam){
    1096:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <OVF_firstSam>
    109a:	81 11       	cpse	r24, r1
    109c:	3c c0       	rjmp	.+120    	; 0x1116 <__vector_14+0xa2>
		if(EncoderMode == CHANSEL){
    109e:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	19 f5       	brne	.+70     	; 0x10ec <__vector_14+0x78>
			if(DMXChan - dmxMult >= DMXmin && TCC0_CNT >= TCC0_CNT_CHAN){
    10a6:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    10aa:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    10ae:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    10b2:	82 1b       	sub	r24, r18
    10b4:	91 09       	sbc	r25, r1
    10b6:	18 16       	cp	r1, r24
    10b8:	19 06       	cpc	r1, r25
    10ba:	0c f0       	brlt	.+2      	; 0x10be <__vector_14+0x4a>
    10bc:	4d c0       	rjmp	.+154    	; 0x1158 <__vector_14+0xe4>
    10be:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10c2:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10c6:	80 3a       	cpi	r24, 0xA0	; 160
    10c8:	91 05       	cpc	r25, r1
    10ca:	40 f5       	brcc	.+80     	; 0x111c <__vector_14+0xa8>
    10cc:	45 c0       	rjmp	.+138    	; 0x1158 <__vector_14+0xe4>
				DMXChan -= dmxMult;
				LCD_PRINTDEC(DMXChan, 22, 3);
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
			}
			else if(DMXChan + dmxMult <= DMXMax && TCC0_CNT < TCC0_CNT_CHAN){
    10ce:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10d2:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10d6:	80 3a       	cpi	r24, 0xA0	; 160
    10d8:	91 05       	cpc	r25, r1
    10da:	08 f4       	brcc	.+2      	; 0x10de <__vector_14+0x6a>
    10dc:	4a c0       	rjmp	.+148    	; 0x1172 <__vector_14+0xfe>
				DMXChan += dmxMult;
				LCD_PRINTDEC(DMXChan, 22, 3);
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
			}
			TCC0_CNT = TCC0_CNT_CHAN;
    10de:	80 ea       	ldi	r24, 0xA0	; 160
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10e6:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10ea:	61 c0       	rjmp	.+194    	; 0x11ae <__vector_14+0x13a>
		}
		else{
			
			if(TCC0_CNT < TCC0_CNT_MODE){
    10ec:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    10f0:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    10f4:	80 3a       	cpi	r24, 0xA0	; 160
    10f6:	91 05       	cpc	r25, r1
    10f8:	20 f4       	brcc	.+8      	; 0x1102 <__vector_14+0x8e>
				setMode(DMX);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z7setMode10DMXMANMode>
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <__vector_14+0x94>
			}
			else{
				setMode(MAN);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z7setMode10DMXMANMode>
			}
			TCC0_CNT = TCC0_CNT_MODE;
    1108:	80 ea       	ldi	r24, 0xA0	; 160
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1110:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1114:	4c c0       	rjmp	.+152    	; 0x11ae <__vector_14+0x13a>
		}

	}
	else{
		
		OVF_firstSam = false;
    1116:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <OVF_firstSam>
	}
	
}
    111a:	49 c0       	rjmp	.+146    	; 0x11ae <__vector_14+0x13a>

ISR(TCC0_OVF_vect){
	if(!OVF_firstSam){
		if(EncoderMode == CHANSEL){
			if(DMXChan - dmxMult >= DMXmin && TCC0_CNT >= TCC0_CNT_CHAN){
				DMXChan -= dmxMult;
    111c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1120:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1124:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1128:	82 1b       	sub	r24, r18
    112a:	91 09       	sbc	r25, r1
    112c:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    1130:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    1134:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1138:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    113c:	43 e0       	ldi	r20, 0x03	; 3
    113e:	66 e1       	ldi	r22, 0x16	; 22
    1140:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    1144:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1148:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    114c:	43 e0       	ldi	r20, 0x03	; 3
    114e:	6c e1       	ldi	r22, 0x1C	; 28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12LCD_PRINTDECjhh>
    1156:	c3 cf       	rjmp	.-122    	; 0x10de <__vector_14+0x6a>
			}
			else if(DMXChan + dmxMult <= DMXMax && TCC0_CNT < TCC0_CNT_CHAN){
    1158:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    115c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1160:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1164:	82 0f       	add	r24, r18
    1166:	91 1d       	adc	r25, r1
    1168:	81 15       	cp	r24, r1
    116a:	92 40       	sbci	r25, 0x02	; 2
    116c:	0c f4       	brge	.+2      	; 0x1170 <__vector_14+0xfc>
    116e:	af cf       	rjmp	.-162    	; 0x10ce <__vector_14+0x5a>
    1170:	b6 cf       	rjmp	.-148    	; 0x10de <__vector_14+0x6a>
				DMXChan += dmxMult;
    1172:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1176:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    117a:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    117e:	82 0f       	add	r24, r18
    1180:	91 1d       	adc	r25, r1
    1182:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    1186:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    118a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    118e:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1192:	43 e0       	ldi	r20, 0x03	; 3
    1194:	66 e1       	ldi	r22, 0x16	; 22
    1196:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    119a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    119e:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    11a2:	43 e0       	ldi	r20, 0x03	; 3
    11a4:	6c e1       	ldi	r22, 0x1C	; 28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12LCD_PRINTDECjhh>
    11ac:	98 cf       	rjmp	.-208    	; 0x10de <__vector_14+0x6a>
	else{
		
		OVF_firstSam = false;
	}
	
}
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_10>:

ISR(RTC_OVF_vect){
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	
	if(blinkTimeoutIgnore){
    11f2:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <blinkTimeoutIgnore>
    11f6:	88 23       	and	r24, r24
    11f8:	29 f0       	breq	.+10     	; 0x1204 <__vector_10+0x34>
		editCounter = 0;
    11fa:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
    11fe:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <__vector_10+0x46>
	}
	else
	{
		editCounter++;
    1204:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    1208:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <editCounter>
    1212:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <editCounter+0x1>
	}
	if(editCounter > 15){
    1216:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    121a:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    121e:	40 97       	sbiw	r24, 0x10	; 16
    1220:	48 f0       	brcs	.+18     	; 0x1234 <__vector_10+0x64>
		longPressDetection = false;
    1222:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
    1226:	e7 e0       	ldi	r30, 0x07	; 7
    1228:	f9 e0       	ldi	r31, 0x09	; 9
    122a:	80 81       	ld	r24, Z
    122c:	8b 7f       	andi	r24, 0xFB	; 251
    122e:	80 83       	st	Z, r24
		exitEditMode();
    1230:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_Z12exitEditModev>
	}
}
    1234:	ff 91       	pop	r31
    1236:	ef 91       	pop	r30
    1238:	bf 91       	pop	r27
    123a:	af 91       	pop	r26
    123c:	9f 91       	pop	r25
    123e:	8f 91       	pop	r24
    1240:	7f 91       	pop	r23
    1242:	6f 91       	pop	r22
    1244:	5f 91       	pop	r21
    1246:	4f 91       	pop	r20
    1248:	3f 91       	pop	r19
    124a:	2f 91       	pop	r18
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	0f 90       	pop	r0
    1252:	1f 90       	pop	r1
    1254:	18 95       	reti

00001256 <__vector_88>:

ISR(USARTD0_RXC_vect){//Interrupt for new DMX char
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	0f 92       	push	r0
    125e:	11 24       	eor	r1, r1
    1260:	2f 93       	push	r18
    1262:	3f 93       	push	r19
    1264:	4f 93       	push	r20
    1266:	5f 93       	push	r21
    1268:	6f 93       	push	r22
    126a:	7f 93       	push	r23
    126c:	8f 93       	push	r24
    126e:	9f 93       	push	r25
    1270:	af 93       	push	r26
    1272:	bf 93       	push	r27
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
	uint16_t USART_data = USARTD0_DATA;
    1278:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    127c:	30 e0       	ldi	r19, 0x00	; 0
	if(cnt == DMXChan){//If DMX channel matches the set DMX channel
    127e:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    1282:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    1286:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    128a:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    128e:	48 17       	cp	r20, r24
    1290:	59 07       	cpc	r21, r25
    1292:	31 f4       	brne	.+12     	; 0x12a0 <__vector_88+0x4a>
		finalRes = USART_data << 8; //Buffer 8 MSB
    1294:	92 2f       	mov	r25, r18
    1296:	88 27       	eor	r24, r24
    1298:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    129c:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		//LCD_PRINTDEC(USART_data, 16, 5);
	}
	if(cnt == DMXChan + 1){//If DMX channel matches the set DMX channel + 1
    12a0:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    12a4:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    12a8:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    12ac:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	84 17       	cp	r24, r20
    12b4:	95 07       	cpc	r25, r21
    12b6:	a9 f4       	brne	.+42     	; 0x12e2 <__vector_88+0x8c>
		//LCD_PRINTDEC(USART_data, 0, 5);
		finalRes |= USART_data; //Buffer LSB
    12b8:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    12bc:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    12c0:	82 2b       	or	r24, r18
    12c2:	93 2b       	or	r25, r19
    12c4:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    12c8:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		TCE0_CCABUF = finalRes; //Set compare register for PWM
    12cc:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    12d0:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    12d4:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
    12d8:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
		
		lt = true;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
	}

	if(DMXErrFlag){
    12e2:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    12e6:	88 23       	and	r24, r24
    12e8:	59 f0       	breq	.+22     	; 0x1300 <__vector_88+0xaa>
		lt = true;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
		if(cnt == 0 && USART_data == 0){
    12f0:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    12f4:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    12f8:	89 2b       	or	r24, r25
    12fa:	11 f4       	brne	.+4      	; 0x1300 <__vector_88+0xaa>
    12fc:	23 2b       	or	r18, r19
    12fe:	71 f0       	breq	.+28     	; 0x131c <__vector_88+0xc6>
			DMXErrFlag = false;
			LCD_PRINT("      ", 10);
			lt = true;
		}
	}
	DMXErrCnt = 0;
    1300:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    1304:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	cnt++;//Increment channel counter
    1308:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    130c:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <cnt>
    1316:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <cnt+0x1>
}
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <__vector_88+0xdc>
	}

	if(DMXErrFlag){
		lt = true;
		if(cnt == 0 && USART_data == 0){
			DMXErrFlag = false;
    131c:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <DMXErrFlag>
			LCD_PRINT("      ", 10);
    1320:	6a e0       	ldi	r22, 0x0A	; 10
    1322:	8d e0       	ldi	r24, 0x0D	; 13
    1324:	91 e2       	ldi	r25, 0x21	; 33
    1326:	0e 94 6c 05 	call	0xad8	; 0xad8 <_Z9LCD_PRINTPch>
			lt = true;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
    1330:	e7 cf       	rjmp	.-50     	; 0x1300 <__vector_88+0xaa>
		}
	}
	DMXErrCnt = 0;
	cnt++;//Increment channel counter
}
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <__vector_20>:

ISR(TCC1_OVF_vect){
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	cf 93       	push	r28
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
	cnt = 0; //Reset counter if there hasn't been any signal change in 1196 us on the DMX line (PD2)
    1378:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <cnt>
    137c:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <cnt+0x1>
	DMXErrCnt++;
    1380:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    1384:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <DMXErrCnt>
    138e:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <DMXErrCnt+0x1>
	if((DMXErrCnt > 836) && !DMXErrFlag){ //If there hasn't been any change in 1 second
    1392:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    1396:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    139a:	85 34       	cpi	r24, 0x45	; 69
    139c:	93 40       	sbci	r25, 0x03	; 3
    139e:	90 f0       	brcs	.+36     	; 0x13c4 <__vector_20+0x70>
    13a0:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    13a4:	81 11       	cpse	r24, r1
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <__vector_20+0x70>
		DMXErrFlag = true;
    13a8:	c1 e0       	ldi	r28, 0x01	; 1
    13aa:	c0 93 25 21 	sts	0x2125, r28	; 0x802125 <DMXErrFlag>
		LCD_PRINT("NO DMX", 10);
    13ae:	6a e0       	ldi	r22, 0x0A	; 10
    13b0:	84 e1       	ldi	r24, 0x14	; 20
    13b2:	91 e2       	ldi	r25, 0x21	; 33
    13b4:	0e 94 6c 05 	call	0xad8	; 0xad8 <_Z9LCD_PRINTPch>
		lt = true;
    13b8:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
		DMXErrCnt = 0;
    13bc:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    13c0:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	}
	
}
    13c4:	ff 91       	pop	r31
    13c6:	ef 91       	pop	r30
    13c8:	cf 91       	pop	r28
    13ca:	bf 91       	pop	r27
    13cc:	af 91       	pop	r26
    13ce:	9f 91       	pop	r25
    13d0:	8f 91       	pop	r24
    13d2:	7f 91       	pop	r23
    13d4:	6f 91       	pop	r22
    13d6:	5f 91       	pop	r21
    13d8:	4f 91       	pop	r20
    13da:	3f 91       	pop	r19
    13dc:	2f 91       	pop	r18
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <main>:

int main(void)
{
	PORTA_DIRSET = (1 << 1);
    13e8:	0f 2e       	mov	r0, r31
    13ea:	cc 24       	eor	r12, r12
    13ec:	c3 94       	inc	r12
    13ee:	f6 e0       	ldi	r31, 0x06	; 6
    13f0:	df 2e       	mov	r13, r31
    13f2:	f0 2d       	mov	r31, r0
    13f4:	c2 e0       	ldi	r28, 0x02	; 2
    13f6:	f6 01       	movw	r30, r12
    13f8:	c0 83       	st	Z, r28

	PORTA_OUTSET = (1 << 1);
    13fa:	0f 2e       	mov	r0, r31
    13fc:	f5 e0       	ldi	r31, 0x05	; 5
    13fe:	ef 2e       	mov	r14, r31
    1400:	f6 e0       	ldi	r31, 0x06	; 6
    1402:	ff 2e       	mov	r15, r31
    1404:	f0 2d       	mov	r31, r0
    1406:	f7 01       	movw	r30, r14
    1408:	c0 83       	st	Z, r28
    140a:	fa e6       	ldi	r31, 0x6A	; 106
    140c:	fa 95       	dec	r31
    140e:	f1 f7       	brne	.-4      	; 0x140c <main+0x24>
    1410:	00 c0       	rjmp	.+0      	; 0x1412 <main+0x2a>
	_delay_us(10);
	PORTA_OUTCLR = (1 << 1);
    1412:	06 e0       	ldi	r16, 0x06	; 6
    1414:	16 e0       	ldi	r17, 0x06	; 6
    1416:	f8 01       	movw	r30, r16
    1418:	c0 83       	st	Z, r28
    141a:	fa e6       	ldi	r31, 0x6A	; 106
    141c:	fa 95       	dec	r31
    141e:	f1 f7       	brne	.-4      	; 0x141c <main+0x34>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <main+0x3a>
	_delay_us(10);
	PORTA_OUTSET = (1 << 1);
    1422:	f7 01       	movw	r30, r14
    1424:	c0 83       	st	Z, r28
    1426:	fa e6       	ldi	r31, 0x6A	; 106
    1428:	fa 95       	dec	r31
    142a:	f1 f7       	brne	.-4      	; 0x1428 <main+0x40>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <main+0x46>
	_delay_us(10);
	PORTA_OUTCLR = (1 << 1);
    142e:	f8 01       	movw	r30, r16
    1430:	c0 83       	st	Z, r28
    1432:	fa e6       	ldi	r31, 0x6A	; 106
    1434:	fa 95       	dec	r31
    1436:	f1 f7       	brne	.-4      	; 0x1434 <main+0x4c>
    1438:	00 c0       	rjmp	.+0      	; 0x143a <main+0x52>
	_delay_us(10);
	PORTA_OUTSET = (1 << 1);
    143a:	f7 01       	movw	r30, r14
    143c:	c0 83       	st	Z, r28
    143e:	fa e6       	ldi	r31, 0x6A	; 106
    1440:	fa 95       	dec	r31
    1442:	f1 f7       	brne	.-4      	; 0x1440 <main+0x58>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <main+0x5e>
	_delay_us(10);
	PORTA_OUTCLR = (1 << 1);
    1446:	f8 01       	movw	r30, r16
    1448:	c0 83       	st	Z, r28

	PORTC_DIRSET = (1 << MOSI_PIN) | (1 << SS_PIN) | (1 << SCK_PIN) | (1 << RS_PIN); //Set all pins used for communication to output
    144a:	88 eb       	ldi	r24, 0xB8	; 184
    144c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	clk_set_32MHz();
    1450:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z13clk_set_32MHzv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1454:	ff ef       	ldi	r31, 0xFF	; 255
    1456:	25 ed       	ldi	r18, 0xD5	; 213
    1458:	86 e0       	ldi	r24, 0x06	; 6
    145a:	f1 50       	subi	r31, 0x01	; 1
    145c:	20 40       	sbci	r18, 0x00	; 0
    145e:	80 40       	sbci	r24, 0x00	; 0
    1460:	e1 f7       	brne	.-8      	; 0x145a <main+0x72>
    1462:	00 c0       	rjmp	.+0      	; 0x1464 <main+0x7c>
    1464:	00 00       	nop
	_delay_ms(70);
	update_RAM_EEPROM();
    1466:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_Z17update_RAM_EEPROMv>
    setup_SPI();
    146a:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z9setup_SPIv>
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	e3 ec       	ldi	r30, 0xC3	; 195
    1472:	f9 e0       	ldi	r31, 0x09	; 9
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	e0 40       	sbci	r30, 0x00	; 0
    1478:	f0 40       	sbci	r31, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <main+0x8c>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <main+0x96>
    147e:	00 00       	nop
    _delay_ms(100);
    setup_disp();
    1480:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z10setup_dispv>
	setup_btn();
    1484:	0e 94 b0 01 	call	0x360	; 0x360 <_Z9setup_btnv>
	QDEC_INIT();
    1488:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z9QDEC_INITv>
	setup_blink();
    148c:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z11setup_blinkv>
	DMX_init();
    1490:	0e 94 21 02 	call	0x442	; 0x442 <_Z8DMX_initv>
	updateDisp();
    1494:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z10updateDispv>
	setup_int();
    1498:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z9setup_intv>
	setup_PWM();
    149c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z9setup_PWMv>

	PORTA_DIRSET = (1 << 1);
    14a0:	f6 01       	movw	r30, r12
    14a2:	c0 83       	st	Z, r28
	PORTA_OUTSET = (1 << 1);
    14a4:	f7 01       	movw	r30, r14
    14a6:	c0 83       	st	Z, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14a8:	fa e6       	ldi	r31, 0x6A	; 106
    14aa:	fa 95       	dec	r31
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <main+0xc2>
    14ae:	00 c0       	rjmp	.+0      	; 0x14b0 <main+0xc8>
	_delay_us(10);
	PORTA_OUTCLR = (1 << 1);
    14b0:	f8 01       	movw	r30, r16
    14b2:	c0 83       	st	Z, r28
		if(editMode){ //If the display is in edit mode update the display
			if(EncoderMode == BRIGHTSEL){
				updateBrightness();
			}
			updateDisp();
			lt = true;
    14b4:	c1 e0       	ldi	r28, 0x01	; 1
	PORTA_OUTCLR = (1 << 1);


    while (1) 
    {
		if(editMode){ //If the display is in edit mode update the display
    14b6:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
    14ba:	88 23       	and	r24, r24
    14bc:	59 f0       	breq	.+22     	; 0x14d4 <main+0xec>
			if(EncoderMode == BRIGHTSEL){
    14be:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	11 f4       	brne	.+4      	; 0x14ca <main+0xe2>
				updateBrightness();
    14c6:	0e 94 b2 05 	call	0xb64	; 0xb64 <_Z16updateBrightnessv>
			}
			updateDisp();
    14ca:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z10updateDispv>
			lt = true;
    14ce:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
    14d2:	08 c0       	rjmp	.+16     	; 0x14e4 <main+0xfc>
		}
		else{ 
			if (lt) //If lt is altered by another factor update the display as well
    14d4:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <lt>
    14d8:	88 23       	and	r24, r24
    14da:	21 f0       	breq	.+8      	; 0x14e4 <main+0xfc>
			{
				updateDisp();
    14dc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z10updateDispv>
				lt = false;
    14e0:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <lt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14e4:	ff ef       	ldi	r31, 0xFF	; 255
    14e6:	23 ef       	ldi	r18, 0xF3	; 243
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	f1 50       	subi	r31, 0x01	; 1
    14ec:	20 40       	sbci	r18, 0x00	; 0
    14ee:	80 40       	sbci	r24, 0x00	; 0
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <main+0x102>
    14f2:	00 c0       	rjmp	.+0      	; 0x14f4 <main+0x10c>
    14f4:	00 00       	nop
    14f6:	df cf       	rjmp	.-66     	; 0x14b6 <main+0xce>

000014f8 <__divsf3>:
    14f8:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divsf3x>
    14fc:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__fp_round>
    1500:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__fp_pscB>
    1504:	58 f0       	brcs	.+22     	; 0x151c <__divsf3+0x24>
    1506:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_pscA>
    150a:	40 f0       	brcs	.+16     	; 0x151c <__divsf3+0x24>
    150c:	29 f4       	brne	.+10     	; 0x1518 <__divsf3+0x20>
    150e:	5f 3f       	cpi	r21, 0xFF	; 255
    1510:	29 f0       	breq	.+10     	; 0x151c <__divsf3+0x24>
    1512:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__fp_inf>
    1516:	51 11       	cpse	r21, r1
    1518:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_szero>
    151c:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_nan>

00001520 <__divsf3x>:
    1520:	0e 94 82 0b 	call	0x1704	; 0x1704 <__fp_split3>
    1524:	68 f3       	brcs	.-38     	; 0x1500 <__divsf3+0x8>

00001526 <__divsf3_pse>:
    1526:	99 23       	and	r25, r25
    1528:	b1 f3       	breq	.-20     	; 0x1516 <__divsf3+0x1e>
    152a:	55 23       	and	r21, r21
    152c:	91 f3       	breq	.-28     	; 0x1512 <__divsf3+0x1a>
    152e:	95 1b       	sub	r25, r21
    1530:	55 0b       	sbc	r21, r21
    1532:	bb 27       	eor	r27, r27
    1534:	aa 27       	eor	r26, r26
    1536:	62 17       	cp	r22, r18
    1538:	73 07       	cpc	r23, r19
    153a:	84 07       	cpc	r24, r20
    153c:	38 f0       	brcs	.+14     	; 0x154c <__divsf3_pse+0x26>
    153e:	9f 5f       	subi	r25, 0xFF	; 255
    1540:	5f 4f       	sbci	r21, 0xFF	; 255
    1542:	22 0f       	add	r18, r18
    1544:	33 1f       	adc	r19, r19
    1546:	44 1f       	adc	r20, r20
    1548:	aa 1f       	adc	r26, r26
    154a:	a9 f3       	breq	.-22     	; 0x1536 <__divsf3_pse+0x10>
    154c:	35 d0       	rcall	.+106    	; 0x15b8 <__divsf3_pse+0x92>
    154e:	0e 2e       	mov	r0, r30
    1550:	3a f0       	brmi	.+14     	; 0x1560 <__divsf3_pse+0x3a>
    1552:	e0 e8       	ldi	r30, 0x80	; 128
    1554:	32 d0       	rcall	.+100    	; 0x15ba <__divsf3_pse+0x94>
    1556:	91 50       	subi	r25, 0x01	; 1
    1558:	50 40       	sbci	r21, 0x00	; 0
    155a:	e6 95       	lsr	r30
    155c:	00 1c       	adc	r0, r0
    155e:	ca f7       	brpl	.-14     	; 0x1552 <__divsf3_pse+0x2c>
    1560:	2b d0       	rcall	.+86     	; 0x15b8 <__divsf3_pse+0x92>
    1562:	fe 2f       	mov	r31, r30
    1564:	29 d0       	rcall	.+82     	; 0x15b8 <__divsf3_pse+0x92>
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	bb 1f       	adc	r27, r27
    156e:	26 17       	cp	r18, r22
    1570:	37 07       	cpc	r19, r23
    1572:	48 07       	cpc	r20, r24
    1574:	ab 07       	cpc	r26, r27
    1576:	b0 e8       	ldi	r27, 0x80	; 128
    1578:	09 f0       	breq	.+2      	; 0x157c <__divsf3_pse+0x56>
    157a:	bb 0b       	sbc	r27, r27
    157c:	80 2d       	mov	r24, r0
    157e:	bf 01       	movw	r22, r30
    1580:	ff 27       	eor	r31, r31
    1582:	93 58       	subi	r25, 0x83	; 131
    1584:	5f 4f       	sbci	r21, 0xFF	; 255
    1586:	3a f0       	brmi	.+14     	; 0x1596 <__divsf3_pse+0x70>
    1588:	9e 3f       	cpi	r25, 0xFE	; 254
    158a:	51 05       	cpc	r21, r1
    158c:	78 f0       	brcs	.+30     	; 0x15ac <__divsf3_pse+0x86>
    158e:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__fp_inf>
    1592:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_szero>
    1596:	5f 3f       	cpi	r21, 0xFF	; 255
    1598:	e4 f3       	brlt	.-8      	; 0x1592 <__divsf3_pse+0x6c>
    159a:	98 3e       	cpi	r25, 0xE8	; 232
    159c:	d4 f3       	brlt	.-12     	; 0x1592 <__divsf3_pse+0x6c>
    159e:	86 95       	lsr	r24
    15a0:	77 95       	ror	r23
    15a2:	67 95       	ror	r22
    15a4:	b7 95       	ror	r27
    15a6:	f7 95       	ror	r31
    15a8:	9f 5f       	subi	r25, 0xFF	; 255
    15aa:	c9 f7       	brne	.-14     	; 0x159e <__divsf3_pse+0x78>
    15ac:	88 0f       	add	r24, r24
    15ae:	91 1d       	adc	r25, r1
    15b0:	96 95       	lsr	r25
    15b2:	87 95       	ror	r24
    15b4:	97 f9       	bld	r25, 7
    15b6:	08 95       	ret
    15b8:	e1 e0       	ldi	r30, 0x01	; 1
    15ba:	66 0f       	add	r22, r22
    15bc:	77 1f       	adc	r23, r23
    15be:	88 1f       	adc	r24, r24
    15c0:	bb 1f       	adc	r27, r27
    15c2:	62 17       	cp	r22, r18
    15c4:	73 07       	cpc	r23, r19
    15c6:	84 07       	cpc	r24, r20
    15c8:	ba 07       	cpc	r27, r26
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <__divsf3_pse+0xae>
    15cc:	62 1b       	sub	r22, r18
    15ce:	73 0b       	sbc	r23, r19
    15d0:	84 0b       	sbc	r24, r20
    15d2:	ba 0b       	sbc	r27, r26
    15d4:	ee 1f       	adc	r30, r30
    15d6:	88 f7       	brcc	.-30     	; 0x15ba <__divsf3_pse+0x94>
    15d8:	e0 95       	com	r30
    15da:	08 95       	ret

000015dc <__fixunssfsi>:
    15dc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__fp_splitA>
    15e0:	88 f0       	brcs	.+34     	; 0x1604 <__fixunssfsi+0x28>
    15e2:	9f 57       	subi	r25, 0x7F	; 127
    15e4:	98 f0       	brcs	.+38     	; 0x160c <__fixunssfsi+0x30>
    15e6:	b9 2f       	mov	r27, r25
    15e8:	99 27       	eor	r25, r25
    15ea:	b7 51       	subi	r27, 0x17	; 23
    15ec:	b0 f0       	brcs	.+44     	; 0x161a <__fixunssfsi+0x3e>
    15ee:	e1 f0       	breq	.+56     	; 0x1628 <__fixunssfsi+0x4c>
    15f0:	66 0f       	add	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	88 1f       	adc	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	1a f0       	brmi	.+6      	; 0x1600 <__fixunssfsi+0x24>
    15fa:	ba 95       	dec	r27
    15fc:	c9 f7       	brne	.-14     	; 0x15f0 <__fixunssfsi+0x14>
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <__fixunssfsi+0x4c>
    1600:	b1 30       	cpi	r27, 0x01	; 1
    1602:	91 f0       	breq	.+36     	; 0x1628 <__fixunssfsi+0x4c>
    1604:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fp_zero>
    1608:	b1 e0       	ldi	r27, 0x01	; 1
    160a:	08 95       	ret
    160c:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__fp_zero>
    1610:	67 2f       	mov	r22, r23
    1612:	78 2f       	mov	r23, r24
    1614:	88 27       	eor	r24, r24
    1616:	b8 5f       	subi	r27, 0xF8	; 248
    1618:	39 f0       	breq	.+14     	; 0x1628 <__fixunssfsi+0x4c>
    161a:	b9 3f       	cpi	r27, 0xF9	; 249
    161c:	cc f3       	brlt	.-14     	; 0x1610 <__fixunssfsi+0x34>
    161e:	86 95       	lsr	r24
    1620:	77 95       	ror	r23
    1622:	67 95       	ror	r22
    1624:	b3 95       	inc	r27
    1626:	d9 f7       	brne	.-10     	; 0x161e <__fixunssfsi+0x42>
    1628:	3e f4       	brtc	.+14     	; 0x1638 <__fixunssfsi+0x5c>
    162a:	90 95       	com	r25
    162c:	80 95       	com	r24
    162e:	70 95       	com	r23
    1630:	61 95       	neg	r22
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	8f 4f       	sbci	r24, 0xFF	; 255
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	08 95       	ret

0000163a <__floatunsisf>:
    163a:	e8 94       	clt
    163c:	09 c0       	rjmp	.+18     	; 0x1650 <__floatsisf+0x12>

0000163e <__floatsisf>:
    163e:	97 fb       	bst	r25, 7
    1640:	3e f4       	brtc	.+14     	; 0x1650 <__floatsisf+0x12>
    1642:	90 95       	com	r25
    1644:	80 95       	com	r24
    1646:	70 95       	com	r23
    1648:	61 95       	neg	r22
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	99 23       	and	r25, r25
    1652:	a9 f0       	breq	.+42     	; 0x167e <__floatsisf+0x40>
    1654:	f9 2f       	mov	r31, r25
    1656:	96 e9       	ldi	r25, 0x96	; 150
    1658:	bb 27       	eor	r27, r27
    165a:	93 95       	inc	r25
    165c:	f6 95       	lsr	r31
    165e:	87 95       	ror	r24
    1660:	77 95       	ror	r23
    1662:	67 95       	ror	r22
    1664:	b7 95       	ror	r27
    1666:	f1 11       	cpse	r31, r1
    1668:	f8 cf       	rjmp	.-16     	; 0x165a <__floatsisf+0x1c>
    166a:	fa f4       	brpl	.+62     	; 0x16aa <__floatsisf+0x6c>
    166c:	bb 0f       	add	r27, r27
    166e:	11 f4       	brne	.+4      	; 0x1674 <__floatsisf+0x36>
    1670:	60 ff       	sbrs	r22, 0
    1672:	1b c0       	rjmp	.+54     	; 0x16aa <__floatsisf+0x6c>
    1674:	6f 5f       	subi	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	16 c0       	rjmp	.+44     	; 0x16aa <__floatsisf+0x6c>
    167e:	88 23       	and	r24, r24
    1680:	11 f0       	breq	.+4      	; 0x1686 <__floatsisf+0x48>
    1682:	96 e9       	ldi	r25, 0x96	; 150
    1684:	11 c0       	rjmp	.+34     	; 0x16a8 <__floatsisf+0x6a>
    1686:	77 23       	and	r23, r23
    1688:	21 f0       	breq	.+8      	; 0x1692 <__floatsisf+0x54>
    168a:	9e e8       	ldi	r25, 0x8E	; 142
    168c:	87 2f       	mov	r24, r23
    168e:	76 2f       	mov	r23, r22
    1690:	05 c0       	rjmp	.+10     	; 0x169c <__floatsisf+0x5e>
    1692:	66 23       	and	r22, r22
    1694:	71 f0       	breq	.+28     	; 0x16b2 <__floatsisf+0x74>
    1696:	96 e8       	ldi	r25, 0x86	; 134
    1698:	86 2f       	mov	r24, r22
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	2a f0       	brmi	.+10     	; 0x16aa <__floatsisf+0x6c>
    16a0:	9a 95       	dec	r25
    16a2:	66 0f       	add	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	da f7       	brpl	.-10     	; 0x16a0 <__floatsisf+0x62>
    16aa:	88 0f       	add	r24, r24
    16ac:	96 95       	lsr	r25
    16ae:	87 95       	ror	r24
    16b0:	97 f9       	bld	r25, 7
    16b2:	08 95       	ret

000016b4 <__fp_inf>:
    16b4:	97 f9       	bld	r25, 7
    16b6:	9f 67       	ori	r25, 0x7F	; 127
    16b8:	80 e8       	ldi	r24, 0x80	; 128
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	08 95       	ret

000016c0 <__fp_nan>:
    16c0:	9f ef       	ldi	r25, 0xFF	; 255
    16c2:	80 ec       	ldi	r24, 0xC0	; 192
    16c4:	08 95       	ret

000016c6 <__fp_pscA>:
    16c6:	00 24       	eor	r0, r0
    16c8:	0a 94       	dec	r0
    16ca:	16 16       	cp	r1, r22
    16cc:	17 06       	cpc	r1, r23
    16ce:	18 06       	cpc	r1, r24
    16d0:	09 06       	cpc	r0, r25
    16d2:	08 95       	ret

000016d4 <__fp_pscB>:
    16d4:	00 24       	eor	r0, r0
    16d6:	0a 94       	dec	r0
    16d8:	12 16       	cp	r1, r18
    16da:	13 06       	cpc	r1, r19
    16dc:	14 06       	cpc	r1, r20
    16de:	05 06       	cpc	r0, r21
    16e0:	08 95       	ret

000016e2 <__fp_round>:
    16e2:	09 2e       	mov	r0, r25
    16e4:	03 94       	inc	r0
    16e6:	00 0c       	add	r0, r0
    16e8:	11 f4       	brne	.+4      	; 0x16ee <__fp_round+0xc>
    16ea:	88 23       	and	r24, r24
    16ec:	52 f0       	brmi	.+20     	; 0x1702 <__fp_round+0x20>
    16ee:	bb 0f       	add	r27, r27
    16f0:	40 f4       	brcc	.+16     	; 0x1702 <__fp_round+0x20>
    16f2:	bf 2b       	or	r27, r31
    16f4:	11 f4       	brne	.+4      	; 0x16fa <__fp_round+0x18>
    16f6:	60 ff       	sbrs	r22, 0
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__fp_round+0x20>
    16fa:	6f 5f       	subi	r22, 0xFF	; 255
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	08 95       	ret

00001704 <__fp_split3>:
    1704:	57 fd       	sbrc	r21, 7
    1706:	90 58       	subi	r25, 0x80	; 128
    1708:	44 0f       	add	r20, r20
    170a:	55 1f       	adc	r21, r21
    170c:	59 f0       	breq	.+22     	; 0x1724 <__fp_splitA+0x10>
    170e:	5f 3f       	cpi	r21, 0xFF	; 255
    1710:	71 f0       	breq	.+28     	; 0x172e <__fp_splitA+0x1a>
    1712:	47 95       	ror	r20

00001714 <__fp_splitA>:
    1714:	88 0f       	add	r24, r24
    1716:	97 fb       	bst	r25, 7
    1718:	99 1f       	adc	r25, r25
    171a:	61 f0       	breq	.+24     	; 0x1734 <__fp_splitA+0x20>
    171c:	9f 3f       	cpi	r25, 0xFF	; 255
    171e:	79 f0       	breq	.+30     	; 0x173e <__fp_splitA+0x2a>
    1720:	87 95       	ror	r24
    1722:	08 95       	ret
    1724:	12 16       	cp	r1, r18
    1726:	13 06       	cpc	r1, r19
    1728:	14 06       	cpc	r1, r20
    172a:	55 1f       	adc	r21, r21
    172c:	f2 cf       	rjmp	.-28     	; 0x1712 <__fp_split3+0xe>
    172e:	46 95       	lsr	r20
    1730:	f1 df       	rcall	.-30     	; 0x1714 <__fp_splitA>
    1732:	08 c0       	rjmp	.+16     	; 0x1744 <__fp_splitA+0x30>
    1734:	16 16       	cp	r1, r22
    1736:	17 06       	cpc	r1, r23
    1738:	18 06       	cpc	r1, r24
    173a:	99 1f       	adc	r25, r25
    173c:	f1 cf       	rjmp	.-30     	; 0x1720 <__fp_splitA+0xc>
    173e:	86 95       	lsr	r24
    1740:	71 05       	cpc	r23, r1
    1742:	61 05       	cpc	r22, r1
    1744:	08 94       	sec
    1746:	08 95       	ret

00001748 <__fp_zero>:
    1748:	e8 94       	clt

0000174a <__fp_szero>:
    174a:	bb 27       	eor	r27, r27
    174c:	66 27       	eor	r22, r22
    174e:	77 27       	eor	r23, r23
    1750:	cb 01       	movw	r24, r22
    1752:	97 f9       	bld	r25, 7
    1754:	08 95       	ret

00001756 <__gesf2>:
    1756:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fp_cmp>
    175a:	08 f4       	brcc	.+2      	; 0x175e <__gesf2+0x8>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	08 95       	ret

00001760 <__mulsf3>:
    1760:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3x>
    1764:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__fp_round>
    1768:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_pscA>
    176c:	38 f0       	brcs	.+14     	; 0x177c <__mulsf3+0x1c>
    176e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__fp_pscB>
    1772:	20 f0       	brcs	.+8      	; 0x177c <__mulsf3+0x1c>
    1774:	95 23       	and	r25, r21
    1776:	11 f0       	breq	.+4      	; 0x177c <__mulsf3+0x1c>
    1778:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__fp_inf>
    177c:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_nan>
    1780:	11 24       	eor	r1, r1
    1782:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_szero>

00001786 <__mulsf3x>:
    1786:	0e 94 82 0b 	call	0x1704	; 0x1704 <__fp_split3>
    178a:	70 f3       	brcs	.-36     	; 0x1768 <__mulsf3+0x8>

0000178c <__mulsf3_pse>:
    178c:	95 9f       	mul	r25, r21
    178e:	c1 f3       	breq	.-16     	; 0x1780 <__mulsf3+0x20>
    1790:	95 0f       	add	r25, r21
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	55 1f       	adc	r21, r21
    1796:	62 9f       	mul	r22, r18
    1798:	f0 01       	movw	r30, r0
    179a:	72 9f       	mul	r23, r18
    179c:	bb 27       	eor	r27, r27
    179e:	f0 0d       	add	r31, r0
    17a0:	b1 1d       	adc	r27, r1
    17a2:	63 9f       	mul	r22, r19
    17a4:	aa 27       	eor	r26, r26
    17a6:	f0 0d       	add	r31, r0
    17a8:	b1 1d       	adc	r27, r1
    17aa:	aa 1f       	adc	r26, r26
    17ac:	64 9f       	mul	r22, r20
    17ae:	66 27       	eor	r22, r22
    17b0:	b0 0d       	add	r27, r0
    17b2:	a1 1d       	adc	r26, r1
    17b4:	66 1f       	adc	r22, r22
    17b6:	82 9f       	mul	r24, r18
    17b8:	22 27       	eor	r18, r18
    17ba:	b0 0d       	add	r27, r0
    17bc:	a1 1d       	adc	r26, r1
    17be:	62 1f       	adc	r22, r18
    17c0:	73 9f       	mul	r23, r19
    17c2:	b0 0d       	add	r27, r0
    17c4:	a1 1d       	adc	r26, r1
    17c6:	62 1f       	adc	r22, r18
    17c8:	83 9f       	mul	r24, r19
    17ca:	a0 0d       	add	r26, r0
    17cc:	61 1d       	adc	r22, r1
    17ce:	22 1f       	adc	r18, r18
    17d0:	74 9f       	mul	r23, r20
    17d2:	33 27       	eor	r19, r19
    17d4:	a0 0d       	add	r26, r0
    17d6:	61 1d       	adc	r22, r1
    17d8:	23 1f       	adc	r18, r19
    17da:	84 9f       	mul	r24, r20
    17dc:	60 0d       	add	r22, r0
    17de:	21 1d       	adc	r18, r1
    17e0:	82 2f       	mov	r24, r18
    17e2:	76 2f       	mov	r23, r22
    17e4:	6a 2f       	mov	r22, r26
    17e6:	11 24       	eor	r1, r1
    17e8:	9f 57       	subi	r25, 0x7F	; 127
    17ea:	50 40       	sbci	r21, 0x00	; 0
    17ec:	9a f0       	brmi	.+38     	; 0x1814 <__mulsf3_pse+0x88>
    17ee:	f1 f0       	breq	.+60     	; 0x182c <__mulsf3_pse+0xa0>
    17f0:	88 23       	and	r24, r24
    17f2:	4a f0       	brmi	.+18     	; 0x1806 <__mulsf3_pse+0x7a>
    17f4:	ee 0f       	add	r30, r30
    17f6:	ff 1f       	adc	r31, r31
    17f8:	bb 1f       	adc	r27, r27
    17fa:	66 1f       	adc	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	88 1f       	adc	r24, r24
    1800:	91 50       	subi	r25, 0x01	; 1
    1802:	50 40       	sbci	r21, 0x00	; 0
    1804:	a9 f7       	brne	.-22     	; 0x17f0 <__mulsf3_pse+0x64>
    1806:	9e 3f       	cpi	r25, 0xFE	; 254
    1808:	51 05       	cpc	r21, r1
    180a:	80 f0       	brcs	.+32     	; 0x182c <__mulsf3_pse+0xa0>
    180c:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__fp_inf>
    1810:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_szero>
    1814:	5f 3f       	cpi	r21, 0xFF	; 255
    1816:	e4 f3       	brlt	.-8      	; 0x1810 <__mulsf3_pse+0x84>
    1818:	98 3e       	cpi	r25, 0xE8	; 232
    181a:	d4 f3       	brlt	.-12     	; 0x1810 <__mulsf3_pse+0x84>
    181c:	86 95       	lsr	r24
    181e:	77 95       	ror	r23
    1820:	67 95       	ror	r22
    1822:	b7 95       	ror	r27
    1824:	f7 95       	ror	r31
    1826:	e7 95       	ror	r30
    1828:	9f 5f       	subi	r25, 0xFF	; 255
    182a:	c1 f7       	brne	.-16     	; 0x181c <__mulsf3_pse+0x90>
    182c:	fe 2b       	or	r31, r30
    182e:	88 0f       	add	r24, r24
    1830:	91 1d       	adc	r25, r1
    1832:	96 95       	lsr	r25
    1834:	87 95       	ror	r24
    1836:	97 f9       	bld	r25, 7
    1838:	08 95       	ret

0000183a <__fp_cmp>:
    183a:	99 0f       	add	r25, r25
    183c:	00 08       	sbc	r0, r0
    183e:	55 0f       	add	r21, r21
    1840:	aa 0b       	sbc	r26, r26
    1842:	e0 e8       	ldi	r30, 0x80	; 128
    1844:	fe ef       	ldi	r31, 0xFE	; 254
    1846:	16 16       	cp	r1, r22
    1848:	17 06       	cpc	r1, r23
    184a:	e8 07       	cpc	r30, r24
    184c:	f9 07       	cpc	r31, r25
    184e:	c0 f0       	brcs	.+48     	; 0x1880 <__fp_cmp+0x46>
    1850:	12 16       	cp	r1, r18
    1852:	13 06       	cpc	r1, r19
    1854:	e4 07       	cpc	r30, r20
    1856:	f5 07       	cpc	r31, r21
    1858:	98 f0       	brcs	.+38     	; 0x1880 <__fp_cmp+0x46>
    185a:	62 1b       	sub	r22, r18
    185c:	73 0b       	sbc	r23, r19
    185e:	84 0b       	sbc	r24, r20
    1860:	95 0b       	sbc	r25, r21
    1862:	39 f4       	brne	.+14     	; 0x1872 <__fp_cmp+0x38>
    1864:	0a 26       	eor	r0, r26
    1866:	61 f0       	breq	.+24     	; 0x1880 <__fp_cmp+0x46>
    1868:	23 2b       	or	r18, r19
    186a:	24 2b       	or	r18, r20
    186c:	25 2b       	or	r18, r21
    186e:	21 f4       	brne	.+8      	; 0x1878 <__fp_cmp+0x3e>
    1870:	08 95       	ret
    1872:	0a 26       	eor	r0, r26
    1874:	09 f4       	brne	.+2      	; 0x1878 <__fp_cmp+0x3e>
    1876:	a1 40       	sbci	r26, 0x01	; 1
    1878:	a6 95       	lsr	r26
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	81 1d       	adc	r24, r1
    187e:	81 1d       	adc	r24, r1
    1880:	08 95       	ret

00001882 <__muldi3>:
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	1f 93       	push	r17
    1888:	0f 93       	push	r16
    188a:	9a 9d       	mul	r25, r10
    188c:	f0 2d       	mov	r31, r0
    188e:	21 9f       	mul	r18, r17
    1890:	f0 0d       	add	r31, r0
    1892:	8b 9d       	mul	r24, r11
    1894:	f0 0d       	add	r31, r0
    1896:	8a 9d       	mul	r24, r10
    1898:	e0 2d       	mov	r30, r0
    189a:	f1 0d       	add	r31, r1
    189c:	03 9f       	mul	r16, r19
    189e:	f0 0d       	add	r31, r0
    18a0:	02 9f       	mul	r16, r18
    18a2:	e0 0d       	add	r30, r0
    18a4:	f1 1d       	adc	r31, r1
    18a6:	4e 9d       	mul	r20, r14
    18a8:	e0 0d       	add	r30, r0
    18aa:	f1 1d       	adc	r31, r1
    18ac:	5e 9d       	mul	r21, r14
    18ae:	f0 0d       	add	r31, r0
    18b0:	4f 9d       	mul	r20, r15
    18b2:	f0 0d       	add	r31, r0
    18b4:	7f 93       	push	r23
    18b6:	6f 93       	push	r22
    18b8:	bf 92       	push	r11
    18ba:	af 92       	push	r10
    18bc:	5f 93       	push	r21
    18be:	4f 93       	push	r20
    18c0:	d5 01       	movw	r26, r10
    18c2:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__umulhisi3>
    18c6:	8b 01       	movw	r16, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	d7 01       	movw	r26, r14
    18cc:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__umulhisi3>
    18d0:	eb 01       	movw	r28, r22
    18d2:	e8 0f       	add	r30, r24
    18d4:	f9 1f       	adc	r31, r25
    18d6:	d6 01       	movw	r26, r12
    18d8:	0e 94 91 0c 	call	0x1922	; 0x1922 <__muldi3_6>
    18dc:	2f 91       	pop	r18
    18de:	3f 91       	pop	r19
    18e0:	d6 01       	movw	r26, r12
    18e2:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__umulhisi3>
    18e6:	c6 0f       	add	r28, r22
    18e8:	d7 1f       	adc	r29, r23
    18ea:	e8 1f       	adc	r30, r24
    18ec:	f9 1f       	adc	r31, r25
    18ee:	af 91       	pop	r26
    18f0:	bf 91       	pop	r27
    18f2:	0e 94 91 0c 	call	0x1922	; 0x1922 <__muldi3_6>
    18f6:	2f 91       	pop	r18
    18f8:	3f 91       	pop	r19
    18fa:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__umulhisi3>
    18fe:	c6 0f       	add	r28, r22
    1900:	d7 1f       	adc	r29, r23
    1902:	e8 1f       	adc	r30, r24
    1904:	f9 1f       	adc	r31, r25
    1906:	d6 01       	movw	r26, r12
    1908:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__umulhisi3>
    190c:	e6 0f       	add	r30, r22
    190e:	f7 1f       	adc	r31, r23
    1910:	98 01       	movw	r18, r16
    1912:	be 01       	movw	r22, r28
    1914:	cf 01       	movw	r24, r30
    1916:	11 24       	eor	r1, r1
    1918:	0f 91       	pop	r16
    191a:	1f 91       	pop	r17
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <__muldi3_6>:
    1922:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__umulhisi3>
    1926:	46 0f       	add	r20, r22
    1928:	57 1f       	adc	r21, r23
    192a:	c8 1f       	adc	r28, r24
    192c:	d9 1f       	adc	r29, r25
    192e:	08 f4       	brcc	.+2      	; 0x1932 <__muldi3_6+0x10>
    1930:	31 96       	adiw	r30, 0x01	; 1
    1932:	08 95       	ret

00001934 <__ashldi3>:
    1934:	0f 93       	push	r16
    1936:	08 30       	cpi	r16, 0x08	; 8
    1938:	90 f0       	brcs	.+36     	; 0x195e <__ashldi3+0x2a>
    193a:	98 2f       	mov	r25, r24
    193c:	87 2f       	mov	r24, r23
    193e:	76 2f       	mov	r23, r22
    1940:	65 2f       	mov	r22, r21
    1942:	54 2f       	mov	r21, r20
    1944:	43 2f       	mov	r20, r19
    1946:	32 2f       	mov	r19, r18
    1948:	22 27       	eor	r18, r18
    194a:	08 50       	subi	r16, 0x08	; 8
    194c:	f4 cf       	rjmp	.-24     	; 0x1936 <__ashldi3+0x2>
    194e:	22 0f       	add	r18, r18
    1950:	33 1f       	adc	r19, r19
    1952:	44 1f       	adc	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	66 1f       	adc	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	88 1f       	adc	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 95       	dec	r16
    1960:	b2 f7       	brpl	.-20     	; 0x194e <__ashldi3+0x1a>
    1962:	0f 91       	pop	r16
    1964:	08 95       	ret

00001966 <__adddi3>:
    1966:	2a 0d       	add	r18, r10
    1968:	3b 1d       	adc	r19, r11
    196a:	4c 1d       	adc	r20, r12
    196c:	5d 1d       	adc	r21, r13
    196e:	6e 1d       	adc	r22, r14
    1970:	7f 1d       	adc	r23, r15
    1972:	80 1f       	adc	r24, r16
    1974:	91 1f       	adc	r25, r17
    1976:	08 95       	ret

00001978 <__subdi3>:
    1978:	2a 19       	sub	r18, r10
    197a:	3b 09       	sbc	r19, r11
    197c:	4c 09       	sbc	r20, r12
    197e:	5d 09       	sbc	r21, r13
    1980:	6e 09       	sbc	r22, r14
    1982:	7f 09       	sbc	r23, r15
    1984:	80 0b       	sbc	r24, r16
    1986:	91 0b       	sbc	r25, r17
    1988:	08 95       	ret

0000198a <__cmpdi2>:
    198a:	2a 15       	cp	r18, r10
    198c:	3b 05       	cpc	r19, r11
    198e:	4c 05       	cpc	r20, r12
    1990:	5d 05       	cpc	r21, r13
    1992:	6e 05       	cpc	r22, r14
    1994:	7f 05       	cpc	r23, r15
    1996:	80 07       	cpc	r24, r16
    1998:	91 07       	cpc	r25, r17
    199a:	08 95       	ret

0000199c <__cmpdi2_s8>:
    199c:	00 24       	eor	r0, r0
    199e:	a7 fd       	sbrc	r26, 7
    19a0:	00 94       	com	r0
    19a2:	2a 17       	cp	r18, r26
    19a4:	30 05       	cpc	r19, r0
    19a6:	40 05       	cpc	r20, r0
    19a8:	50 05       	cpc	r21, r0
    19aa:	60 05       	cpc	r22, r0
    19ac:	70 05       	cpc	r23, r0
    19ae:	80 05       	cpc	r24, r0
    19b0:	90 05       	cpc	r25, r0
    19b2:	08 95       	ret

000019b4 <__umulhisi3>:
    19b4:	a2 9f       	mul	r26, r18
    19b6:	b0 01       	movw	r22, r0
    19b8:	b3 9f       	mul	r27, r19
    19ba:	c0 01       	movw	r24, r0
    19bc:	a3 9f       	mul	r26, r19
    19be:	70 0d       	add	r23, r0
    19c0:	81 1d       	adc	r24, r1
    19c2:	11 24       	eor	r1, r1
    19c4:	91 1d       	adc	r25, r1
    19c6:	b2 9f       	mul	r27, r18
    19c8:	70 0d       	add	r23, r0
    19ca:	81 1d       	adc	r24, r1
    19cc:	11 24       	eor	r1, r1
    19ce:	91 1d       	adc	r25, r1
    19d0:	08 95       	ret

000019d2 <eeprom_read_byte>:
    19d2:	03 d0       	rcall	.+6      	; 0x19da <eeprom_mapen>
    19d4:	80 81       	ld	r24, Z
    19d6:	99 27       	eor	r25, r25
    19d8:	08 95       	ret

000019da <eeprom_mapen>:
    19da:	e0 ec       	ldi	r30, 0xC0	; 192
    19dc:	f1 e0       	ldi	r31, 0x01	; 1
    19de:	37 85       	ldd	r19, Z+15	; 0x0f
    19e0:	37 fd       	sbrc	r19, 7
    19e2:	fd cf       	rjmp	.-6      	; 0x19de <eeprom_mapen+0x4>
    19e4:	34 85       	ldd	r19, Z+12	; 0x0c
    19e6:	38 60       	ori	r19, 0x08	; 8
    19e8:	34 87       	std	Z+12, r19	; 0x0c
    19ea:	fc 01       	movw	r30, r24
    19ec:	e0 50       	subi	r30, 0x00	; 0
    19ee:	f0 4f       	sbci	r31, 0xF0	; 240
    19f0:	08 95       	ret

000019f2 <eeprom_read_word>:
    19f2:	0e 94 ed 0c 	call	0x19da	; 0x19da <eeprom_mapen>
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	08 95       	ret

000019fc <eeprom_write_byte>:
    19fc:	26 2f       	mov	r18, r22

000019fe <eeprom_write_r18>:
    19fe:	e0 ec       	ldi	r30, 0xC0	; 192
    1a00:	f1 e0       	ldi	r31, 0x01	; 1
    1a02:	37 85       	ldd	r19, Z+15	; 0x0f
    1a04:	37 fd       	sbrc	r19, 7
    1a06:	fd cf       	rjmp	.-6      	; 0x1a02 <eeprom_write_r18+0x4>
    1a08:	34 85       	ldd	r19, Z+12	; 0x0c
    1a0a:	37 7f       	andi	r19, 0xF7	; 247
    1a0c:	34 87       	std	Z+12, r19	; 0x0c
    1a0e:	37 85       	ldd	r19, Z+15	; 0x0f
    1a10:	31 ff       	sbrs	r19, 1
    1a12:	09 c0       	rjmp	.+18     	; 0x1a26 <eeprom_write_r18+0x28>
    1a14:	36 e3       	ldi	r19, 0x36	; 54
    1a16:	32 87       	std	Z+10, r19	; 0x0a
    1a18:	38 ed       	ldi	r19, 0xD8	; 216
    1a1a:	34 bf       	out	0x34, r19	; 52
    1a1c:	31 e0       	ldi	r19, 0x01	; 1
    1a1e:	33 87       	std	Z+11, r19	; 0x0b
    1a20:	37 85       	ldd	r19, Z+15	; 0x0f
    1a22:	37 fd       	sbrc	r19, 7
    1a24:	fd cf       	rjmp	.-6      	; 0x1a20 <eeprom_write_r18+0x22>
    1a26:	33 e3       	ldi	r19, 0x33	; 51
    1a28:	32 87       	std	Z+10, r19	; 0x0a
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	12 82       	std	Z+2, r1	; 0x02
    1a30:	24 83       	std	Z+4, r18	; 0x04
    1a32:	25 e3       	ldi	r18, 0x35	; 53
    1a34:	22 87       	std	Z+10, r18	; 0x0a
    1a36:	28 ed       	ldi	r18, 0xD8	; 216
    1a38:	31 e0       	ldi	r19, 0x01	; 1
    1a3a:	24 bf       	out	0x34, r18	; 52
    1a3c:	33 87       	std	Z+11, r19	; 0x0b
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	08 95       	ret

00001a42 <eeprom_write_word>:
    1a42:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <eeprom_write_byte>
    1a46:	27 2f       	mov	r18, r23
    1a48:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <eeprom_write_r18>

00001a4c <_exit>:
    1a4c:	f8 94       	cli

00001a4e <__stop_program>:
    1a4e:	ff cf       	rjmp	.-2      	; 0x1a4e <__stop_program>
