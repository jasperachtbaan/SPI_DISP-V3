
SPI_DISP V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000196a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00802000  0000196a  000019fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007d  0080211a  0080211a  00001b18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043dc  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a73  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000134a  00000000  00000000  00008b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  00009e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038bf  00000000  00000000  0000a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167c  00000000  00000000  0000dc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000f303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_10>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_14>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_16>
      44:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_17>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_20>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_77>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__vector_79>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__vector_88>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ea e6       	ldi	r30, 0x6A	; 106
     210:	f9 e1       	ldi	r31, 0x19	; 25
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	aa 31       	cpi	r26, 0x1A	; 26
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	21 e2       	ldi	r18, 0x21	; 33
     220:	aa e1       	ldi	r26, 0x1A	; 26
     222:	b1 e2       	ldi	r27, 0x21	; 33
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a7 39       	cpi	r26, 0x97	; 151
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 bc 09 	call	0x1378	; 0x1378 <main>
     232:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <_Z13clk_set_32MHzv>:
		return 1;
	}
	else{
		return result;
	}
}
     23a:	e0 e5       	ldi	r30, 0x50	; 80
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
     244:	e1 e5       	ldi	r30, 0x51	; 81
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	81 ff       	sbrs	r24, 1
     24c:	fd cf       	rjmp	.-6      	; 0x248 <_Z13clk_set_32MHzv+0xe>
     24e:	88 ed       	ldi	r24, 0xD8	; 216
     250:	84 bf       	out	0x34, r24	; 52
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     258:	08 95       	ret

0000025a <_Z11setup_blinkv>:
     25a:	e0 e5       	ldi	r30, 0x50	; 80
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	84 60       	ori	r24, 0x04	; 4
     262:	80 83       	st	Z, r24
     264:	e1 e5       	ldi	r30, 0x51	; 81
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	82 ff       	sbrs	r24, 2
     26c:	fd cf       	rjmp	.-6      	; 0x268 <_Z11setup_blinkv+0xe>
     26e:	85 e0       	ldi	r24, 0x05	; 5
     270:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     274:	e1 e0       	ldi	r30, 0x01	; 1
     276:	f4 e0       	ldi	r31, 0x04	; 4
     278:	80 81       	ld	r24, Z
     27a:	80 fd       	sbrc	r24, 0
     27c:	fd cf       	rjmp	.-6      	; 0x278 <_Z11setup_blinkv+0x1e>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     284:	e1 e0       	ldi	r30, 0x01	; 1
     286:	f4 e0       	ldi	r31, 0x04	; 4
     288:	80 81       	ld	r24, Z
     28a:	80 fd       	sbrc	r24, 0
     28c:	fd cf       	rjmp	.-6      	; 0x288 <_Z11setup_blinkv+0x2e>
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
     29c:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
     2a0:	e1 e0       	ldi	r30, 0x01	; 1
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	80 81       	ld	r24, Z
     2a6:	80 fd       	sbrc	r24, 0
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <_Z11setup_blinkv+0x4a>
     2aa:	08 95       	ret

000002ac <_Z9setup_SPIv>:
     2ac:	8e e5       	ldi	r24, 0x5E	; 94
     2ae:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     2b2:	80 e1       	ldi	r24, 0x10	; 16
     2b4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2b8:	08 95       	ret

000002ba <_Z10setup_dispv>:
     2ba:	88 eb       	ldi	r24, 0xB8	; 184
     2bc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     2c0:	80 e1       	ldi	r24, 0x10	; 16
     2c2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     2c6:	8c e0       	ldi	r24, 0x0C	; 12
     2c8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2cc:	e2 ec       	ldi	r30, 0xC2	; 194
     2ce:	f8 e0       	ldi	r31, 0x08	; 8
     2d0:	80 81       	ld	r24, Z
     2d2:	88 23       	and	r24, r24
     2d4:	ec f7       	brge	.-6      	; 0x2d0 <_Z10setup_dispv+0x16>
     2d6:	e2 ec       	ldi	r30, 0xC2	; 194
     2d8:	f8 e0       	ldi	r31, 0x08	; 8
     2da:	80 81       	ld	r24, Z
     2dc:	80 68       	ori	r24, 0x80	; 128
     2de:	80 83       	st	Z, r24
     2e0:	80 e1       	ldi	r24, 0x10	; 16
     2e2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2e6:	e7 ec       	ldi	r30, 0xC7	; 199
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <_Z10setup_dispv+0x30>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <_Z10setup_dispv+0x36>
     2f0:	00 00       	nop
     2f2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     2f6:	88 e3       	ldi	r24, 0x38	; 56
     2f8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2fc:	e2 ec       	ldi	r30, 0xC2	; 194
     2fe:	f8 e0       	ldi	r31, 0x08	; 8
     300:	80 81       	ld	r24, Z
     302:	88 23       	and	r24, r24
     304:	ec f7       	brge	.-6      	; 0x300 <_Z10setup_dispv+0x46>
     306:	e2 ec       	ldi	r30, 0xC2	; 194
     308:	f8 e0       	ldi	r31, 0x08	; 8
     30a:	80 81       	ld	r24, Z
     30c:	80 68       	ori	r24, 0x80	; 128
     30e:	80 83       	st	Z, r24
     310:	80 e1       	ldi	r24, 0x10	; 16
     312:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     316:	e7 ec       	ldi	r30, 0xC7	; 199
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <_Z10setup_dispv+0x60>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <_Z10setup_dispv+0x66>
     320:	00 00       	nop
     322:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     32c:	e2 ec       	ldi	r30, 0xC2	; 194
     32e:	f8 e0       	ldi	r31, 0x08	; 8
     330:	80 81       	ld	r24, Z
     332:	88 23       	and	r24, r24
     334:	ec f7       	brge	.-6      	; 0x330 <_Z10setup_dispv+0x76>
     336:	e2 ec       	ldi	r30, 0xC2	; 194
     338:	f8 e0       	ldi	r31, 0x08	; 8
     33a:	80 81       	ld	r24, Z
     33c:	80 68       	ori	r24, 0x80	; 128
     33e:	80 83       	st	Z, r24
     340:	80 e1       	ldi	r24, 0x10	; 16
     342:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     346:	87 ec       	ldi	r24, 0xC7	; 199
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <_Z10setup_dispv+0x90>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_Z10setup_dispv+0x96>
     350:	00 00       	nop
     352:	ef e9       	ldi	r30, 0x9F	; 159
     354:	f8 e2       	ldi	r31, 0x28	; 40
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <_Z10setup_dispv+0x9c>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <_Z10setup_dispv+0xa2>
     35c:	00 00       	nop
     35e:	08 95       	ret

00000360 <_Z9setup_btnv>:
     360:	87 e0       	ldi	r24, 0x07	; 7
     362:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
     366:	8b e8       	ldi	r24, 0x8B	; 139
     368:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <__TEXT_REGION_LENGTH__+0x700903>
     36c:	86 ea       	ldi	r24, 0xA6	; 166
     36e:	98 e2       	ldi	r25, 0x28	; 40
     370:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     374:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x700906>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     386:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     38a:	84 e0       	ldi	r24, 0x04	; 4
     38c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     390:	8b e1       	ldi	r24, 0x1B	; 27
     392:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <__TEXT_REGION_LENGTH__+0x700652>
     396:	82 e6       	ldi	r24, 0x62	; 98
     398:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__TEXT_REGION_LENGTH__+0x700183>
     39c:	08 95       	ret

0000039e <_Z9setup_intv>:
     39e:	87 e0       	ldi	r24, 0x07	; 7
     3a0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     3a4:	78 94       	sei
     3a6:	08 95       	ret

000003a8 <_Z9setup_PWMv>:
     3a8:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     3ac:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3bc:	83 e1       	ldi	r24, 0x13	; 19
     3be:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     3c2:	8e ef       	ldi	r24, 0xFE	; 254
     3c4:	9f ef       	ldi	r25, 0xFF	; 255
     3c6:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     3ca:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     3ce:	08 95       	ret

000003d0 <_Z9QDEC_INITv>:
     3d0:	80 e3       	ldi	r24, 0x30	; 48
     3d2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     3dc:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__TEXT_REGION_LENGTH__+0x700675>
     3e0:	8c e6       	ldi	r24, 0x6C	; 108
     3e2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
     3e6:	8d e6       	ldi	r24, 0x6D	; 109
     3e8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x700181>
     3ec:	89 e0       	ldi	r24, 0x09	; 9
     3ee:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__TEXT_REGION_LENGTH__+0x700188>
     3f2:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__TEXT_REGION_LENGTH__+0x700189>
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     3fc:	88 e6       	ldi	r24, 0x68	; 104
     3fe:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <__TEXT_REGION_LENGTH__+0x700803>
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     40a:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     40e:	8f e3       	ldi	r24, 0x3F	; 63
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
     416:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
     41a:	08 95       	ret

0000041c <_Z8DMX_initv>:
     41c:	84 e0       	ldi	r24, 0x04	; 4
     41e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
     422:	88 e5       	ldi	r24, 0x58	; 88
     424:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     428:	8a e6       	ldi	r24, 0x6A	; 106
     42a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
     42e:	85 e0       	ldi	r24, 0x05	; 5
     430:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     434:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
     438:	8a e8       	ldi	r24, 0x8A	; 138
     43a:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <__TEXT_REGION_LENGTH__+0x700843>
     43e:	89 e2       	ldi	r24, 0x29	; 41
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
     446:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
     44a:	8b e0       	ldi	r24, 0x0B	; 11
     44c:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
     450:	80 e8       	ldi	r24, 0x80	; 128
     452:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
     456:	83 e9       	ldi	r24, 0x93	; 147
     458:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
     45c:	08 95       	ret

0000045e <_Z17update_EEPROM_RAMv>:
     45e:	cf 93       	push	r28
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	09 f0       	breq	.+2      	; 0x46c <_Z17update_EEPROM_RAMv+0xe>
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	c6 2f       	mov	r28, r22
     46e:	c1 95       	neg	r28
     470:	83 e1       	ldi	r24, 0x13	; 19
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 86 0c 	call	0x190c	; 0x190c <eeprom_read_word>
     478:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <brightness>
     47c:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <brightness+0x1>
     480:	82 17       	cp	r24, r18
     482:	93 07       	cpc	r25, r19
     484:	41 f0       	breq	.+16     	; 0x496 <_Z17update_EEPROM_RAMv+0x38>
     486:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <brightness>
     48a:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <brightness+0x1>
     48e:	83 e1       	ldi	r24, 0x13	; 19
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 ae 0c 	call	0x195c	; 0x195c <eeprom_write_word>
     496:	85 e1       	ldi	r24, 0x15	; 21
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 86 0c 	call	0x190c	; 0x190c <eeprom_read_word>
     49e:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
     4a2:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
     4a6:	82 17       	cp	r24, r18
     4a8:	93 07       	cpc	r25, r19
     4aa:	41 f0       	breq	.+16     	; 0x4bc <_Z17update_EEPROM_RAMv+0x5e>
     4ac:	60 91 01 20 	lds	r22, 0x2001	; 0x802001 <DMXChan>
     4b0:	70 91 02 20 	lds	r23, 0x2002	; 0x802002 <DMXChan+0x1>
     4b4:	85 e1       	ldi	r24, 0x15	; 21
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 ae 0c 	call	0x195c	; 0x195c <eeprom_write_word>
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <eeprom_read_byte>
     4c4:	8c 17       	cp	r24, r28
     4c6:	29 f0       	breq	.+10     	; 0x4d2 <_Z17update_EEPROM_RAMv+0x74>
     4c8:	6c 2f       	mov	r22, r28
     4ca:	80 e1       	ldi	r24, 0x10	; 16
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 8b 0c 	call	0x1916	; 0x1916 <eeprom_write_byte>
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <_Z10updateDispv>:
inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

void updateDisp(){
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	a1 97       	sbiw	r28, 0x21	; 33
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	8b e2       	ldi	r24, 0x2B	; 43
     502:	91 e2       	ldi	r25, 0x21	; 33
     504:	4b e4       	ldi	r20, 0x4B	; 75
     506:	51 e2       	ldi	r21, 0x21	; 33
     508:	dc 01       	movw	r26, r24
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occured, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     50a:	bc 01       	movw	r22, r24
     50c:	60 95       	com	r22
     50e:	70 95       	com	r23
			RTC_CNT = 0;
     510:	08 e0       	ldi	r16, 0x08	; 8
     512:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occured, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     514:	3d 91       	ld	r19, X+
     516:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     51a:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     51e:	ea 0f       	add	r30, r26
     520:	fb 1f       	adc	r31, r27
     522:	e6 0f       	add	r30, r22
     524:	f7 1f       	adc	r31, r23
     526:	20 81       	ld	r18, Z
     528:	32 17       	cp	r19, r18
     52a:	39 f0       	breq	.+14     	; 0x53a <_Z10updateDispv+0x64>
			RTC_CNT = 0;
     52c:	f8 01       	movw	r30, r16
     52e:	10 82       	st	Z, r1
     530:	11 82       	std	Z+1, r1	; 0x01
			editCounter = 0;
     532:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     536:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	uint8_t lowBound = 0xFF; //Lowest number in what the two arrays differ
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occured, if so reset blink timer
     53a:	4a 17       	cp	r20, r26
     53c:	5b 07       	cpc	r21, r27
     53e:	51 f7       	brne	.-44     	; 0x514 <_Z10updateDispv+0x3e>
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
			RTC_CNT = 0;
			editCounter = 0;
		}
	}
	if(RTC_CNT > 512){
     540:	a0 90 08 04 	lds	r10, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     544:	b0 90 09 04 	lds	r11, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     548:	c0 90 4c 21 	lds	r12, 0x214C	; 0x80214c <toBeDispPtr>
     54c:	d0 90 4d 21 	lds	r13, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     550:	be 01       	movw	r22, r28
     552:	6f 5f       	subi	r22, 0xFF	; 255
     554:	7f 4f       	sbci	r23, 0xFF	; 255
     556:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <currBlinkMaskPtr>
     55a:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <currBlinkMaskPtr+0x1>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     55e:	fb 01       	movw	r30, r22
     560:	46 01       	movw	r8, r12
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     562:	68 94       	set
     564:	ee 24       	eor	r14, r14
     566:	e5 f8       	bld	r14, 5
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
     568:	11 e0       	ldi	r17, 0x01	; 1
     56a:	a1 16       	cp	r10, r17
     56c:	12 e0       	ldi	r17, 0x02	; 2
     56e:	b1 06       	cpc	r11, r17
     570:	08 f4       	brcc	.+2      	; 0x574 <_Z10updateDispv+0x9e>
     572:	d0 c0       	rjmp	.+416    	; 0x714 <_Z10updateDispv+0x23e>
     574:	d9 01       	movw	r26, r18
     576:	fc 90       	ld	r15, X
     578:	ff 20       	and	r15, r15
     57a:	09 f4       	brne	.+2      	; 0x57e <_Z10updateDispv+0xa8>
     57c:	cb c0       	rjmp	.+406    	; 0x714 <_Z10updateDispv+0x23e>
     57e:	f0 90 93 21 	lds	r15, 0x2193	; 0x802193 <editMode>
     582:	f1 10       	cpse	r15, r1
     584:	cb c0       	rjmp	.+406    	; 0x71c <_Z10updateDispv+0x246>
     586:	c6 c0       	rjmp	.+396    	; 0x714 <_Z10updateDispv+0x23e>
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
     588:	d4 01       	movw	r26, r8
     58a:	fd 90       	ld	r15, X+
     58c:	4d 01       	movw	r8, r26
     58e:	dc 01       	movw	r26, r24
     590:	fd 92       	st	X+, r15
     592:	cd 01       	movw	r24, r26
     594:	31 96       	adiw	r30, 0x01	; 1
     596:	bf ef       	ldi	r27, 0xFF	; 255
     598:	cb 1a       	sub	r12, r27
     59a:	db 0a       	sbc	r13, r27
     59c:	2f 5f       	subi	r18, 0xFF	; 255
     59e:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
     5a0:	48 17       	cp	r20, r24
     5a2:	59 07       	cpc	r21, r25
     5a4:	09 f7       	brne	.-62     	; 0x568 <_Z10updateDispv+0x92>
     5a6:	e1 e5       	ldi	r30, 0x51	; 81
     5a8:	f1 e2       	ldi	r31, 0x21	; 33
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	d1 2c       	mov	r13, r1
     5ae:	3f ef       	ldi	r19, 0xFF	; 255
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
     5b0:	db 01       	movw	r26, r22
     5b2:	9d 91       	ld	r25, X+
     5b4:	bd 01       	movw	r22, r26
     5b6:	20 81       	ld	r18, Z
     5b8:	29 17       	cp	r18, r25
     5ba:	39 f0       	breq	.+14     	; 0x5ca <_Z10updateDispv+0xf4>
			currDispData[i] = temp[i];
     5bc:	90 83       	st	Z, r25
			highBound = i;
			if(lowBound == 0xFF){
     5be:	3f 3f       	cpi	r19, 0xFF	; 255
     5c0:	19 f4       	brne	.+6      	; 0x5c8 <_Z10updateDispv+0xf2>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     5c2:	d8 2e       	mov	r13, r24
			if(lowBound == 0xFF){
				lowBound = i;
     5c4:	38 2f       	mov	r19, r24
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <_Z10updateDispv+0xf4>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     5c8:	d8 2e       	mov	r13, r24
     5ca:	31 96       	adiw	r30, 0x01	; 1
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
     5ce:	80 32       	cpi	r24, 0x20	; 32
     5d0:	79 f7       	brne	.-34     	; 0x5b0 <_Z10updateDispv+0xda>
			if(lowBound == 0xFF){
				lowBound = i;
			}
		}
	}
	if(lowBound != 0xFF){ //If anything has changed on the display
     5d2:	3f 3f       	cpi	r19, 0xFF	; 255
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <_Z10updateDispv+0x102>
     5d6:	a4 c0       	rjmp	.+328    	; 0x720 <_Z10updateDispv+0x24a>
		uint8_t tempPos = lowBound;
		if(tempPos > 15){
     5d8:	30 31       	cpi	r19, 0x10	; 16
     5da:	18 f0       	brcs	.+6      	; 0x5e2 <_Z10updateDispv+0x10c>
			tempPos += 48;
     5dc:	80 e3       	ldi	r24, 0x30	; 48
     5de:	83 0f       	add	r24, r19
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <_Z10updateDispv+0x10e>
     5e2:	83 2f       	mov	r24, r19
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
     5e4:	80 68       	ori	r24, 0x80	; 128
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     5e6:	90 e1       	ldi	r25, 0x10	; 16
     5e8:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	SPIC_DATA = SPIdata;
     5ec:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     5f0:	e2 ec       	ldi	r30, 0xC2	; 194
     5f2:	f8 e0       	ldi	r31, 0x08	; 8
     5f4:	80 81       	ld	r24, Z
     5f6:	88 23       	and	r24, r24
     5f8:	ec f7       	brge	.-6      	; 0x5f4 <_Z10updateDispv+0x11e>
	SPIC_STATUS |= SPI_IF_bm;
     5fa:	e2 ec       	ldi	r30, 0xC2	; 194
     5fc:	f8 e0       	ldi	r31, 0x08	; 8
     5fe:	80 81       	ld	r24, Z
     600:	80 68       	ori	r24, 0x80	; 128
     602:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     604:	e5 e4       	ldi	r30, 0x45	; 69
     606:	f6 e0       	ldi	r31, 0x06	; 6
     608:	80 e1       	ldi	r24, 0x10	; 16
     60a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60c:	87 ec       	ldi	r24, 0xC7	; 199
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <_Z10updateDispv+0x13a>
     614:	00 c0       	rjmp	.+0      	; 0x616 <_Z10updateDispv+0x140>
     616:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     618:	88 e0       	ldi	r24, 0x08	; 8
     61a:	80 83       	st	Z, r24
     61c:	9a e0       	ldi	r25, 0x0A	; 10
     61e:	9a 95       	dec	r25
     620:	f1 f7       	brne	.-4      	; 0x61e <_Z10updateDispv+0x148>
     622:	00 c0       	rjmp	.+0      	; 0x624 <_Z10updateDispv+0x14e>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     624:	43 2f       	mov	r20, r19
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	8d 2c       	mov	r8, r13
     62e:	91 2c       	mov	r9, r1
     630:	a1 2c       	mov	r10, r1
     632:	b1 2c       	mov	r11, r1
     634:	84 16       	cp	r8, r20
     636:	95 06       	cpc	r9, r21
     638:	a6 06       	cpc	r10, r22
     63a:	b7 06       	cpc	r11, r23
     63c:	08 f4       	brcc	.+2      	; 0x640 <_Z10updateDispv+0x16a>
     63e:	62 c0       	rjmp	.+196    	; 0x704 <_Z10updateDispv+0x22e>
     640:	a3 2f       	mov	r26, r19
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	fd 01       	movw	r30, r26
     646:	ef 5a       	subi	r30, 0xAF	; 175
     648:	fe 4d       	sbci	r31, 0xDE	; 222
     64a:	2f 01       	movw	r4, r30
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     64c:	06 e4       	ldi	r16, 0x46	; 70
     64e:	16 e0       	ldi	r17, 0x06	; 6
     650:	68 94       	set
     652:	cc 24       	eor	r12, r12
     654:	c4 f8       	bld	r12, 4
     656:	9c 2d       	mov	r25, r12
	SPIC_DATA = SPIdata;
     658:	0f 2e       	mov	r0, r31
     65a:	f3 ec       	ldi	r31, 0xC3	; 195
     65c:	ef 2e       	mov	r14, r31
     65e:	f8 e0       	ldi	r31, 0x08	; 8
     660:	ff 2e       	mov	r15, r31
     662:	f0 2d       	mov	r31, r0
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     664:	e2 ec       	ldi	r30, 0xC2	; 194
     666:	f8 e0       	ldi	r31, 0x08	; 8
	SPIC_STATUS |= SPI_IF_bm;
	PORTC_OUTSET = (1 << SS_PIN);
     668:	25 e4       	ldi	r18, 0x45	; 69
     66a:	36 e0       	ldi	r19, 0x06	; 6
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     66c:	68 94       	set
     66e:	77 24       	eor	r7, r7
     670:	73 f8       	bld	r7, 3
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
	SPIC_DATA = SPIdata;
     672:	0f 2e       	mov	r0, r31
     674:	f0 ec       	ldi	r31, 0xC0	; 192
     676:	6f 2e       	mov	r6, r31
     678:	f0 2d       	mov	r31, r0
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
     67a:	d2 01       	movw	r26, r4
     67c:	8d 91       	ld	r24, X+
     67e:	2d 01       	movw	r4, r26
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     680:	d8 01       	movw	r26, r16
     682:	9c 93       	st	X, r25
	SPIC_DATA = SPIdata;
     684:	d7 01       	movw	r26, r14
     686:	8c 93       	st	X, r24
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     688:	80 81       	ld	r24, Z
     68a:	88 23       	and	r24, r24
     68c:	ec f7       	brge	.-6      	; 0x688 <_Z10updateDispv+0x1b2>
	SPIC_STATUS |= SPI_IF_bm;
     68e:	80 81       	ld	r24, Z
     690:	80 68       	ori	r24, 0x80	; 128
     692:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     694:	d9 01       	movw	r26, r18
     696:	9c 93       	st	X, r25
     698:	a7 ec       	ldi	r26, 0xC7	; 199
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	11 97       	sbiw	r26, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <_Z10updateDispv+0x1c6>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <_Z10updateDispv+0x1cc>
     6a2:	00 00       	nop
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
			if(i == 15 && highBound != 15){
     6a4:	4f 30       	cpi	r20, 0x0F	; 15
     6a6:	51 05       	cpc	r21, r1
     6a8:	61 05       	cpc	r22, r1
     6aa:	71 05       	cpc	r23, r1
     6ac:	09 f5       	brne	.+66     	; 0x6f0 <_Z10updateDispv+0x21a>
     6ae:	bf e0       	ldi	r27, 0x0F	; 15
     6b0:	db 16       	cp	r13, r27
     6b2:	41 f1       	breq	.+80     	; 0x704 <_Z10updateDispv+0x22e>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     6b4:	d8 01       	movw	r26, r16
     6b6:	7c 92       	st	X, r7
     6b8:	ba e0       	ldi	r27, 0x0A	; 10
     6ba:	ba 95       	dec	r27
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <_Z10updateDispv+0x1e4>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <_Z10updateDispv+0x1ea>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     6c0:	d8 01       	movw	r26, r16
     6c2:	cc 92       	st	X, r12
	SPIC_DATA = SPIdata;
     6c4:	d7 01       	movw	r26, r14
     6c6:	6c 92       	st	X, r6
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     6c8:	80 81       	ld	r24, Z
     6ca:	88 23       	and	r24, r24
     6cc:	ec f7       	brge	.-6      	; 0x6c8 <_Z10updateDispv+0x1f2>
	SPIC_STATUS |= SPI_IF_bm;
     6ce:	80 81       	ld	r24, Z
     6d0:	80 68       	ori	r24, 0x80	; 128
     6d2:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     6d4:	d9 01       	movw	r26, r18
     6d6:	cc 92       	st	X, r12
     6d8:	a7 ec       	ldi	r26, 0xC7	; 199
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <_Z10updateDispv+0x206>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <_Z10updateDispv+0x20c>
     6e2:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     6e4:	d9 01       	movw	r26, r18
     6e6:	7c 92       	st	X, r7
     6e8:	ba e0       	ldi	r27, 0x0A	; 10
     6ea:	ba 95       	dec	r27
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <_Z10updateDispv+0x214>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <_Z10updateDispv+0x21a>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	6f 4f       	sbci	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	84 16       	cp	r8, r20
     6fa:	95 06       	cpc	r9, r21
     6fc:	a6 06       	cpc	r10, r22
     6fe:	b7 06       	cpc	r11, r23
     700:	08 f0       	brcs	.+2      	; 0x704 <_Z10updateDispv+0x22e>
     702:	bb cf       	rjmp	.-138    	; 0x67a <_Z10updateDispv+0x1a4>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     704:	88 e0       	ldi	r24, 0x08	; 8
     706:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     70a:	ea e0       	ldi	r30, 0x0A	; 10
     70c:	ea 95       	dec	r30
     70e:	f1 f7       	brne	.-4      	; 0x70c <_Z10updateDispv+0x236>
     710:	00 c0       	rjmp	.+0      	; 0x712 <_Z10updateDispv+0x23c>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     712:	06 c0       	rjmp	.+12     	; 0x720 <_Z10updateDispv+0x24a>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     714:	d6 01       	movw	r26, r12
     716:	fc 90       	ld	r15, X
     718:	f0 82       	st	Z, r15
     71a:	36 cf       	rjmp	.-404    	; 0x588 <_Z10updateDispv+0xb2>
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     71c:	e0 82       	st	Z, r14
     71e:	34 cf       	rjmp	.-408    	; 0x588 <_Z10updateDispv+0xb2>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     720:	a1 96       	adiw	r28, 0x21	; 33
     722:	cd bf       	out	0x3d, r28	; 61
     724:	de bf       	out	0x3e, r29	; 62
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	7f 90       	pop	r7
     740:	6f 90       	pop	r6
     742:	5f 90       	pop	r5
     744:	4f 90       	pop	r4
     746:	08 95       	ret

00000748 <_Z12LCD_PRINTDECjhh>:
inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
	currCursorPos++;
}

void LCD_PRINTDEC(uint16_t numToPrint, uint8_t pos, uint8_t noOfDigits){
     748:	2f 92       	push	r2
     74a:	3f 92       	push	r3
     74c:	4f 92       	push	r4
     74e:	5f 92       	push	r5
     750:	6f 92       	push	r6
     752:	7f 92       	push	r7
     754:	8f 92       	push	r8
     756:	9f 92       	push	r9
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	2e 97       	sbiw	r28, 0x0e	; 14
     772:	cd bf       	out	0x3d, r28	; 61
     774:	de bf       	out	0x3e, r29	; 62
     776:	56 2e       	mov	r5, r22
	//currCursorPos = pos;
	//WR_CHAR();
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
     778:	6c 01       	movw	r12, r24
     77a:	e1 2c       	mov	r14, r1
     77c:	f1 2c       	mov	r15, r1
     77e:	00 e0       	ldi	r16, 0x00	; 0
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	98 01       	movw	r18, r16
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	da 82       	std	Y+2, r13	; 0x02
     788:	eb 82       	std	Y+3, r14	; 0x03
     78a:	fc 82       	std	Y+4, r15	; 0x04
     78c:	0d 83       	std	Y+5, r16	; 0x05
     78e:	1e 83       	std	Y+6, r17	; 0x06
     790:	2f 83       	std	Y+7, r18	; 0x07
     792:	38 87       	std	Y+8, r19	; 0x08
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
     794:	4f 3f       	cpi	r20, 0xFF	; 255
     796:	09 f0       	breq	.+2      	; 0x79a <_Z12LCD_PRINTDECjhh+0x52>
     798:	6c c0       	rjmp	.+216    	; 0x872 <_Z12LCD_PRINTDECjhh+0x12a>
     79a:	3e c0       	rjmp	.+124    	; 0x818 <_Z12LCD_PRINTDECjhh+0xd0>

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
		result *= gnd;
     79c:	2a 2f       	mov	r18, r26
     79e:	3b 2d       	mov	r19, r11
     7a0:	4c 2d       	mov	r20, r12
     7a2:	5d 2d       	mov	r21, r13
     7a4:	6e 2d       	mov	r22, r14
     7a6:	7f 2d       	mov	r23, r15
     7a8:	80 2f       	mov	r24, r16
     7aa:	91 2f       	mov	r25, r17
     7ac:	01 e0       	ldi	r16, 0x01	; 1
     7ae:	0e 94 27 0c 	call	0x184e	; 0x184e <__ashldi3>
     7b2:	32 2e       	mov	r3, r18
     7b4:	43 2e       	mov	r4, r19
     7b6:	64 2e       	mov	r6, r20
     7b8:	75 2e       	mov	r7, r21
     7ba:	6a 87       	std	Y+10, r22	; 0x0a
     7bc:	79 87       	std	Y+9, r23	; 0x09
     7be:	b8 2f       	mov	r27, r24
     7c0:	a9 2f       	mov	r26, r25
     7c2:	02 e0       	ldi	r16, 0x02	; 2
     7c4:	0e 94 27 0c 	call	0x184e	; 0x184e <__ashldi3>
     7c8:	a2 2e       	mov	r10, r18
     7ca:	b3 2e       	mov	r11, r19
     7cc:	c4 2e       	mov	r12, r20
     7ce:	d5 2e       	mov	r13, r21
     7d0:	e6 2e       	mov	r14, r22
     7d2:	f7 2e       	mov	r15, r23
     7d4:	08 2f       	mov	r16, r24
     7d6:	19 2f       	mov	r17, r25
     7d8:	23 2d       	mov	r18, r3
     7da:	34 2d       	mov	r19, r4
     7dc:	46 2d       	mov	r20, r6
     7de:	57 2d       	mov	r21, r7
     7e0:	6a 85       	ldd	r22, Y+10	; 0x0a
     7e2:	79 85       	ldd	r23, Y+9	; 0x09
     7e4:	8b 2f       	mov	r24, r27
     7e6:	9a 2f       	mov	r25, r26
     7e8:	0e 94 40 0c 	call	0x1880	; 0x1880 <__adddi3>
     7ec:	a2 2f       	mov	r26, r18
     7ee:	b3 2e       	mov	r11, r19
     7f0:	c4 2e       	mov	r12, r20
     7f2:	d5 2e       	mov	r13, r21
     7f4:	e6 2e       	mov	r14, r22
     7f6:	f7 2e       	mov	r15, r23
     7f8:	08 2f       	mov	r16, r24
     7fa:	19 2f       	mov	r17, r25
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     7fc:	31 96       	adiw	r30, 0x01	; 1
     7fe:	e8 15       	cp	r30, r8
     800:	f9 05       	cpc	r31, r9
     802:	64 f2       	brlt	.-104    	; 0x79c <_Z12LCD_PRINTDECjhh+0x54>
     804:	13 c0       	rjmp	.+38     	; 0x82c <_Z12LCD_PRINTDECjhh+0xe4>
     806:	aa e0       	ldi	r26, 0x0A	; 10
     808:	b1 2c       	mov	r11, r1
     80a:	c1 2c       	mov	r12, r1
     80c:	d1 2c       	mov	r13, r1
     80e:	e1 2c       	mov	r14, r1
     810:	f1 2c       	mov	r15, r1
     812:	00 e0       	ldi	r16, 0x00	; 0
     814:	10 e0       	ldi	r17, 0x00	; 0
     816:	0a c0       	rjmp	.+20     	; 0x82c <_Z12LCD_PRINTDECjhh+0xe4>
     818:	81 2c       	mov	r8, r1
     81a:	91 2c       	mov	r9, r1
     81c:	aa e0       	ldi	r26, 0x0A	; 10
     81e:	b1 2c       	mov	r11, r1
     820:	c1 2c       	mov	r12, r1
     822:	d1 2c       	mov	r13, r1
     824:	e1 2c       	mov	r14, r1
     826:	f1 2c       	mov	r15, r1
     828:	00 e0       	ldi	r16, 0x00	; 0
     82a:	10 e0       	ldi	r17, 0x00	; 0
		result *= gnd;
	}
	if(exp == 0){
     82c:	81 14       	cp	r8, r1
     82e:	91 04       	cpc	r9, r1
     830:	09 f4       	brne	.+2      	; 0x834 <_Z12LCD_PRINTDECjhh+0xec>
     832:	1b c1       	rjmp	.+566    	; 0xa6a <_Z12LCD_PRINTDECjhh+0x322>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     834:	29 81       	ldd	r18, Y+1	; 0x01
     836:	3a 81       	ldd	r19, Y+2	; 0x02
     838:	4b 81       	ldd	r20, Y+3	; 0x03
     83a:	5c 81       	ldd	r21, Y+4	; 0x04
     83c:	6d 81       	ldd	r22, Y+5	; 0x05
     83e:	7e 81       	ldd	r23, Y+6	; 0x06
     840:	8f 81       	ldd	r24, Y+7	; 0x07
     842:	98 85       	ldd	r25, Y+8	; 0x08
     844:	aa 2e       	mov	r10, r26
     846:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__cmpdi2>
     84a:	0c f4       	brge	.+2      	; 0x84e <_Z12LCD_PRINTDECjhh+0x106>
     84c:	fd c0       	rjmp	.+506    	; 0xa48 <_Z12LCD_PRINTDECjhh+0x300>
				check = true;
			}
			decCounter++;
     84e:	0f ef       	ldi	r16, 0xFF	; 255
     850:	80 1a       	sub	r8, r16
     852:	90 0a       	sbc	r9, r16
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     854:	12 e0       	ldi	r17, 0x02	; 2
     856:	81 16       	cp	r8, r17
     858:	91 04       	cpc	r9, r1
     85a:	ac f2       	brlt	.-86     	; 0x806 <_Z12LCD_PRINTDECjhh+0xbe>
     85c:	aa e0       	ldi	r26, 0x0A	; 10
     85e:	b1 2c       	mov	r11, r1
     860:	c1 2c       	mov	r12, r1
     862:	d1 2c       	mov	r13, r1
     864:	e1 2c       	mov	r14, r1
     866:	f1 2c       	mov	r15, r1
     868:	00 e0       	ldi	r16, 0x00	; 0
     86a:	10 e0       	ldi	r17, 0x00	; 0
     86c:	e1 e0       	ldi	r30, 0x01	; 1
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	95 cf       	rjmp	.-214    	; 0x79c <_Z12LCD_PRINTDECjhh+0x54>
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
	}
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
     872:	84 2f       	mov	r24, r20
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	1c 01       	movw	r2, r24
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	22 1a       	sub	r2, r18
     87c:	31 08       	sbc	r3, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     87e:	33 20       	and	r3, r3
     880:	0c f4       	brge	.+2      	; 0x884 <_Z12LCD_PRINTDECjhh+0x13c>
     882:	01 c1       	rjmp	.+514    	; 0xa86 <_Z12LCD_PRINTDECjhh+0x33e>
     884:	85 2d       	mov	r24, r5
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	8b 87       	std	Y+11, r24	; 0x0b
     88a:	9c 87       	std	Y+12, r25	; 0x0c
     88c:	41 2c       	mov	r4, r1
     88e:	51 2c       	mov	r5, r1
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	29 16       	cp	r2, r25
     894:	31 04       	cpc	r3, r1
     896:	7c f1       	brlt	.+94     	; 0x8f6 <_Z12LCD_PRINTDECjhh+0x1ae>
     898:	2a e0       	ldi	r18, 0x0A	; 10
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	e1 e0       	ldi	r30, 0x01	; 1
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
		result *= gnd;
     8ac:	01 e0       	ldi	r16, 0x01	; 1
     8ae:	0e 94 27 0c 	call	0x184e	; 0x184e <__ashldi3>
     8b2:	62 2e       	mov	r6, r18
     8b4:	73 2e       	mov	r7, r19
     8b6:	84 2e       	mov	r8, r20
     8b8:	95 2e       	mov	r9, r21
     8ba:	6a 87       	std	Y+10, r22	; 0x0a
     8bc:	79 87       	std	Y+9, r23	; 0x09
     8be:	b8 2f       	mov	r27, r24
     8c0:	a9 2f       	mov	r26, r25
     8c2:	02 e0       	ldi	r16, 0x02	; 2
     8c4:	0e 94 27 0c 	call	0x184e	; 0x184e <__ashldi3>
     8c8:	a2 2e       	mov	r10, r18
     8ca:	b3 2e       	mov	r11, r19
     8cc:	c4 2e       	mov	r12, r20
     8ce:	d5 2e       	mov	r13, r21
     8d0:	e6 2e       	mov	r14, r22
     8d2:	f7 2e       	mov	r15, r23
     8d4:	08 2f       	mov	r16, r24
     8d6:	19 2f       	mov	r17, r25
     8d8:	26 2d       	mov	r18, r6
     8da:	37 2d       	mov	r19, r7
     8dc:	48 2d       	mov	r20, r8
     8de:	59 2d       	mov	r21, r9
     8e0:	6a 85       	ldd	r22, Y+10	; 0x0a
     8e2:	79 85       	ldd	r23, Y+9	; 0x09
     8e4:	8b 2f       	mov	r24, r27
     8e6:	9a 2f       	mov	r25, r26
     8e8:	0e 94 40 0c 	call	0x1880	; 0x1880 <__adddi3>
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     8ec:	31 96       	adiw	r30, 0x01	; 1
     8ee:	e2 15       	cp	r30, r2
     8f0:	f3 05       	cpc	r31, r3
     8f2:	e1 f6       	brne	.-72     	; 0x8ac <_Z12LCD_PRINTDECjhh+0x164>
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <_Z12LCD_PRINTDECjhh+0x1be>
	//PORTD_INTCTRL |= PORT_INT0LVL_HI_gc;
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
     8f6:	2a e0       	ldi	r18, 0x0A	; 10
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 1; i < exp; i++){
		result *= gnd;
	}
	if(exp == 0){
     906:	21 14       	cp	r2, r1
     908:	31 04       	cpc	r3, r1
     90a:	49 f0       	breq	.+18     	; 0x91e <_Z12LCD_PRINTDECjhh+0x1d6>
     90c:	2d 87       	std	Y+13, r18	; 0x0d
     90e:	73 2e       	mov	r7, r19
     910:	84 2e       	mov	r8, r20
     912:	95 2e       	mov	r9, r21
     914:	6e 87       	std	Y+14, r22	; 0x0e
     916:	79 87       	std	Y+9, r23	; 0x09
     918:	8a 87       	std	Y+10, r24	; 0x0a
     91a:	69 2e       	mov	r6, r25
     91c:	09 c0       	rjmp	.+18     	; 0x930 <_Z12LCD_PRINTDECjhh+0x1e8>
		return 1;
     91e:	01 e0       	ldi	r16, 0x01	; 1
     920:	0d 87       	std	Y+13, r16	; 0x0d
     922:	71 2c       	mov	r7, r1
     924:	81 2c       	mov	r8, r1
     926:	91 2c       	mov	r9, r1
     928:	1e 86       	std	Y+14, r1	; 0x0e
     92a:	19 86       	std	Y+9, r1	; 0x09
     92c:	1a 86       	std	Y+10, r1	; 0x0a
     92e:	61 2c       	mov	r6, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
		int16_t t;
		for(t = 0; startNum - (mathPow(10, i) * t) >= 0; t++){} //t = 9 if i = 1 and startnum = 90, t = 3 if i = 2 and startnum is 356
     930:	ad 84       	ldd	r10, Y+13	; 0x0d
     932:	b7 2c       	mov	r11, r7
     934:	c8 2c       	mov	r12, r8
     936:	d9 2c       	mov	r13, r9
     938:	ee 84       	ldd	r14, Y+14	; 0x0e
     93a:	f9 84       	ldd	r15, Y+9	; 0x09
     93c:	0a 85       	ldd	r16, Y+10	; 0x0a
     93e:	16 2d       	mov	r17, r6
     940:	24 2d       	mov	r18, r4
     942:	35 2d       	mov	r19, r5
     944:	95 2d       	mov	r25, r5
     946:	99 0f       	add	r25, r25
     948:	99 0b       	sbc	r25, r25
     94a:	49 2f       	mov	r20, r25
     94c:	59 2f       	mov	r21, r25
     94e:	69 2f       	mov	r22, r25
     950:	79 2f       	mov	r23, r25
     952:	89 2f       	mov	r24, r25
     954:	0e 94 ce 0b 	call	0x179c	; 0x179c <__muldi3>
     958:	a2 2e       	mov	r10, r18
     95a:	b3 2e       	mov	r11, r19
     95c:	c4 2e       	mov	r12, r20
     95e:	d5 2e       	mov	r13, r21
     960:	e6 2e       	mov	r14, r22
     962:	f7 2e       	mov	r15, r23
     964:	08 2f       	mov	r16, r24
     966:	19 2f       	mov	r17, r25
     968:	29 81       	ldd	r18, Y+1	; 0x01
     96a:	3a 81       	ldd	r19, Y+2	; 0x02
     96c:	4b 81       	ldd	r20, Y+3	; 0x03
     96e:	5c 81       	ldd	r21, Y+4	; 0x04
     970:	6d 81       	ldd	r22, Y+5	; 0x05
     972:	7e 81       	ldd	r23, Y+6	; 0x06
     974:	8f 81       	ldd	r24, Y+7	; 0x07
     976:	98 85       	ldd	r25, Y+8	; 0x08
     978:	0e 94 49 0c 	call	0x1892	; 0x1892 <__subdi3>
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__cmpdi2_s8>
     982:	24 f0       	brlt	.+8      	; 0x98c <_Z12LCD_PRINTDECjhh+0x244>
     984:	1f ef       	ldi	r17, 0xFF	; 255
     986:	41 1a       	sub	r4, r17
     988:	51 0a       	sbc	r5, r17
     98a:	82 cf       	rjmp	.-252    	; 0x890 <_Z12LCD_PRINTDECjhh+0x148>
     98c:	2d 85       	ldd	r18, Y+13	; 0x0d
     98e:	3e 85       	ldd	r19, Y+14	; 0x0e
		if(t > 0){
     990:	14 14       	cp	r1, r4
     992:	15 04       	cpc	r1, r5
     994:	ec f5       	brge	.+122    	; 0xa10 <_Z12LCD_PRINTDECjhh+0x2c8>
			startNum -= mathPow(10, i) * (t - 1); //Subtract the printed number from the start number
     996:	a2 01       	movw	r20, r4
     998:	41 50       	subi	r20, 0x01	; 1
     99a:	51 09       	sbc	r21, r1
     99c:	95 2f       	mov	r25, r21
     99e:	99 0f       	add	r25, r25
     9a0:	99 0b       	sbc	r25, r25
     9a2:	a2 2e       	mov	r10, r18
     9a4:	b7 2c       	mov	r11, r7
     9a6:	c8 2c       	mov	r12, r8
     9a8:	d9 2c       	mov	r13, r9
     9aa:	e3 2e       	mov	r14, r19
     9ac:	f9 84       	ldd	r15, Y+9	; 0x09
     9ae:	0a 85       	ldd	r16, Y+10	; 0x0a
     9b0:	16 2d       	mov	r17, r6
     9b2:	24 2f       	mov	r18, r20
     9b4:	35 2f       	mov	r19, r21
     9b6:	49 2f       	mov	r20, r25
     9b8:	59 2f       	mov	r21, r25
     9ba:	69 2f       	mov	r22, r25
     9bc:	79 2f       	mov	r23, r25
     9be:	89 2f       	mov	r24, r25
     9c0:	0e 94 ce 0b 	call	0x179c	; 0x179c <__muldi3>
     9c4:	a2 2e       	mov	r10, r18
     9c6:	b3 2e       	mov	r11, r19
     9c8:	c4 2e       	mov	r12, r20
     9ca:	d5 2e       	mov	r13, r21
     9cc:	e6 2e       	mov	r14, r22
     9ce:	f7 2e       	mov	r15, r23
     9d0:	08 2f       	mov	r16, r24
     9d2:	19 2f       	mov	r17, r25
     9d4:	29 81       	ldd	r18, Y+1	; 0x01
     9d6:	3a 81       	ldd	r19, Y+2	; 0x02
     9d8:	4b 81       	ldd	r20, Y+3	; 0x03
     9da:	5c 81       	ldd	r21, Y+4	; 0x04
     9dc:	6d 81       	ldd	r22, Y+5	; 0x05
     9de:	7e 81       	ldd	r23, Y+6	; 0x06
     9e0:	8f 81       	ldd	r24, Y+7	; 0x07
     9e2:	98 85       	ldd	r25, Y+8	; 0x08
     9e4:	0e 94 49 0c 	call	0x1892	; 0x1892 <__subdi3>
     9e8:	29 83       	std	Y+1, r18	; 0x01
     9ea:	3a 83       	std	Y+2, r19	; 0x02
     9ec:	4b 83       	std	Y+3, r20	; 0x03
     9ee:	5c 83       	std	Y+4, r21	; 0x04
     9f0:	6d 83       	std	Y+5, r22	; 0x05
     9f2:	7e 83       	std	Y+6, r23	; 0x06
     9f4:	8f 83       	std	Y+7, r24	; 0x07
     9f6:	98 87       	std	Y+8, r25	; 0x08
			*(toBeDispPtr + pos + decCounter - i) = 0x2F + t;
     9f8:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     9fc:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a00:	8b 85       	ldd	r24, Y+11	; 0x0b
     a02:	9c 85       	ldd	r25, Y+12	; 0x0c
     a04:	e8 0f       	add	r30, r24
     a06:	f9 1f       	adc	r31, r25
     a08:	8f e2       	ldi	r24, 0x2F	; 47
     a0a:	84 0d       	add	r24, r4
     a0c:	80 83       	st	Z, r24
     a0e:	0d c0       	rjmp	.+26     	; 0xa2a <_Z12LCD_PRINTDECjhh+0x2e2>
		}
		else{
			*(toBeDispPtr + pos + decCounter - i) = 0x30;
     a10:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     a14:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a18:	cb 84       	ldd	r12, Y+11	; 0x0b
     a1a:	dc 84       	ldd	r13, Y+12	; 0x0c
     a1c:	ec 0d       	add	r30, r12
     a1e:	fd 1d       	adc	r31, r13
     a20:	0f 2e       	mov	r0, r31
     a22:	f0 e3       	ldi	r31, 0x30	; 48
     a24:	df 2e       	mov	r13, r31
     a26:	f0 2d       	mov	r31, r0
     a28:	d0 82       	st	Z, r13
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     a2a:	01 e0       	ldi	r16, 0x01	; 1
     a2c:	20 1a       	sub	r2, r16
     a2e:	31 08       	sbc	r3, r1
     a30:	2b 85       	ldd	r18, Y+11	; 0x0b
     a32:	3c 85       	ldd	r19, Y+12	; 0x0c
     a34:	2f 5f       	subi	r18, 0xFF	; 255
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	2b 87       	std	Y+11, r18	; 0x0b
     a3a:	3c 87       	std	Y+12, r19	; 0x0c
     a3c:	3f ef       	ldi	r19, 0xFF	; 255
     a3e:	23 16       	cp	r2, r19
     a40:	33 06       	cpc	r3, r19
     a42:	09 f0       	breq	.+2      	; 0xa46 <_Z12LCD_PRINTDECjhh+0x2fe>
     a44:	23 cf       	rjmp	.-442    	; 0x88c <_Z12LCD_PRINTDECjhh+0x144>
     a46:	1f c0       	rjmp	.+62     	; 0xa86 <_Z12LCD_PRINTDECjhh+0x33e>
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
     a48:	14 01       	movw	r2, r8
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	28 1a       	sub	r2, r24
     a4e:	31 08       	sbc	r3, r1
     a50:	16 cf       	rjmp	.-468    	; 0x87e <_Z12LCD_PRINTDECjhh+0x136>
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
     a52:	9f ef       	ldi	r25, 0xFF	; 255
     a54:	89 1a       	sub	r8, r25
     a56:	99 0a       	sbc	r9, r25
     a58:	aa e0       	ldi	r26, 0x0A	; 10
     a5a:	b1 2c       	mov	r11, r1
     a5c:	c1 2c       	mov	r12, r1
     a5e:	d1 2c       	mov	r13, r1
     a60:	e1 2c       	mov	r14, r1
     a62:	f1 2c       	mov	r15, r1
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	10 e0       	ldi	r17, 0x00	; 0
     a68:	e1 ce       	rjmp	.-574    	; 0x82c <_Z12LCD_PRINTDECjhh+0xe4>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     a6a:	29 81       	ldd	r18, Y+1	; 0x01
     a6c:	3a 81       	ldd	r19, Y+2	; 0x02
     a6e:	4b 81       	ldd	r20, Y+3	; 0x03
     a70:	5c 81       	ldd	r21, Y+4	; 0x04
     a72:	6d 81       	ldd	r22, Y+5	; 0x05
     a74:	7e 81       	ldd	r23, Y+6	; 0x06
     a76:	8f 81       	ldd	r24, Y+7	; 0x07
     a78:	98 85       	ldd	r25, Y+8	; 0x08
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__cmpdi2_s8>
     a80:	19 f3       	breq	.-58     	; 0xa48 <_Z12LCD_PRINTDECjhh+0x300>
     a82:	14 f3       	brlt	.-60     	; 0xa48 <_Z12LCD_PRINTDECjhh+0x300>
     a84:	e6 cf       	rjmp	.-52     	; 0xa52 <_Z12LCD_PRINTDECjhh+0x30a>
		}
		
		
	}
	//NWR_CHAR();
}
     a86:	2e 96       	adiw	r28, 0x0e	; 14
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	9f 90       	pop	r9
     aa2:	8f 90       	pop	r8
     aa4:	7f 90       	pop	r7
     aa6:	6f 90       	pop	r6
     aa8:	5f 90       	pop	r5
     aaa:	4f 90       	pop	r4
     aac:	3f 90       	pop	r3
     aae:	2f 90       	pop	r2
     ab0:	08 95       	ret

00000ab2 <_Z9LCD_PRINTPch>:

void LCD_PRINT(char charBuf[32], uint8_t pos){
	currCursorPos = pos;
     ab2:	60 93 4e 21 	sts	0x214E, r22	; 0x80214e <currCursorPos>
     ab6:	fc 01       	movw	r30, r24
	int i = 0;
	bool NULL_FOUND = false;
	for(i = 0; !NULL_FOUND; i++){
		if(charBuf[i] == '\0'){
     ab8:	91 91       	ld	r25, Z+
     aba:	99 23       	and	r25, r25
     abc:	79 f0       	breq	.+30     	; 0xadc <_Z9LCD_PRINTPch+0x2a>
		NWR_CHAR();
	}
}

inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
     abe:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     ac2:	a0 91 4c 21 	lds	r26, 0x214C	; 0x80214c <toBeDispPtr>
     ac6:	b0 91 4d 21 	lds	r27, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     aca:	a8 0f       	add	r26, r24
     acc:	b1 1d       	adc	r27, r1
     ace:	9c 93       	st	X, r25
	currCursorPos++;
     ad0:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     ad4:	8f 5f       	subi	r24, 0xFF	; 255
     ad6:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <currCursorPos>
     ada:	ee cf       	rjmp	.-36     	; 0xab8 <_Z9LCD_PRINTPch+0x6>
     adc:	08 95       	ret

00000ade <_Z13setScrnAndPWMj>:
			setCharInToBe(charBuf[i]);
		}
	}
}

void setScrnAndPWM(uint16_t tempVal){ //Update screen with brightness value and update PWM
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
	uint16_t fullTemp = (double)tempVal * (double)tempVal * 0.11111;
     ae6:	bc 01       	movw	r22, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__floatunsisf>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     afc:	24 ea       	ldi	r18, 0xA4	; 164
     afe:	3d e8       	ldi	r19, 0x8D	; 141
     b00:	43 ee       	ldi	r20, 0xE3	; 227
     b02:	5d e3       	ldi	r21, 0x3D	; 61
     b04:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     b08:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixunssfsi>
	TCE0_CCABUF = fullTemp;
     b0c:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
     b10:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
	uint16_t dispVal = (double)tempVal / 7.68;
	LCD_PRINTDEC(dispVal, 28, 0x3);
     b14:	2f e8       	ldi	r18, 0x8F	; 143
     b16:	32 ec       	ldi	r19, 0xC2	; 194
     b18:	45 ef       	ldi	r20, 0xF5	; 245
     b1a:	50 e4       	ldi	r21, 0x40	; 64
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 09 0a 	call	0x1412	; 0x1412 <__divsf3>
     b24:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixunssfsi>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	43 e0       	ldi	r20, 0x03	; 3
     b2e:	6c e1       	ldi	r22, 0x1C	; 28
     b30:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12LCD_PRINTDECjhh>
}
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	08 95       	ret

00000b3e <_Z16updateBrightnessv>:

void updateBrightness(){
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
	uint16_t tempStore = TCC0_CNT;
     b42:	c0 91 20 08 	lds	r28, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     b46:	d0 91 21 08 	lds	r29, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
     b4a:	be 01       	movw	r22, r28
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__floatunsisf>
     b54:	27 ed       	ldi	r18, 0xD7	; 215
     b56:	3f ed       	ldi	r19, 0xDF	; 223
     b58:	4f e3       	ldi	r20, 0x3F	; 63
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gesf2>
     b60:	18 16       	cp	r1, r24
     b62:	34 f0       	brlt	.+12     	; 0xb70 <_Z16updateBrightnessv+0x32>
		tempStore = (int)MAX_CNT_BRIGHTNESS;
	}
	//Set a minimum brightness threshold
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
     b64:	c8 30       	cpi	r28, 0x08	; 8
     b66:	d1 05       	cpc	r29, r1
     b68:	28 f4       	brcc	.+10     	; 0xb74 <_Z16updateBrightnessv+0x36>
		tempStore = 0;
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
     b6c:	d0 e0       	ldi	r29, 0x00	; 0
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <_Z16updateBrightnessv+0x36>
void updateBrightness(){
	uint16_t tempStore = TCC0_CNT;
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
		tempStore = (int)MAX_CNT_BRIGHTNESS;
     b70:	c0 e0       	ldi	r28, 0x00	; 0
     b72:	dc e0       	ldi	r29, 0x0C	; 12
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
		tempStore = 0;
	}
	#define BRIGHTNESS_FINAL_DIV (BRIGHTNESS_DIV * 4)
	brightness = tempStore / BRIGHTNESS_FINAL_DIV;
     b74:	d6 95       	lsr	r29
     b76:	c7 95       	ror	r28
     b78:	d6 95       	lsr	r29
     b7a:	c7 95       	ror	r28
     b7c:	c0 93 23 21 	sts	0x2123, r28	; 0x802123 <brightness>
     b80:	d0 93 24 21 	sts	0x2124, r29	; 0x802124 <brightness+0x1>
	setScrnAndPWM(brightness);
     b84:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     b88:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     b8c:	0e 94 6f 05 	call	0xade	; 0xade <_Z13setScrnAndPWMj>
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <_Z7setMode10DMXMANMode>:

//Mode control functions
void setMode(DMXMANMode tempMode){
	if(tempMode == DMX){
     b96:	81 11       	cpse	r24, r1
     b98:	33 c0       	rjmp	.+102    	; 0xc00 <_Z7setMode10DMXMANMode+0x6a>
		if(editMode){
     b9a:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     b9e:	88 23       	and	r24, r24
     ba0:	31 f0       	breq	.+12     	; 0xbae <_Z7setMode10DMXMANMode+0x18>
			currBlinkMaskPtr = DMXBlinkVal0;
     ba2:	8a ee       	ldi	r24, 0xEA	; 234
     ba4:	90 e2       	ldi	r25, 0x20	; 32
     ba6:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     baa:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = DMXdisp;
     bae:	84 e2       	ldi	r24, 0x24	; 36
     bb0:	90 e2       	ldi	r25, 0x20	; 32
     bb2:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     bb6:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = DMX;
     bba:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <currentMode>
	USARTD0_CTRLB &= ~USART_RXEN_bm;
	//PORTD_INTCTRL &= ~PORT_INT0LVL_HI_gc;
}

inline void DMX_ENABLE(){//Enable all DMX interrupts
	TCC1_INTCTRLA |= TC_OVFINTLVL_HI_gc;//Enable timer0 interrupt
     bbe:	e6 e4       	ldi	r30, 0x46	; 70
     bc0:	f8 e0       	ldi	r31, 0x08	; 8
     bc2:	80 81       	ld	r24, Z
     bc4:	83 60       	ori	r24, 0x03	; 3
     bc6:	80 83       	st	Z, r24
	USARTD0_CTRLA |= USART_RXCINTLVL_MED_gc;//Enable USART interrupt
     bc8:	e3 ea       	ldi	r30, 0xA3	; 163
     bca:	f9 e0       	ldi	r31, 0x09	; 9
     bcc:	80 81       	ld	r24, Z
     bce:	80 62       	ori	r24, 0x20	; 32
     bd0:	80 83       	st	Z, r24
	USARTD0_CTRLB |= USART_RXEN_bm;
     bd2:	e4 ea       	ldi	r30, 0xA4	; 164
     bd4:	f9 e0       	ldi	r31, 0x09	; 9
     bd6:	80 81       	ld	r24, Z
     bd8:	80 61       	ori	r24, 0x10	; 16
     bda:	80 83       	st	Z, r24
			currBlinkMaskPtr = DMXBlinkVal0;
		}
		toBeDispPtr = DMXdisp;
		currentMode = DMX;
		DMX_ENABLE();
		LCD_PRINTDEC(DMXChan, 22, 3);
     bdc:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     be0:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     be4:	43 e0       	ldi	r20, 0x03	; 3
     be6:	66 e1       	ldi	r22, 0x16	; 22
     be8:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12LCD_PRINTDECjhh>
		LCD_PRINTDEC(DMXChan + 1, 28, 3);
     bec:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     bf0:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     bf4:	43 e0       	ldi	r20, 0x03	; 3
     bf6:	6c e1       	ldi	r22, 0x1C	; 28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12LCD_PRINTDECjhh>
     bfe:	08 95       	ret
	}
	if(tempMode == MAN){
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	41 f5       	brne	.+80     	; 0xc54 <_Z7setMode10DMXMANMode+0xbe>
		if(editMode){
     c04:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     c08:	88 23       	and	r24, r24
     c0a:	31 f0       	breq	.+12     	; 0xc18 <_Z7setMode10DMXMANMode+0x82>
			currBlinkMaskPtr = MANBlinkVal0;
     c0c:	86 e6       	ldi	r24, 0x66	; 102
     c0e:	90 e2       	ldi	r25, 0x20	; 32
     c10:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     c14:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = MANdisp;
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	90 e2       	ldi	r25, 0x20	; 32
     c1c:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     c20:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = MAN;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <currentMode>
		eeprom_write_byte(MODE_addr, modeByte);
	}
}

inline void DMX_DISABLE(){//Disable all DMX interrupts
	TCC1_INTCTRLA &= ~TC_OVFINTLVL_HI_gc;//Disable timer0 interrupt
     c2a:	e6 e4       	ldi	r30, 0x46	; 70
     c2c:	f8 e0       	ldi	r31, 0x08	; 8
     c2e:	80 81       	ld	r24, Z
     c30:	8c 7f       	andi	r24, 0xFC	; 252
     c32:	80 83       	st	Z, r24
	USARTD0_CTRLA &= ~USART_RXCINTLVL_MED_gc;//Disable USART interrupt
     c34:	e3 ea       	ldi	r30, 0xA3	; 163
     c36:	f9 e0       	ldi	r31, 0x09	; 9
     c38:	80 81       	ld	r24, Z
     c3a:	8f 7d       	andi	r24, 0xDF	; 223
     c3c:	80 83       	st	Z, r24
	USARTD0_CTRLB &= ~USART_RXEN_bm;
     c3e:	e4 ea       	ldi	r30, 0xA4	; 164
     c40:	f9 e0       	ldi	r31, 0x09	; 9
     c42:	80 81       	ld	r24, Z
     c44:	8f 7e       	andi	r24, 0xEF	; 239
     c46:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal0;
		}
		toBeDispPtr = MANdisp;
		currentMode = MAN;
		DMX_DISABLE();
		setScrnAndPWM(brightness);
     c48:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     c4c:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     c50:	0e 94 6f 05 	call	0xade	; 0xade <_Z13setScrnAndPWMj>
     c54:	08 95       	ret

00000c56 <_Z17update_RAM_EEPROMv>:
	}
}

void update_RAM_EEPROM(){ //Updates RAM with all brightness, mode and DMX information from values stored in the EEPROM
	brightness = eeprom_read_word(BRIGHTNESS_addr);
     c56:	83 e1       	ldi	r24, 0x13	; 19
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 86 0c 	call	0x190c	; 0x190c <eeprom_read_word>
     c5e:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <brightness>
     c62:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <brightness+0x1>
	DMXChan = eeprom_read_word(DMX_addr);
     c66:	85 e1       	ldi	r24, 0x15	; 21
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 86 0c 	call	0x190c	; 0x190c <eeprom_read_word>
     c6e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
     c72:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
	setScrnAndPWM(brightness);
     c76:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     c7a:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     c7e:	0e 94 6f 05 	call	0xade	; 0xade <_Z13setScrnAndPWMj>
	if(eeprom_read_byte(MODE_addr)){
     c82:	80 e1       	ldi	r24, 0x10	; 16
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 76 0c 	call	0x18ec	; 0x18ec <eeprom_read_byte>
     c8a:	88 23       	and	r24, r24
     c8c:	21 f0       	breq	.+8      	; 0xc96 <_Z17update_RAM_EEPROMv+0x40>
		setMode(MAN);
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z7setMode10DMXMANMode>
     c94:	08 95       	ret
	}
	else{
		setMode(DMX);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z7setMode10DMXMANMode>
     c9c:	08 95       	ret

00000c9e <_Z10setEncMode11encoderMode>:
	}
}

void setEncMode(encoderMode tempMode){
	switch(tempMode){
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	d9 f0       	breq	.+54     	; 0xcd8 <_Z10setEncMode11encoderMode+0x3a>
     ca2:	30 f0       	brcs	.+12     	; 0xcb0 <_Z10setEncMode11encoderMode+0x12>
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	f1 f1       	breq	.+124    	; 0xd24 <_Z10setEncMode11encoderMode+0x86>
     ca8:	83 30       	cpi	r24, 0x03	; 3
     caa:	09 f4       	brne	.+2      	; 0xcae <_Z10setEncMode11encoderMode+0x10>
     cac:	64 c0       	rjmp	.+200    	; 0xd76 <_Z10setEncMode11encoderMode+0xd8>
     cae:	08 95       	ret
		case OFF:
		EncoderMode = OFF;
     cb0:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <EncoderMode>
		TCC0_CTRLA &= ~TC_CLKSEL_DIV1_gc;
     cb4:	e0 e0       	ldi	r30, 0x00	; 0
     cb6:	f8 e0       	ldi	r31, 0x08	; 8
     cb8:	80 81       	ld	r24, Z
     cba:	8e 7f       	andi	r24, 0xFE	; 254
     cbc:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     cbe:	e6 e0       	ldi	r30, 0x06	; 6
     cc0:	f8 e0       	ldi	r31, 0x08	; 8
     cc2:	80 81       	ld	r24, Z
     cc4:	8e 7f       	andi	r24, 0xFE	; 254
     cc6:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     cc8:	e7 e0       	ldi	r30, 0x07	; 7
     cca:	f8 e0       	ldi	r31, 0x08	; 8
     ccc:	80 81       	ld	r24, Z
     cce:	8a 7f       	andi	r24, 0xFA	; 250
     cd0:	80 83       	st	Z, r24
		//Insert EEPROM write code here
		update_EEPROM_RAM();
     cd2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z17update_EEPROM_RAMv>
		break;
     cd6:	08 95       	ret

		case MODESEL:
		#define TCC0_CNT_MODE (int)(160 * MODE_DIV)
		#define TCC0_PER_MODE (int)(320 * MODE_DIV)
		TCC0_CNT = TCC0_CNT_MODE;
     cd8:	80 ea       	ldi	r24, 0xA0	; 160
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     ce0:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     ce4:	e1 e0       	ldi	r30, 0x01	; 1
     ce6:	f8 e0       	ldi	r31, 0x08	; 8
     ce8:	80 81       	ld	r24, Z
     cea:	88 7f       	andi	r24, 0xF8	; 248
     cec:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_MODE;
     cee:	80 e4       	ldi	r24, 0x40	; 64
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     cf6:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     cfa:	e6 e0       	ldi	r30, 0x06	; 6
     cfc:	f8 e0       	ldi	r31, 0x08	; 8
     cfe:	80 81       	ld	r24, Z
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	80 83       	st	Z, r24
		OVF_firstSam = true;
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <__data_end>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d0a:	e7 e0       	ldi	r30, 0x07	; 7
     d0c:	f8 e0       	ldi	r31, 0x08	; 8
     d0e:	80 81       	ld	r24, Z
     d10:	8a 7f       	andi	r24, 0xFA	; 250
     d12:	80 83       	st	Z, r24
		EncoderMode = MODESEL;
     d14:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     d18:	e0 e0       	ldi	r30, 0x00	; 0
     d1a:	f8 e0       	ldi	r31, 0x08	; 8
     d1c:	80 81       	ld	r24, Z
     d1e:	81 60       	ori	r24, 0x01	; 1
     d20:	80 83       	st	Z, r24
		break;
     d22:	08 95       	ret

		case CHANSEL:
		#define TCC0_CNT_CHANNEL (int)(160 * CHANNEL_DIV)
		#define TCC0_PER_CHANNEL (int)(320 * CHANNEL_DIV)
		EncoderMode = CHANSEL;
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     d2a:	e0 e0       	ldi	r30, 0x00	; 0
     d2c:	f8 e0       	ldi	r31, 0x08	; 8
     d2e:	80 81       	ld	r24, Z
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	80 83       	st	Z, r24
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     d34:	e1 e0       	ldi	r30, 0x01	; 1
     d36:	f8 e0       	ldi	r31, 0x08	; 8
     d38:	80 81       	ld	r24, Z
     d3a:	88 7f       	andi	r24, 0xF8	; 248
     d3c:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_CHANNEL;
     d3e:	80 e4       	ldi	r24, 0x40	; 64
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d46:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = TCC0_CNT_CHANNEL;
     d4a:	80 ea       	ldi	r24, 0xA0	; 160
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d52:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     d56:	e6 e0       	ldi	r30, 0x06	; 6
     d58:	f8 e0       	ldi	r31, 0x08	; 8
     d5a:	80 81       	ld	r24, Z
     d5c:	8e 7f       	andi	r24, 0xFE	; 254
     d5e:	80 83       	st	Z, r24
		TCC0_INTCTRLB |= TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc;
     d60:	e7 e0       	ldi	r30, 0x07	; 7
     d62:	f8 e0       	ldi	r31, 0x08	; 8
     d64:	80 81       	ld	r24, Z
     d66:	85 60       	ori	r24, 0x05	; 5
     d68:	80 83       	st	Z, r24
		CCA_firstSam = true;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <CCA_firstSam>
		CCB_firstSam = true;
     d70:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <CCB_firstSam>
		break;
     d74:	08 95       	ret

		case BRIGHTSEL:
		EncoderMode = BRIGHTSEL;
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     d7c:	e0 e0       	ldi	r30, 0x00	; 0
     d7e:	f8 e0       	ldi	r31, 0x08	; 8
     d80:	80 81       	ld	r24, Z
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24
		TCC0_CTRLB |= TC_WGMODE_DS_B_gc;
     d86:	e1 e0       	ldi	r30, 0x01	; 1
     d88:	f8 e0       	ldi	r31, 0x08	; 8
     d8a:	80 81       	ld	r24, Z
     d8c:	87 60       	ori	r24, 0x07	; 7
     d8e:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     d90:	e6 e0       	ldi	r30, 0x06	; 6
     d92:	f8 e0       	ldi	r31, 0x08	; 8
     d94:	80 81       	ld	r24, Z
     d96:	8e 7f       	andi	r24, 0xFE	; 254
     d98:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d9a:	e7 e0       	ldi	r30, 0x07	; 7
     d9c:	f8 e0       	ldi	r31, 0x08	; 8
     d9e:	80 81       	ld	r24, Z
     da0:	8a 7f       	andi	r24, 0xFA	; 250
     da2:	80 83       	st	Z, r24
		#define TCC0_PER_BRIGHTNESS (3080 * BRIGHTNESS_DIV)
		TCC0_PER = TCC0_PER_BRIGHTNESS;
     da4:	88 e0       	ldi	r24, 0x08	; 8
     da6:	9c e0       	ldi	r25, 0x0C	; 12
     da8:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     dac:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = (int)(brightness * BRIGHTNESS_FINAL_DIV);
     db0:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     db4:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     dc4:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     dc8:	08 95       	ret

00000dca <__vector_79>:
		break;
	}
}

//All ISR
ISR(TCD0_CCA_vect){
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	8f 93       	push	r24
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
	PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
     dda:	e2 e5       	ldi	r30, 0x52	; 82
     ddc:	f6 e0       	ldi	r31, 0x06	; 6
     dde:	80 81       	ld	r24, Z
     de0:	8f 7b       	andi	r24, 0xBF	; 191
     de2:	80 83       	st	Z, r24
	TCD0_INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
     de4:	e7 e0       	ldi	r30, 0x07	; 7
     de6:	f9 e0       	ldi	r31, 0x09	; 9
     de8:	80 81       	ld	r24, Z
     dea:	8e 7f       	andi	r24, 0xFE	; 254
     dec:	80 83       	st	Z, r24
} 
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	8f 91       	pop	r24
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <__vector_77>:

//PC2 interrupt when button is pressed
ISR(TCD0_OVF_vect){
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	6f 93       	push	r22
     e12:	7f 93       	push	r23
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
     e18:	af 93       	push	r26
     e1a:	bf 93       	push	r27
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
	PORTC_PIN2CTRL |= PORT_INVEN_bm;//Invert PC2 so TCD0 stays 0, until the button is released
     e20:	e2 e5       	ldi	r30, 0x52	; 82
     e22:	f6 e0       	ldi	r31, 0x06	; 6
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	80 83       	st	Z, r24
	TCD0_INTCTRLB = TC_CCAINTLVL_LO_gc; //Setup compare interrupt so input will be un-inverted after release
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x700907>
	if(!editMode){
     e30:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     e34:	81 11       	cpse	r24, r1
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <__vector_77+0x58>
		TCD0_PER = 1000; //Set debounce timer for short press detection
     e38:	88 ee       	ldi	r24, 0xE8	; 232
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e40:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
		editMode = true;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <editMode>
		currentSelector = 0;
     e4a:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <currentSelector>
		editCounter = 0;
     e4e:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     e52:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	}
	if(currentMode == DMX){
     e56:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     e5a:	81 11       	cpse	r24, r1
     e5c:	4b c0       	rjmp	.+150    	; 0xef4 <__vector_77+0xf6>
		switch(currentSelector){
     e5e:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	11 f1       	breq	.+68     	; 0xeaa <__vector_77+0xac>
     e66:	28 f4       	brcc	.+10     	; 0xe72 <__vector_77+0x74>
     e68:	88 23       	and	r24, r24
     e6a:	41 f0       	breq	.+16     	; 0xe7c <__vector_77+0x7e>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	81 f0       	breq	.+32     	; 0xe90 <__vector_77+0x92>
     e70:	41 c0       	rjmp	.+130    	; 0xef4 <__vector_77+0xf6>
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	21 f1       	breq	.+72     	; 0xebe <__vector_77+0xc0>
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	61 f1       	breq	.+88     	; 0xed2 <__vector_77+0xd4>
     e7a:	3c c0       	rjmp	.+120    	; 0xef4 <__vector_77+0xf6>
			case 0:
				currBlinkMaskPtr = DMXBlinkVal0;
     e7c:	8a ee       	ldi	r24, 0xEA	; 234
     e7e:	90 e2       	ldi	r25, 0x20	; 32
     e80:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e84:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				setEncMode(MODESEL);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10setEncMode11encoderMode>
				break;
     e8e:	32 c0       	rjmp	.+100    	; 0xef4 <__vector_77+0xf6>
			case 1:
				currBlinkMaskPtr = DMXBlinkVal1;
     e90:	89 ec       	ldi	r24, 0xC9	; 201
     e92:	90 e2       	ldi	r25, 0x20	; 32
     e94:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e98:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				dmxMult = 100;
     e9c:	84 e6       	ldi	r24, 0x64	; 100
     e9e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
				setEncMode(CHANSEL);
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10setEncMode11encoderMode>
				break;
     ea8:	25 c0       	rjmp	.+74     	; 0xef4 <__vector_77+0xf6>
			case 2:
				currBlinkMaskPtr = DMXBlinkVal2;
     eaa:	88 ea       	ldi	r24, 0xA8	; 168
     eac:	90 e2       	ldi	r25, 0x20	; 32
     eae:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     eb2:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				dmxMult = 10;
     eb6:	8a e0       	ldi	r24, 0x0A	; 10
     eb8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
				break;
     ebc:	4c c0       	rjmp	.+152    	; 0xf56 <__vector_77+0x158>
			case 3:
				currBlinkMaskPtr = DMXBlinkVal3;
     ebe:	87 e8       	ldi	r24, 0x87	; 135
     ec0:	90 e2       	ldi	r25, 0x20	; 32
     ec2:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     ec6:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				dmxMult = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
				break;
     ed0:	42 c0       	rjmp	.+132    	; 0xf56 <__vector_77+0x158>
			case 4:
				setEncMode(OFF);
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10setEncMode11encoderMode>
				currBlinkMaskPtr = NULLBlinkVal;
     ed8:	82 e7       	ldi	r24, 0x72	; 114
     eda:	91 e2       	ldi	r25, 0x21	; 33
     edc:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     ee0:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				editMode = false;
     ee4:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
				TCD0_PER = BUTTON_DELAY;//Set required button press time to 1 second
     ee8:	86 ea       	ldi	r24, 0xA6	; 166
     eea:	98 e2       	ldi	r25, 0x28	; 40
     eec:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     ef0:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
				break;
		}
	}
	if(currentMode == MAN){
     ef4:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	69 f5       	brne	.+90     	; 0xf56 <__vector_77+0x158>
		switch(currentSelector){
     efc:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	71 f0       	breq	.+28     	; 0xf20 <__vector_77+0x122>
     f04:	18 f0       	brcs	.+6      	; 0xf0c <__vector_77+0x10e>
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	a9 f0       	breq	.+42     	; 0xf34 <__vector_77+0x136>
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <__vector_77+0x158>
			case 0:
				currBlinkMaskPtr = MANBlinkVal0;
     f0c:	86 e6       	ldi	r24, 0x66	; 102
     f0e:	90 e2       	ldi	r25, 0x20	; 32
     f10:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f14:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				setEncMode(MODESEL);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10setEncMode11encoderMode>
				break;
     f1e:	1b c0       	rjmp	.+54     	; 0xf56 <__vector_77+0x158>
			case 1:
				currBlinkMaskPtr = MANBlinkVal1;
     f20:	85 e4       	ldi	r24, 0x45	; 69
     f22:	90 e2       	ldi	r25, 0x20	; 32
     f24:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f28:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				setEncMode(BRIGHTSEL);
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10setEncMode11encoderMode>
				break;
     f32:	11 c0       	rjmp	.+34     	; 0xf56 <__vector_77+0x158>
			case 2:
				currBlinkMaskPtr = NULLBlinkVal;
     f34:	82 e7       	ldi	r24, 0x72	; 114
     f36:	91 e2       	ldi	r25, 0x21	; 33
     f38:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     f3c:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				editMode = false;
     f40:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
				setEncMode(OFF);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10setEncMode11encoderMode>
				TCD0_PER = BUTTON_DELAY;//Set required button press time to 1 second
     f4a:	86 ea       	ldi	r24, 0xA6	; 166
     f4c:	98 e2       	ldi	r25, 0x28	; 40
     f4e:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     f52:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
				break;
		}
	}
	currentSelector++;
     f56:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <currentSelector>
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_14>:

ISR(TCC0_OVF_vect){
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
	TCC0_CNT = TCC0_CNT_MODE;
     fa4:	80 ea       	ldi	r24, 0xA0	; 160
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     fac:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	if(!OVF_firstSam){
     fb0:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <__data_end>
     fb4:	81 11       	cpse	r24, r1
     fb6:	0c c0       	rjmp	.+24     	; 0xfd0 <__vector_14+0x4e>
		if(currentMode == MAN){
     fb8:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <__vector_14+0x46>
			setMode(DMX);
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z7setMode10DMXMANMode>
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <__vector_14+0x52>
		}
		else{
			setMode(MAN);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z7setMode10DMXMANMode>
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <__vector_14+0x52>
		}
	}
	else{
		OVF_firstSam = false;
     fd0:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <__data_end>
	}
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_16>:

ISR(TCC0_CCA_vect){
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
	if(!CCA_firstSam){
    1018:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <CCA_firstSam>
    101c:	81 11       	cpse	r24, r1
    101e:	33 c0       	rjmp	.+102    	; 0x1086 <__vector_16+0x90>
		if(CCB_flag){
    1020:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <CCB_flag>
    1024:	88 23       	and	r24, r24
    1026:	19 f0       	breq	.+6      	; 0x102e <__vector_16+0x38>
			CCB_flag = false;
    1028:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <CCB_flag>
    102c:	2e c0       	rjmp	.+92     	; 0x108a <__vector_16+0x94>
		}
		else{
			CCA_flag = true;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <CCA_flag>
			if(DMXChan - dmxMult >= DMXmin){
    1034:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1038:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    103c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1040:	82 1b       	sub	r24, r18
    1042:	91 09       	sbc	r25, r1
    1044:	18 16       	cp	r1, r24
    1046:	19 06       	cpc	r1, r25
    1048:	04 f5       	brge	.+64     	; 0x108a <__vector_16+0x94>
				DMXChan -= dmxMult;
    104a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    104e:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1052:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1056:	82 1b       	sub	r24, r18
    1058:	91 09       	sbc	r25, r1
    105a:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    105e:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    1062:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1066:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    106a:	43 e0       	ldi	r20, 0x03	; 3
    106c:	66 e1       	ldi	r22, 0x16	; 22
    106e:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    1072:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1076:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    107a:	43 e0       	ldi	r20, 0x03	; 3
    107c:	6c e1       	ldi	r22, 0x1C	; 28
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12LCD_PRINTDECjhh>
    1084:	02 c0       	rjmp	.+4      	; 0x108a <__vector_16+0x94>
			}
		}
	}
	else{
		CCA_firstSam = false;
    1086:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <CCA_firstSam>
	}
}
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <__vector_17>:

ISR(TCC0_CCB_vect){
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
	if(!CCB_firstSam){
    10ce:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <CCB_firstSam>
    10d2:	81 11       	cpse	r24, r1
    10d4:	33 c0       	rjmp	.+102    	; 0x113c <__vector_17+0x90>
		if(CCA_flag){
    10d6:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <CCA_flag>
    10da:	88 23       	and	r24, r24
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <__vector_17+0x38>
			CCA_flag = false;
    10de:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <CCA_flag>
    10e2:	2e c0       	rjmp	.+92     	; 0x1140 <__vector_17+0x94>
		}
		else{
			CCB_flag = true;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <CCB_flag>
			if(DMXChan + dmxMult <= DMXMax){
    10ea:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    10ee:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    10f2:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    10f6:	82 0f       	add	r24, r18
    10f8:	91 1d       	adc	r25, r1
    10fa:	81 15       	cp	r24, r1
    10fc:	92 40       	sbci	r25, 0x02	; 2
    10fe:	04 f5       	brge	.+64     	; 0x1140 <__vector_17+0x94>
				DMXChan += dmxMult;
    1100:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1104:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1108:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    110c:	82 0f       	add	r24, r18
    110e:	91 1d       	adc	r25, r1
    1110:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    1114:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    1118:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    111c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1120:	43 e0       	ldi	r20, 0x03	; 3
    1122:	66 e1       	ldi	r22, 0x16	; 22
    1124:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    1128:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    112c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1130:	43 e0       	ldi	r20, 0x03	; 3
    1132:	6c e1       	ldi	r22, 0x1C	; 28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12LCD_PRINTDECjhh>
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <__vector_17+0x94>
			}
		}
	}
	else{
		CCB_firstSam = false;
    113c:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <CCB_firstSam>
	}
}
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <__vector_10>:

ISR(RTC_OVF_vect){
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	2f 93       	push	r18
    116e:	3f 93       	push	r19
    1170:	4f 93       	push	r20
    1172:	5f 93       	push	r21
    1174:	6f 93       	push	r22
    1176:	7f 93       	push	r23
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25
    117c:	af 93       	push	r26
    117e:	bf 93       	push	r27
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31
	editCounter++;
    1184:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    1188:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <editCounter>
    1192:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <editCounter+0x1>
	if(editCounter > 15){
    1196:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    119a:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    119e:	40 97       	sbiw	r24, 0x10	; 16
    11a0:	88 f0       	brcs	.+34     	; 0x11c4 <__vector_10+0x62>
		setEncMode(OFF);
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10setEncMode11encoderMode>
		currBlinkMaskPtr = NULLBlinkVal;
    11a8:	82 e7       	ldi	r24, 0x72	; 114
    11aa:	91 e2       	ldi	r25, 0x21	; 33
    11ac:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
    11b0:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		editMode = false;
    11b4:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
		TCD0_PER = 31250;//Set required button press time to 1 second
    11b8:	82 e1       	ldi	r24, 0x12	; 18
    11ba:	9a e7       	ldi	r25, 0x7A	; 122
    11bc:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    11c0:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	}
}
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <__vector_88>:

ISR(USARTD0_RXC_vect){//Interrupt for new DMX char
    11e6:	1f 92       	push	r1
    11e8:	0f 92       	push	r0
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	0f 92       	push	r0
    11ee:	11 24       	eor	r1, r1
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
	uint16_t USART_data = USARTD0_DATA;
    1208:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    120c:	30 e0       	ldi	r19, 0x00	; 0
	if(cnt == DMXChan){//If DMX channel matches the set DMX channel
    120e:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    1212:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    1216:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    121a:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    121e:	48 17       	cp	r20, r24
    1220:	59 07       	cpc	r21, r25
    1222:	31 f4       	brne	.+12     	; 0x1230 <__vector_88+0x4a>
		finalRes = USART_data << 8; //Buffer 8 MSB
    1224:	92 2f       	mov	r25, r18
    1226:	88 27       	eor	r24, r24
    1228:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    122c:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		//LCD_PRINTDEC(USART_data, 16, 5);
	}
	if(cnt == DMXChan + 1){//If DMX channel matches the set DMX channel + 1
    1230:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1234:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1238:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    123c:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	84 17       	cp	r24, r20
    1244:	95 07       	cpc	r25, r21
    1246:	a9 f4       	brne	.+42     	; 0x1272 <__vector_88+0x8c>
		//LCD_PRINTDEC(USART_data, 0, 5);
		finalRes |= USART_data; //Buffer LSB
    1248:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    124c:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    1250:	82 2b       	or	r24, r18
    1252:	93 2b       	or	r25, r19
    1254:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    1258:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		TCE0_CCA = finalRes; //Set compare register for PWM
    125c:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    1260:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    1264:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    1268:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
		
		lt = true;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
	}

	if(DMXErrFlag){
    1272:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    1276:	88 23       	and	r24, r24
    1278:	59 f0       	breq	.+22     	; 0x1290 <__vector_88+0xaa>
		lt = true;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
		if(cnt == 0 && USART_data == 0){
    1280:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    1284:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    1288:	89 2b       	or	r24, r25
    128a:	11 f4       	brne	.+4      	; 0x1290 <__vector_88+0xaa>
    128c:	23 2b       	or	r18, r19
    128e:	71 f0       	breq	.+28     	; 0x12ac <__vector_88+0xc6>
			DMXErrFlag = false;
			LCD_PRINT("      ", 10);
			lt = true;
		}
	}
	DMXErrCnt = 0;
    1290:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    1294:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	cnt++;//Increment channel counter
    1298:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    129c:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <cnt>
    12a6:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <cnt+0x1>
}
    12aa:	0b c0       	rjmp	.+22     	; 0x12c2 <__vector_88+0xdc>
	}

	if(DMXErrFlag){
		lt = true;
		if(cnt == 0 && USART_data == 0){
			DMXErrFlag = false;
    12ac:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <DMXErrFlag>
			LCD_PRINT("      ", 10);
    12b0:	6a e0       	ldi	r22, 0x0A	; 10
    12b2:	8b e0       	ldi	r24, 0x0B	; 11
    12b4:	91 e2       	ldi	r25, 0x21	; 33
    12b6:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z9LCD_PRINTPch>
			lt = true;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
    12c0:	e7 cf       	rjmp	.-50     	; 0x1290 <__vector_88+0xaa>
		}
	}
	DMXErrCnt = 0;
	cnt++;//Increment channel counter
}
    12c2:	ff 91       	pop	r31
    12c4:	ef 91       	pop	r30
    12c6:	bf 91       	pop	r27
    12c8:	af 91       	pop	r26
    12ca:	9f 91       	pop	r25
    12cc:	8f 91       	pop	r24
    12ce:	7f 91       	pop	r23
    12d0:	6f 91       	pop	r22
    12d2:	5f 91       	pop	r21
    12d4:	4f 91       	pop	r20
    12d6:	3f 91       	pop	r19
    12d8:	2f 91       	pop	r18
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_20>:

ISR(TCC1_OVF_vect){
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	2f 93       	push	r18
    12f0:	3f 93       	push	r19
    12f2:	4f 93       	push	r20
    12f4:	5f 93       	push	r21
    12f6:	6f 93       	push	r22
    12f8:	7f 93       	push	r23
    12fa:	8f 93       	push	r24
    12fc:	9f 93       	push	r25
    12fe:	af 93       	push	r26
    1300:	bf 93       	push	r27
    1302:	cf 93       	push	r28
    1304:	ef 93       	push	r30
    1306:	ff 93       	push	r31
	cnt = 0; //Reset counter if there hasn't been any signal change in 80 us on the DMX line (PD2)
    1308:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <cnt>
    130c:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <cnt+0x1>
	DMXErrCnt++;
    1310:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    1314:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <DMXErrCnt>
    131e:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <DMXErrCnt+0x1>
	if((DMXErrCnt > 13000) && !DMXErrFlag){
    1322:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    1326:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    132a:	89 3c       	cpi	r24, 0xC9	; 201
    132c:	92 43       	sbci	r25, 0x32	; 50
    132e:	90 f0       	brcs	.+36     	; 0x1354 <__vector_20+0x70>
    1330:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    1334:	81 11       	cpse	r24, r1
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <__vector_20+0x70>
		DMXErrFlag = true;
    1338:	c1 e0       	ldi	r28, 0x01	; 1
    133a:	c0 93 25 21 	sts	0x2125, r28	; 0x802125 <DMXErrFlag>
		LCD_PRINT("NO DMX", 10);
    133e:	6a e0       	ldi	r22, 0x0A	; 10
    1340:	82 e1       	ldi	r24, 0x12	; 18
    1342:	91 e2       	ldi	r25, 0x21	; 33
    1344:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z9LCD_PRINTPch>
		lt = true;
    1348:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
		DMXErrCnt = 0;
    134c:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    1350:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	}
	
}
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	cf 91       	pop	r28
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <main>:

int main(void)
{
	PORTC_DIRSET = (1 << MOSI_PIN) | (1 << SS_PIN) | (1 << SCK_PIN) | (1 << RS_PIN); //Set all pins used for communication to output
    1378:	88 eb       	ldi	r24, 0xB8	; 184
    137a:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	clk_set_32MHz();
    137e:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z13clk_set_32MHzv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1382:	2f ef       	ldi	r18, 0xFF	; 255
    1384:	85 ed       	ldi	r24, 0xD5	; 213
    1386:	96 e0       	ldi	r25, 0x06	; 6
    1388:	21 50       	subi	r18, 0x01	; 1
    138a:	80 40       	sbci	r24, 0x00	; 0
    138c:	90 40       	sbci	r25, 0x00	; 0
    138e:	e1 f7       	brne	.-8      	; 0x1388 <main+0x10>
    1390:	00 c0       	rjmp	.+0      	; 0x1392 <main+0x1a>
    1392:	00 00       	nop
	_delay_ms(70);
	setup_PWM();
    1394:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z9setup_PWMv>
	update_RAM_EEPROM();
    1398:	0e 94 2b 06 	call	0xc56	; 0xc56 <_Z17update_RAM_EEPROMv>
    setup_SPI();
    139c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z9setup_SPIv>
    13a0:	2f ef       	ldi	r18, 0xFF	; 255
    13a2:	83 ec       	ldi	r24, 0xC3	; 195
    13a4:	99 e0       	ldi	r25, 0x09	; 9
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	80 40       	sbci	r24, 0x00	; 0
    13aa:	90 40       	sbci	r25, 0x00	; 0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <main+0x2e>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <main+0x38>
    13b0:	00 00       	nop
    _delay_ms(100);
    setup_disp();
    13b2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z10setup_dispv>
	setup_btn();
    13b6:	0e 94 b0 01 	call	0x360	; 0x360 <_Z9setup_btnv>
	QDEC_INIT();
    13ba:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_Z9QDEC_INITv>
	setup_blink();
    13be:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z11setup_blinkv>
	DMX_init();
    13c2:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z8DMX_initv>
	updateDisp();
    13c6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10updateDispv>
	setup_int();
    13ca:	0e 94 cf 01 	call	0x39e	; 0x39e <_Z9setup_intv>
		if(editMode){ //If the display is in edit mode update the display
			if(EncoderMode == BRIGHTSEL){
				updateBrightness();
			}
			updateDisp();
			lt = true;
    13ce:	c1 e0       	ldi	r28, 0x01	; 1
	updateDisp();
	setup_int();

    while (1) 
    {
		if(editMode){ //If the display is in edit mode update the display
    13d0:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
    13d4:	88 23       	and	r24, r24
    13d6:	59 f0       	breq	.+22     	; 0x13ee <main+0x76>
			if(EncoderMode == BRIGHTSEL){
    13d8:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	11 f4       	brne	.+4      	; 0x13e4 <main+0x6c>
				updateBrightness();
    13e0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_Z16updateBrightnessv>
			}
			updateDisp();
    13e4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10updateDispv>
			lt = true;
    13e8:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
    13ec:	08 c0       	rjmp	.+16     	; 0x13fe <main+0x86>
		}
		else{ 
			if (lt) //If lt is altered by another factor update the display as well
    13ee:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <lt>
    13f2:	88 23       	and	r24, r24
    13f4:	21 f0       	breq	.+8      	; 0x13fe <main+0x86>
			{
				updateDisp();
    13f6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10updateDispv>
				lt = false;
    13fa:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <lt>
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	83 ef       	ldi	r24, 0xF3	; 243
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	80 40       	sbci	r24, 0x00	; 0
    1408:	90 40       	sbci	r25, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <main+0x8c>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <main+0x96>
    140e:	00 00       	nop
    1410:	df cf       	rjmp	.-66     	; 0x13d0 <main+0x58>

00001412 <__divsf3>:
    1412:	0e 94 1d 0a 	call	0x143a	; 0x143a <__divsf3x>
    1416:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_round>
    141a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_pscB>
    141e:	58 f0       	brcs	.+22     	; 0x1436 <__divsf3+0x24>
    1420:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscA>
    1424:	40 f0       	brcs	.+16     	; 0x1436 <__divsf3+0x24>
    1426:	29 f4       	brne	.+10     	; 0x1432 <__divsf3+0x20>
    1428:	5f 3f       	cpi	r21, 0xFF	; 255
    142a:	29 f0       	breq	.+10     	; 0x1436 <__divsf3+0x24>
    142c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_inf>
    1430:	51 11       	cpse	r21, r1
    1432:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_szero>
    1436:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_nan>

0000143a <__divsf3x>:
    143a:	0e 94 0f 0b 	call	0x161e	; 0x161e <__fp_split3>
    143e:	68 f3       	brcs	.-38     	; 0x141a <__divsf3+0x8>

00001440 <__divsf3_pse>:
    1440:	99 23       	and	r25, r25
    1442:	b1 f3       	breq	.-20     	; 0x1430 <__divsf3+0x1e>
    1444:	55 23       	and	r21, r21
    1446:	91 f3       	breq	.-28     	; 0x142c <__divsf3+0x1a>
    1448:	95 1b       	sub	r25, r21
    144a:	55 0b       	sbc	r21, r21
    144c:	bb 27       	eor	r27, r27
    144e:	aa 27       	eor	r26, r26
    1450:	62 17       	cp	r22, r18
    1452:	73 07       	cpc	r23, r19
    1454:	84 07       	cpc	r24, r20
    1456:	38 f0       	brcs	.+14     	; 0x1466 <__divsf3_pse+0x26>
    1458:	9f 5f       	subi	r25, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	44 1f       	adc	r20, r20
    1462:	aa 1f       	adc	r26, r26
    1464:	a9 f3       	breq	.-22     	; 0x1450 <__divsf3_pse+0x10>
    1466:	35 d0       	rcall	.+106    	; 0x14d2 <__divsf3_pse+0x92>
    1468:	0e 2e       	mov	r0, r30
    146a:	3a f0       	brmi	.+14     	; 0x147a <__divsf3_pse+0x3a>
    146c:	e0 e8       	ldi	r30, 0x80	; 128
    146e:	32 d0       	rcall	.+100    	; 0x14d4 <__divsf3_pse+0x94>
    1470:	91 50       	subi	r25, 0x01	; 1
    1472:	50 40       	sbci	r21, 0x00	; 0
    1474:	e6 95       	lsr	r30
    1476:	00 1c       	adc	r0, r0
    1478:	ca f7       	brpl	.-14     	; 0x146c <__divsf3_pse+0x2c>
    147a:	2b d0       	rcall	.+86     	; 0x14d2 <__divsf3_pse+0x92>
    147c:	fe 2f       	mov	r31, r30
    147e:	29 d0       	rcall	.+82     	; 0x14d2 <__divsf3_pse+0x92>
    1480:	66 0f       	add	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	88 1f       	adc	r24, r24
    1486:	bb 1f       	adc	r27, r27
    1488:	26 17       	cp	r18, r22
    148a:	37 07       	cpc	r19, r23
    148c:	48 07       	cpc	r20, r24
    148e:	ab 07       	cpc	r26, r27
    1490:	b0 e8       	ldi	r27, 0x80	; 128
    1492:	09 f0       	breq	.+2      	; 0x1496 <__divsf3_pse+0x56>
    1494:	bb 0b       	sbc	r27, r27
    1496:	80 2d       	mov	r24, r0
    1498:	bf 01       	movw	r22, r30
    149a:	ff 27       	eor	r31, r31
    149c:	93 58       	subi	r25, 0x83	; 131
    149e:	5f 4f       	sbci	r21, 0xFF	; 255
    14a0:	3a f0       	brmi	.+14     	; 0x14b0 <__divsf3_pse+0x70>
    14a2:	9e 3f       	cpi	r25, 0xFE	; 254
    14a4:	51 05       	cpc	r21, r1
    14a6:	78 f0       	brcs	.+30     	; 0x14c6 <__divsf3_pse+0x86>
    14a8:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_inf>
    14ac:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_szero>
    14b0:	5f 3f       	cpi	r21, 0xFF	; 255
    14b2:	e4 f3       	brlt	.-8      	; 0x14ac <__divsf3_pse+0x6c>
    14b4:	98 3e       	cpi	r25, 0xE8	; 232
    14b6:	d4 f3       	brlt	.-12     	; 0x14ac <__divsf3_pse+0x6c>
    14b8:	86 95       	lsr	r24
    14ba:	77 95       	ror	r23
    14bc:	67 95       	ror	r22
    14be:	b7 95       	ror	r27
    14c0:	f7 95       	ror	r31
    14c2:	9f 5f       	subi	r25, 0xFF	; 255
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__divsf3_pse+0x78>
    14c6:	88 0f       	add	r24, r24
    14c8:	91 1d       	adc	r25, r1
    14ca:	96 95       	lsr	r25
    14cc:	87 95       	ror	r24
    14ce:	97 f9       	bld	r25, 7
    14d0:	08 95       	ret
    14d2:	e1 e0       	ldi	r30, 0x01	; 1
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	bb 1f       	adc	r27, r27
    14dc:	62 17       	cp	r22, r18
    14de:	73 07       	cpc	r23, r19
    14e0:	84 07       	cpc	r24, r20
    14e2:	ba 07       	cpc	r27, r26
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <__divsf3_pse+0xae>
    14e6:	62 1b       	sub	r22, r18
    14e8:	73 0b       	sbc	r23, r19
    14ea:	84 0b       	sbc	r24, r20
    14ec:	ba 0b       	sbc	r27, r26
    14ee:	ee 1f       	adc	r30, r30
    14f0:	88 f7       	brcc	.-30     	; 0x14d4 <__divsf3_pse+0x94>
    14f2:	e0 95       	com	r30
    14f4:	08 95       	ret

000014f6 <__fixunssfsi>:
    14f6:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_splitA>
    14fa:	88 f0       	brcs	.+34     	; 0x151e <__fixunssfsi+0x28>
    14fc:	9f 57       	subi	r25, 0x7F	; 127
    14fe:	98 f0       	brcs	.+38     	; 0x1526 <__fixunssfsi+0x30>
    1500:	b9 2f       	mov	r27, r25
    1502:	99 27       	eor	r25, r25
    1504:	b7 51       	subi	r27, 0x17	; 23
    1506:	b0 f0       	brcs	.+44     	; 0x1534 <__fixunssfsi+0x3e>
    1508:	e1 f0       	breq	.+56     	; 0x1542 <__fixunssfsi+0x4c>
    150a:	66 0f       	add	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	1a f0       	brmi	.+6      	; 0x151a <__fixunssfsi+0x24>
    1514:	ba 95       	dec	r27
    1516:	c9 f7       	brne	.-14     	; 0x150a <__fixunssfsi+0x14>
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <__fixunssfsi+0x4c>
    151a:	b1 30       	cpi	r27, 0x01	; 1
    151c:	91 f0       	breq	.+36     	; 0x1542 <__fixunssfsi+0x4c>
    151e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_zero>
    1522:	b1 e0       	ldi	r27, 0x01	; 1
    1524:	08 95       	ret
    1526:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_zero>
    152a:	67 2f       	mov	r22, r23
    152c:	78 2f       	mov	r23, r24
    152e:	88 27       	eor	r24, r24
    1530:	b8 5f       	subi	r27, 0xF8	; 248
    1532:	39 f0       	breq	.+14     	; 0x1542 <__fixunssfsi+0x4c>
    1534:	b9 3f       	cpi	r27, 0xF9	; 249
    1536:	cc f3       	brlt	.-14     	; 0x152a <__fixunssfsi+0x34>
    1538:	86 95       	lsr	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b3 95       	inc	r27
    1540:	d9 f7       	brne	.-10     	; 0x1538 <__fixunssfsi+0x42>
    1542:	3e f4       	brtc	.+14     	; 0x1552 <__fixunssfsi+0x5c>
    1544:	90 95       	com	r25
    1546:	80 95       	com	r24
    1548:	70 95       	com	r23
    154a:	61 95       	neg	r22
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	8f 4f       	sbci	r24, 0xFF	; 255
    1550:	9f 4f       	sbci	r25, 0xFF	; 255
    1552:	08 95       	ret

00001554 <__floatunsisf>:
    1554:	e8 94       	clt
    1556:	09 c0       	rjmp	.+18     	; 0x156a <__floatsisf+0x12>

00001558 <__floatsisf>:
    1558:	97 fb       	bst	r25, 7
    155a:	3e f4       	brtc	.+14     	; 0x156a <__floatsisf+0x12>
    155c:	90 95       	com	r25
    155e:	80 95       	com	r24
    1560:	70 95       	com	r23
    1562:	61 95       	neg	r22
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	8f 4f       	sbci	r24, 0xFF	; 255
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	99 23       	and	r25, r25
    156c:	a9 f0       	breq	.+42     	; 0x1598 <__floatsisf+0x40>
    156e:	f9 2f       	mov	r31, r25
    1570:	96 e9       	ldi	r25, 0x96	; 150
    1572:	bb 27       	eor	r27, r27
    1574:	93 95       	inc	r25
    1576:	f6 95       	lsr	r31
    1578:	87 95       	ror	r24
    157a:	77 95       	ror	r23
    157c:	67 95       	ror	r22
    157e:	b7 95       	ror	r27
    1580:	f1 11       	cpse	r31, r1
    1582:	f8 cf       	rjmp	.-16     	; 0x1574 <__floatsisf+0x1c>
    1584:	fa f4       	brpl	.+62     	; 0x15c4 <__floatsisf+0x6c>
    1586:	bb 0f       	add	r27, r27
    1588:	11 f4       	brne	.+4      	; 0x158e <__floatsisf+0x36>
    158a:	60 ff       	sbrs	r22, 0
    158c:	1b c0       	rjmp	.+54     	; 0x15c4 <__floatsisf+0x6c>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	16 c0       	rjmp	.+44     	; 0x15c4 <__floatsisf+0x6c>
    1598:	88 23       	and	r24, r24
    159a:	11 f0       	breq	.+4      	; 0x15a0 <__floatsisf+0x48>
    159c:	96 e9       	ldi	r25, 0x96	; 150
    159e:	11 c0       	rjmp	.+34     	; 0x15c2 <__floatsisf+0x6a>
    15a0:	77 23       	and	r23, r23
    15a2:	21 f0       	breq	.+8      	; 0x15ac <__floatsisf+0x54>
    15a4:	9e e8       	ldi	r25, 0x8E	; 142
    15a6:	87 2f       	mov	r24, r23
    15a8:	76 2f       	mov	r23, r22
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <__floatsisf+0x5e>
    15ac:	66 23       	and	r22, r22
    15ae:	71 f0       	breq	.+28     	; 0x15cc <__floatsisf+0x74>
    15b0:	96 e8       	ldi	r25, 0x86	; 134
    15b2:	86 2f       	mov	r24, r22
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	2a f0       	brmi	.+10     	; 0x15c4 <__floatsisf+0x6c>
    15ba:	9a 95       	dec	r25
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	da f7       	brpl	.-10     	; 0x15ba <__floatsisf+0x62>
    15c4:	88 0f       	add	r24, r24
    15c6:	96 95       	lsr	r25
    15c8:	87 95       	ror	r24
    15ca:	97 f9       	bld	r25, 7
    15cc:	08 95       	ret

000015ce <__fp_inf>:
    15ce:	97 f9       	bld	r25, 7
    15d0:	9f 67       	ori	r25, 0x7F	; 127
    15d2:	80 e8       	ldi	r24, 0x80	; 128
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	08 95       	ret

000015da <__fp_nan>:
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	80 ec       	ldi	r24, 0xC0	; 192
    15de:	08 95       	ret

000015e0 <__fp_pscA>:
    15e0:	00 24       	eor	r0, r0
    15e2:	0a 94       	dec	r0
    15e4:	16 16       	cp	r1, r22
    15e6:	17 06       	cpc	r1, r23
    15e8:	18 06       	cpc	r1, r24
    15ea:	09 06       	cpc	r0, r25
    15ec:	08 95       	ret

000015ee <__fp_pscB>:
    15ee:	00 24       	eor	r0, r0
    15f0:	0a 94       	dec	r0
    15f2:	12 16       	cp	r1, r18
    15f4:	13 06       	cpc	r1, r19
    15f6:	14 06       	cpc	r1, r20
    15f8:	05 06       	cpc	r0, r21
    15fa:	08 95       	ret

000015fc <__fp_round>:
    15fc:	09 2e       	mov	r0, r25
    15fe:	03 94       	inc	r0
    1600:	00 0c       	add	r0, r0
    1602:	11 f4       	brne	.+4      	; 0x1608 <__fp_round+0xc>
    1604:	88 23       	and	r24, r24
    1606:	52 f0       	brmi	.+20     	; 0x161c <__fp_round+0x20>
    1608:	bb 0f       	add	r27, r27
    160a:	40 f4       	brcc	.+16     	; 0x161c <__fp_round+0x20>
    160c:	bf 2b       	or	r27, r31
    160e:	11 f4       	brne	.+4      	; 0x1614 <__fp_round+0x18>
    1610:	60 ff       	sbrs	r22, 0
    1612:	04 c0       	rjmp	.+8      	; 0x161c <__fp_round+0x20>
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	08 95       	ret

0000161e <__fp_split3>:
    161e:	57 fd       	sbrc	r21, 7
    1620:	90 58       	subi	r25, 0x80	; 128
    1622:	44 0f       	add	r20, r20
    1624:	55 1f       	adc	r21, r21
    1626:	59 f0       	breq	.+22     	; 0x163e <__fp_splitA+0x10>
    1628:	5f 3f       	cpi	r21, 0xFF	; 255
    162a:	71 f0       	breq	.+28     	; 0x1648 <__fp_splitA+0x1a>
    162c:	47 95       	ror	r20

0000162e <__fp_splitA>:
    162e:	88 0f       	add	r24, r24
    1630:	97 fb       	bst	r25, 7
    1632:	99 1f       	adc	r25, r25
    1634:	61 f0       	breq	.+24     	; 0x164e <__fp_splitA+0x20>
    1636:	9f 3f       	cpi	r25, 0xFF	; 255
    1638:	79 f0       	breq	.+30     	; 0x1658 <__fp_splitA+0x2a>
    163a:	87 95       	ror	r24
    163c:	08 95       	ret
    163e:	12 16       	cp	r1, r18
    1640:	13 06       	cpc	r1, r19
    1642:	14 06       	cpc	r1, r20
    1644:	55 1f       	adc	r21, r21
    1646:	f2 cf       	rjmp	.-28     	; 0x162c <__fp_split3+0xe>
    1648:	46 95       	lsr	r20
    164a:	f1 df       	rcall	.-30     	; 0x162e <__fp_splitA>
    164c:	08 c0       	rjmp	.+16     	; 0x165e <__fp_splitA+0x30>
    164e:	16 16       	cp	r1, r22
    1650:	17 06       	cpc	r1, r23
    1652:	18 06       	cpc	r1, r24
    1654:	99 1f       	adc	r25, r25
    1656:	f1 cf       	rjmp	.-30     	; 0x163a <__fp_splitA+0xc>
    1658:	86 95       	lsr	r24
    165a:	71 05       	cpc	r23, r1
    165c:	61 05       	cpc	r22, r1
    165e:	08 94       	sec
    1660:	08 95       	ret

00001662 <__fp_zero>:
    1662:	e8 94       	clt

00001664 <__fp_szero>:
    1664:	bb 27       	eor	r27, r27
    1666:	66 27       	eor	r22, r22
    1668:	77 27       	eor	r23, r23
    166a:	cb 01       	movw	r24, r22
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret

00001670 <__gesf2>:
    1670:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fp_cmp>
    1674:	08 f4       	brcc	.+2      	; 0x1678 <__gesf2+0x8>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	08 95       	ret

0000167a <__mulsf3>:
    167a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__mulsf3x>
    167e:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_round>
    1682:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscA>
    1686:	38 f0       	brcs	.+14     	; 0x1696 <__mulsf3+0x1c>
    1688:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_pscB>
    168c:	20 f0       	brcs	.+8      	; 0x1696 <__mulsf3+0x1c>
    168e:	95 23       	and	r25, r21
    1690:	11 f0       	breq	.+4      	; 0x1696 <__mulsf3+0x1c>
    1692:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_inf>
    1696:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_nan>
    169a:	11 24       	eor	r1, r1
    169c:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_szero>

000016a0 <__mulsf3x>:
    16a0:	0e 94 0f 0b 	call	0x161e	; 0x161e <__fp_split3>
    16a4:	70 f3       	brcs	.-36     	; 0x1682 <__mulsf3+0x8>

000016a6 <__mulsf3_pse>:
    16a6:	95 9f       	mul	r25, r21
    16a8:	c1 f3       	breq	.-16     	; 0x169a <__mulsf3+0x20>
    16aa:	95 0f       	add	r25, r21
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	55 1f       	adc	r21, r21
    16b0:	62 9f       	mul	r22, r18
    16b2:	f0 01       	movw	r30, r0
    16b4:	72 9f       	mul	r23, r18
    16b6:	bb 27       	eor	r27, r27
    16b8:	f0 0d       	add	r31, r0
    16ba:	b1 1d       	adc	r27, r1
    16bc:	63 9f       	mul	r22, r19
    16be:	aa 27       	eor	r26, r26
    16c0:	f0 0d       	add	r31, r0
    16c2:	b1 1d       	adc	r27, r1
    16c4:	aa 1f       	adc	r26, r26
    16c6:	64 9f       	mul	r22, r20
    16c8:	66 27       	eor	r22, r22
    16ca:	b0 0d       	add	r27, r0
    16cc:	a1 1d       	adc	r26, r1
    16ce:	66 1f       	adc	r22, r22
    16d0:	82 9f       	mul	r24, r18
    16d2:	22 27       	eor	r18, r18
    16d4:	b0 0d       	add	r27, r0
    16d6:	a1 1d       	adc	r26, r1
    16d8:	62 1f       	adc	r22, r18
    16da:	73 9f       	mul	r23, r19
    16dc:	b0 0d       	add	r27, r0
    16de:	a1 1d       	adc	r26, r1
    16e0:	62 1f       	adc	r22, r18
    16e2:	83 9f       	mul	r24, r19
    16e4:	a0 0d       	add	r26, r0
    16e6:	61 1d       	adc	r22, r1
    16e8:	22 1f       	adc	r18, r18
    16ea:	74 9f       	mul	r23, r20
    16ec:	33 27       	eor	r19, r19
    16ee:	a0 0d       	add	r26, r0
    16f0:	61 1d       	adc	r22, r1
    16f2:	23 1f       	adc	r18, r19
    16f4:	84 9f       	mul	r24, r20
    16f6:	60 0d       	add	r22, r0
    16f8:	21 1d       	adc	r18, r1
    16fa:	82 2f       	mov	r24, r18
    16fc:	76 2f       	mov	r23, r22
    16fe:	6a 2f       	mov	r22, r26
    1700:	11 24       	eor	r1, r1
    1702:	9f 57       	subi	r25, 0x7F	; 127
    1704:	50 40       	sbci	r21, 0x00	; 0
    1706:	9a f0       	brmi	.+38     	; 0x172e <__mulsf3_pse+0x88>
    1708:	f1 f0       	breq	.+60     	; 0x1746 <__mulsf3_pse+0xa0>
    170a:	88 23       	and	r24, r24
    170c:	4a f0       	brmi	.+18     	; 0x1720 <__mulsf3_pse+0x7a>
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	bb 1f       	adc	r27, r27
    1714:	66 1f       	adc	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	88 1f       	adc	r24, r24
    171a:	91 50       	subi	r25, 0x01	; 1
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	a9 f7       	brne	.-22     	; 0x170a <__mulsf3_pse+0x64>
    1720:	9e 3f       	cpi	r25, 0xFE	; 254
    1722:	51 05       	cpc	r21, r1
    1724:	80 f0       	brcs	.+32     	; 0x1746 <__mulsf3_pse+0xa0>
    1726:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_inf>
    172a:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_szero>
    172e:	5f 3f       	cpi	r21, 0xFF	; 255
    1730:	e4 f3       	brlt	.-8      	; 0x172a <__mulsf3_pse+0x84>
    1732:	98 3e       	cpi	r25, 0xE8	; 232
    1734:	d4 f3       	brlt	.-12     	; 0x172a <__mulsf3_pse+0x84>
    1736:	86 95       	lsr	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	b7 95       	ror	r27
    173e:	f7 95       	ror	r31
    1740:	e7 95       	ror	r30
    1742:	9f 5f       	subi	r25, 0xFF	; 255
    1744:	c1 f7       	brne	.-16     	; 0x1736 <__mulsf3_pse+0x90>
    1746:	fe 2b       	or	r31, r30
    1748:	88 0f       	add	r24, r24
    174a:	91 1d       	adc	r25, r1
    174c:	96 95       	lsr	r25
    174e:	87 95       	ror	r24
    1750:	97 f9       	bld	r25, 7
    1752:	08 95       	ret

00001754 <__fp_cmp>:
    1754:	99 0f       	add	r25, r25
    1756:	00 08       	sbc	r0, r0
    1758:	55 0f       	add	r21, r21
    175a:	aa 0b       	sbc	r26, r26
    175c:	e0 e8       	ldi	r30, 0x80	; 128
    175e:	fe ef       	ldi	r31, 0xFE	; 254
    1760:	16 16       	cp	r1, r22
    1762:	17 06       	cpc	r1, r23
    1764:	e8 07       	cpc	r30, r24
    1766:	f9 07       	cpc	r31, r25
    1768:	c0 f0       	brcs	.+48     	; 0x179a <__fp_cmp+0x46>
    176a:	12 16       	cp	r1, r18
    176c:	13 06       	cpc	r1, r19
    176e:	e4 07       	cpc	r30, r20
    1770:	f5 07       	cpc	r31, r21
    1772:	98 f0       	brcs	.+38     	; 0x179a <__fp_cmp+0x46>
    1774:	62 1b       	sub	r22, r18
    1776:	73 0b       	sbc	r23, r19
    1778:	84 0b       	sbc	r24, r20
    177a:	95 0b       	sbc	r25, r21
    177c:	39 f4       	brne	.+14     	; 0x178c <__fp_cmp+0x38>
    177e:	0a 26       	eor	r0, r26
    1780:	61 f0       	breq	.+24     	; 0x179a <__fp_cmp+0x46>
    1782:	23 2b       	or	r18, r19
    1784:	24 2b       	or	r18, r20
    1786:	25 2b       	or	r18, r21
    1788:	21 f4       	brne	.+8      	; 0x1792 <__fp_cmp+0x3e>
    178a:	08 95       	ret
    178c:	0a 26       	eor	r0, r26
    178e:	09 f4       	brne	.+2      	; 0x1792 <__fp_cmp+0x3e>
    1790:	a1 40       	sbci	r26, 0x01	; 1
    1792:	a6 95       	lsr	r26
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	81 1d       	adc	r24, r1
    1798:	81 1d       	adc	r24, r1
    179a:	08 95       	ret

0000179c <__muldi3>:
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	1f 93       	push	r17
    17a2:	0f 93       	push	r16
    17a4:	9a 9d       	mul	r25, r10
    17a6:	f0 2d       	mov	r31, r0
    17a8:	21 9f       	mul	r18, r17
    17aa:	f0 0d       	add	r31, r0
    17ac:	8b 9d       	mul	r24, r11
    17ae:	f0 0d       	add	r31, r0
    17b0:	8a 9d       	mul	r24, r10
    17b2:	e0 2d       	mov	r30, r0
    17b4:	f1 0d       	add	r31, r1
    17b6:	03 9f       	mul	r16, r19
    17b8:	f0 0d       	add	r31, r0
    17ba:	02 9f       	mul	r16, r18
    17bc:	e0 0d       	add	r30, r0
    17be:	f1 1d       	adc	r31, r1
    17c0:	4e 9d       	mul	r20, r14
    17c2:	e0 0d       	add	r30, r0
    17c4:	f1 1d       	adc	r31, r1
    17c6:	5e 9d       	mul	r21, r14
    17c8:	f0 0d       	add	r31, r0
    17ca:	4f 9d       	mul	r20, r15
    17cc:	f0 0d       	add	r31, r0
    17ce:	7f 93       	push	r23
    17d0:	6f 93       	push	r22
    17d2:	bf 92       	push	r11
    17d4:	af 92       	push	r10
    17d6:	5f 93       	push	r21
    17d8:	4f 93       	push	r20
    17da:	d5 01       	movw	r26, r10
    17dc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__umulhisi3>
    17e0:	8b 01       	movw	r16, r22
    17e2:	ac 01       	movw	r20, r24
    17e4:	d7 01       	movw	r26, r14
    17e6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__umulhisi3>
    17ea:	eb 01       	movw	r28, r22
    17ec:	e8 0f       	add	r30, r24
    17ee:	f9 1f       	adc	r31, r25
    17f0:	d6 01       	movw	r26, r12
    17f2:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muldi3_6>
    17f6:	2f 91       	pop	r18
    17f8:	3f 91       	pop	r19
    17fa:	d6 01       	movw	r26, r12
    17fc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__umulhisi3>
    1800:	c6 0f       	add	r28, r22
    1802:	d7 1f       	adc	r29, r23
    1804:	e8 1f       	adc	r30, r24
    1806:	f9 1f       	adc	r31, r25
    1808:	af 91       	pop	r26
    180a:	bf 91       	pop	r27
    180c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muldi3_6>
    1810:	2f 91       	pop	r18
    1812:	3f 91       	pop	r19
    1814:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__umulhisi3>
    1818:	c6 0f       	add	r28, r22
    181a:	d7 1f       	adc	r29, r23
    181c:	e8 1f       	adc	r30, r24
    181e:	f9 1f       	adc	r31, r25
    1820:	d6 01       	movw	r26, r12
    1822:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__umulhisi3>
    1826:	e6 0f       	add	r30, r22
    1828:	f7 1f       	adc	r31, r23
    182a:	98 01       	movw	r18, r16
    182c:	be 01       	movw	r22, r28
    182e:	cf 01       	movw	r24, r30
    1830:	11 24       	eor	r1, r1
    1832:	0f 91       	pop	r16
    1834:	1f 91       	pop	r17
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <__muldi3_6>:
    183c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__umulhisi3>
    1840:	46 0f       	add	r20, r22
    1842:	57 1f       	adc	r21, r23
    1844:	c8 1f       	adc	r28, r24
    1846:	d9 1f       	adc	r29, r25
    1848:	08 f4       	brcc	.+2      	; 0x184c <__muldi3_6+0x10>
    184a:	31 96       	adiw	r30, 0x01	; 1
    184c:	08 95       	ret

0000184e <__ashldi3>:
    184e:	0f 93       	push	r16
    1850:	08 30       	cpi	r16, 0x08	; 8
    1852:	90 f0       	brcs	.+36     	; 0x1878 <__ashldi3+0x2a>
    1854:	98 2f       	mov	r25, r24
    1856:	87 2f       	mov	r24, r23
    1858:	76 2f       	mov	r23, r22
    185a:	65 2f       	mov	r22, r21
    185c:	54 2f       	mov	r21, r20
    185e:	43 2f       	mov	r20, r19
    1860:	32 2f       	mov	r19, r18
    1862:	22 27       	eor	r18, r18
    1864:	08 50       	subi	r16, 0x08	; 8
    1866:	f4 cf       	rjmp	.-24     	; 0x1850 <__ashldi3+0x2>
    1868:	22 0f       	add	r18, r18
    186a:	33 1f       	adc	r19, r19
    186c:	44 1f       	adc	r20, r20
    186e:	55 1f       	adc	r21, r21
    1870:	66 1f       	adc	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	88 1f       	adc	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 95       	dec	r16
    187a:	b2 f7       	brpl	.-20     	; 0x1868 <__ashldi3+0x1a>
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <__adddi3>:
    1880:	2a 0d       	add	r18, r10
    1882:	3b 1d       	adc	r19, r11
    1884:	4c 1d       	adc	r20, r12
    1886:	5d 1d       	adc	r21, r13
    1888:	6e 1d       	adc	r22, r14
    188a:	7f 1d       	adc	r23, r15
    188c:	80 1f       	adc	r24, r16
    188e:	91 1f       	adc	r25, r17
    1890:	08 95       	ret

00001892 <__subdi3>:
    1892:	2a 19       	sub	r18, r10
    1894:	3b 09       	sbc	r19, r11
    1896:	4c 09       	sbc	r20, r12
    1898:	5d 09       	sbc	r21, r13
    189a:	6e 09       	sbc	r22, r14
    189c:	7f 09       	sbc	r23, r15
    189e:	80 0b       	sbc	r24, r16
    18a0:	91 0b       	sbc	r25, r17
    18a2:	08 95       	ret

000018a4 <__cmpdi2>:
    18a4:	2a 15       	cp	r18, r10
    18a6:	3b 05       	cpc	r19, r11
    18a8:	4c 05       	cpc	r20, r12
    18aa:	5d 05       	cpc	r21, r13
    18ac:	6e 05       	cpc	r22, r14
    18ae:	7f 05       	cpc	r23, r15
    18b0:	80 07       	cpc	r24, r16
    18b2:	91 07       	cpc	r25, r17
    18b4:	08 95       	ret

000018b6 <__cmpdi2_s8>:
    18b6:	00 24       	eor	r0, r0
    18b8:	a7 fd       	sbrc	r26, 7
    18ba:	00 94       	com	r0
    18bc:	2a 17       	cp	r18, r26
    18be:	30 05       	cpc	r19, r0
    18c0:	40 05       	cpc	r20, r0
    18c2:	50 05       	cpc	r21, r0
    18c4:	60 05       	cpc	r22, r0
    18c6:	70 05       	cpc	r23, r0
    18c8:	80 05       	cpc	r24, r0
    18ca:	90 05       	cpc	r25, r0
    18cc:	08 95       	ret

000018ce <__umulhisi3>:
    18ce:	a2 9f       	mul	r26, r18
    18d0:	b0 01       	movw	r22, r0
    18d2:	b3 9f       	mul	r27, r19
    18d4:	c0 01       	movw	r24, r0
    18d6:	a3 9f       	mul	r26, r19
    18d8:	70 0d       	add	r23, r0
    18da:	81 1d       	adc	r24, r1
    18dc:	11 24       	eor	r1, r1
    18de:	91 1d       	adc	r25, r1
    18e0:	b2 9f       	mul	r27, r18
    18e2:	70 0d       	add	r23, r0
    18e4:	81 1d       	adc	r24, r1
    18e6:	11 24       	eor	r1, r1
    18e8:	91 1d       	adc	r25, r1
    18ea:	08 95       	ret

000018ec <eeprom_read_byte>:
    18ec:	03 d0       	rcall	.+6      	; 0x18f4 <eeprom_mapen>
    18ee:	80 81       	ld	r24, Z
    18f0:	99 27       	eor	r25, r25
    18f2:	08 95       	ret

000018f4 <eeprom_mapen>:
    18f4:	e0 ec       	ldi	r30, 0xC0	; 192
    18f6:	f1 e0       	ldi	r31, 0x01	; 1
    18f8:	37 85       	ldd	r19, Z+15	; 0x0f
    18fa:	37 fd       	sbrc	r19, 7
    18fc:	fd cf       	rjmp	.-6      	; 0x18f8 <eeprom_mapen+0x4>
    18fe:	34 85       	ldd	r19, Z+12	; 0x0c
    1900:	38 60       	ori	r19, 0x08	; 8
    1902:	34 87       	std	Z+12, r19	; 0x0c
    1904:	fc 01       	movw	r30, r24
    1906:	e0 50       	subi	r30, 0x00	; 0
    1908:	f0 4f       	sbci	r31, 0xF0	; 240
    190a:	08 95       	ret

0000190c <eeprom_read_word>:
    190c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <eeprom_mapen>
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	08 95       	ret

00001916 <eeprom_write_byte>:
    1916:	26 2f       	mov	r18, r22

00001918 <eeprom_write_r18>:
    1918:	e0 ec       	ldi	r30, 0xC0	; 192
    191a:	f1 e0       	ldi	r31, 0x01	; 1
    191c:	37 85       	ldd	r19, Z+15	; 0x0f
    191e:	37 fd       	sbrc	r19, 7
    1920:	fd cf       	rjmp	.-6      	; 0x191c <eeprom_write_r18+0x4>
    1922:	34 85       	ldd	r19, Z+12	; 0x0c
    1924:	37 7f       	andi	r19, 0xF7	; 247
    1926:	34 87       	std	Z+12, r19	; 0x0c
    1928:	37 85       	ldd	r19, Z+15	; 0x0f
    192a:	31 ff       	sbrs	r19, 1
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <eeprom_write_r18+0x28>
    192e:	36 e3       	ldi	r19, 0x36	; 54
    1930:	32 87       	std	Z+10, r19	; 0x0a
    1932:	38 ed       	ldi	r19, 0xD8	; 216
    1934:	34 bf       	out	0x34, r19	; 52
    1936:	31 e0       	ldi	r19, 0x01	; 1
    1938:	33 87       	std	Z+11, r19	; 0x0b
    193a:	37 85       	ldd	r19, Z+15	; 0x0f
    193c:	37 fd       	sbrc	r19, 7
    193e:	fd cf       	rjmp	.-6      	; 0x193a <eeprom_write_r18+0x22>
    1940:	33 e3       	ldi	r19, 0x33	; 51
    1942:	32 87       	std	Z+10, r19	; 0x0a
    1944:	80 83       	st	Z, r24
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	12 82       	std	Z+2, r1	; 0x02
    194a:	24 83       	std	Z+4, r18	; 0x04
    194c:	25 e3       	ldi	r18, 0x35	; 53
    194e:	22 87       	std	Z+10, r18	; 0x0a
    1950:	28 ed       	ldi	r18, 0xD8	; 216
    1952:	31 e0       	ldi	r19, 0x01	; 1
    1954:	24 bf       	out	0x34, r18	; 52
    1956:	33 87       	std	Z+11, r19	; 0x0b
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	08 95       	ret

0000195c <eeprom_write_word>:
    195c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <eeprom_write_byte>
    1960:	27 2f       	mov	r18, r23
    1962:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <eeprom_write_r18>

00001966 <_exit>:
    1966:	f8 94       	cli

00001968 <__stop_program>:
    1968:	ff cf       	rjmp	.-2      	; 0x1968 <__stop_program>
