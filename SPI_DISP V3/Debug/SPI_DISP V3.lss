
SPI_DISP V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00802000  000018e2  00001976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007d  0080211a  0080211a  00001a90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000181e  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e8  00000000  00000000  00003416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3e  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  0000453c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b9b  00000000  00000000  00004a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167c  00000000  00000000  00006603  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00007c7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_10>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_14>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_16>
      44:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__vector_17>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_20>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     134:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__vector_77>
     138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     13c:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_79>
     140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     160:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_88>
     164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	cd bf       	out	0x3d, r28	; 61
     174:	df e2       	ldi	r29, 0x2F	; 47
     176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
     178:	11 e2       	ldi	r17, 0x21	; 33
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e2       	ldi	r27, 0x20	; 32
     17e:	e2 ee       	ldi	r30, 0xE2	; 226
     180:	f8 e1       	ldi	r31, 0x18	; 24
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	aa 31       	cpi	r26, 0x1A	; 26
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	21 e2       	ldi	r18, 0x21	; 33
     190:	aa e1       	ldi	r26, 0x1A	; 26
     192:	b1 e2       	ldi	r27, 0x21	; 33
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a7 39       	cpi	r26, 0x97	; 151
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <main>
     1a2:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_Z13clk_set_32MHzv>:
		return 1;
	}
	else{
		return result;
	}
}
     1aa:	e0 e5       	ldi	r30, 0x50	; 80
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	82 60       	ori	r24, 0x02	; 2
     1b2:	80 83       	st	Z, r24
     1b4:	e1 e5       	ldi	r30, 0x51	; 81
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	81 ff       	sbrs	r24, 1
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <_Z13clk_set_32MHzv+0xe>
     1be:	88 ed       	ldi	r24, 0xD8	; 216
     1c0:	84 bf       	out	0x34, r24	; 52
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     1c8:	08 95       	ret

000001ca <_Z11setup_blinkv>:
     1ca:	e0 e5       	ldi	r30, 0x50	; 80
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	84 60       	ori	r24, 0x04	; 4
     1d2:	80 83       	st	Z, r24
     1d4:	e1 e5       	ldi	r30, 0x51	; 81
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	82 ff       	sbrs	r24, 2
     1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <_Z11setup_blinkv+0xe>
     1de:	85 e0       	ldi	r24, 0x05	; 5
     1e0:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     1e4:	e1 e0       	ldi	r30, 0x01	; 1
     1e6:	f4 e0       	ldi	r31, 0x04	; 4
     1e8:	80 81       	ld	r24, Z
     1ea:	80 fd       	sbrc	r24, 0
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <_Z11setup_blinkv+0x1e>
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     1f4:	e1 e0       	ldi	r30, 0x01	; 1
     1f6:	f4 e0       	ldi	r31, 0x04	; 4
     1f8:	80 81       	ld	r24, Z
     1fa:	80 fd       	sbrc	r24, 0
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <_Z11setup_blinkv+0x2e>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	93 e0       	ldi	r25, 0x03	; 3
     208:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
     20c:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
     210:	e1 e0       	ldi	r30, 0x01	; 1
     212:	f4 e0       	ldi	r31, 0x04	; 4
     214:	80 81       	ld	r24, Z
     216:	80 fd       	sbrc	r24, 0
     218:	fd cf       	rjmp	.-6      	; 0x214 <_Z11setup_blinkv+0x4a>
     21a:	08 95       	ret

0000021c <_Z9setup_SPIv>:
     21c:	8e e5       	ldi	r24, 0x5E	; 94
     21e:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     222:	80 e1       	ldi	r24, 0x10	; 16
     224:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     228:	08 95       	ret

0000022a <_Z10setup_dispv>:
     22a:	88 eb       	ldi	r24, 0xB8	; 184
     22c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     230:	80 e1       	ldi	r24, 0x10	; 16
     232:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     236:	8c e0       	ldi	r24, 0x0C	; 12
     238:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     23c:	e2 ec       	ldi	r30, 0xC2	; 194
     23e:	f8 e0       	ldi	r31, 0x08	; 8
     240:	80 81       	ld	r24, Z
     242:	88 23       	and	r24, r24
     244:	ec f7       	brge	.-6      	; 0x240 <_Z10setup_dispv+0x16>
     246:	e2 ec       	ldi	r30, 0xC2	; 194
     248:	f8 e0       	ldi	r31, 0x08	; 8
     24a:	80 81       	ld	r24, Z
     24c:	80 68       	ori	r24, 0x80	; 128
     24e:	80 83       	st	Z, r24
     250:	80 e1       	ldi	r24, 0x10	; 16
     252:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     256:	e7 ec       	ldi	r30, 0xC7	; 199
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <_Z10setup_dispv+0x30>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <_Z10setup_dispv+0x36>
     260:	00 00       	nop
     262:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     266:	88 e3       	ldi	r24, 0x38	; 56
     268:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     26c:	e2 ec       	ldi	r30, 0xC2	; 194
     26e:	f8 e0       	ldi	r31, 0x08	; 8
     270:	80 81       	ld	r24, Z
     272:	88 23       	and	r24, r24
     274:	ec f7       	brge	.-6      	; 0x270 <_Z10setup_dispv+0x46>
     276:	e2 ec       	ldi	r30, 0xC2	; 194
     278:	f8 e0       	ldi	r31, 0x08	; 8
     27a:	80 81       	ld	r24, Z
     27c:	80 68       	ori	r24, 0x80	; 128
     27e:	80 83       	st	Z, r24
     280:	80 e1       	ldi	r24, 0x10	; 16
     282:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     286:	e7 ec       	ldi	r30, 0xC7	; 199
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	31 97       	sbiw	r30, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_Z10setup_dispv+0x60>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <_Z10setup_dispv+0x66>
     290:	00 00       	nop
     292:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     29c:	e2 ec       	ldi	r30, 0xC2	; 194
     29e:	f8 e0       	ldi	r31, 0x08	; 8
     2a0:	80 81       	ld	r24, Z
     2a2:	88 23       	and	r24, r24
     2a4:	ec f7       	brge	.-6      	; 0x2a0 <_Z10setup_dispv+0x76>
     2a6:	e2 ec       	ldi	r30, 0xC2	; 194
     2a8:	f8 e0       	ldi	r31, 0x08	; 8
     2aa:	80 81       	ld	r24, Z
     2ac:	80 68       	ori	r24, 0x80	; 128
     2ae:	80 83       	st	Z, r24
     2b0:	80 e1       	ldi	r24, 0x10	; 16
     2b2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2b6:	87 ec       	ldi	r24, 0xC7	; 199
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <_Z10setup_dispv+0x90>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <_Z10setup_dispv+0x96>
     2c0:	00 00       	nop
     2c2:	ef e9       	ldi	r30, 0x9F	; 159
     2c4:	f8 e2       	ldi	r31, 0x28	; 40
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_Z10setup_dispv+0x9c>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_Z10setup_dispv+0xa2>
     2cc:	00 00       	nop
     2ce:	08 95       	ret

000002d0 <_Z9setup_btnv>:
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
     2d6:	8b e8       	ldi	r24, 0x8B	; 139
     2d8:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <__TEXT_REGION_LENGTH__+0x700903>
     2dc:	86 ea       	ldi	r24, 0xA6	; 166
     2de:	98 e2       	ldi	r25, 0x28	; 40
     2e0:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     2e4:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x700906>
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     2f6:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     2fa:	84 e0       	ldi	r24, 0x04	; 4
     2fc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     300:	e2 e5       	ldi	r30, 0x52	; 82
     302:	f6 e0       	ldi	r31, 0x06	; 6
     304:	8b e1       	ldi	r24, 0x1B	; 27
     306:	80 83       	st	Z, r24
     308:	80 81       	ld	r24, Z
     30a:	80 64       	ori	r24, 0x40	; 64
     30c:	80 83       	st	Z, r24
     30e:	82 e6       	ldi	r24, 0x62	; 98
     310:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__TEXT_REGION_LENGTH__+0x700183>
     314:	08 95       	ret

00000316 <_Z9setup_intv>:
     316:	87 e0       	ldi	r24, 0x07	; 7
     318:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     31c:	78 94       	sei
     31e:	08 95       	ret

00000320 <_Z9setup_PWMv>:
     320:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     324:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     334:	83 e1       	ldi	r24, 0x13	; 19
     336:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     33a:	8e ef       	ldi	r24, 0xFE	; 254
     33c:	9f ef       	ldi	r25, 0xFF	; 255
     33e:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     342:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     346:	08 95       	ret

00000348 <_Z9QDEC_INITv>:
     348:	80 e3       	ldi	r24, 0x30	; 48
     34a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     354:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__TEXT_REGION_LENGTH__+0x700675>
     358:	8c e6       	ldi	r24, 0x6C	; 108
     35a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
     35e:	8d e6       	ldi	r24, 0x6D	; 109
     360:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x700181>
     364:	89 e0       	ldi	r24, 0x09	; 9
     366:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__TEXT_REGION_LENGTH__+0x700188>
     36a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__TEXT_REGION_LENGTH__+0x700189>
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     374:	88 e6       	ldi	r24, 0x68	; 104
     376:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <__TEXT_REGION_LENGTH__+0x700803>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     382:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     386:	8f e3       	ldi	r24, 0x3F	; 63
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
     38e:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
     392:	08 95       	ret

00000394 <_Z8DMX_initv>:
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
     39a:	88 e5       	ldi	r24, 0x58	; 88
     39c:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     3a0:	8a e6       	ldi	r24, 0x6A	; 106
     3a2:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
     3a6:	85 e0       	ldi	r24, 0x05	; 5
     3a8:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     3ac:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
     3b0:	8a e8       	ldi	r24, 0x8A	; 138
     3b2:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <__TEXT_REGION_LENGTH__+0x700843>
     3b6:	87 e5       	ldi	r24, 0x57	; 87
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
     3be:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
     3c2:	8b e0       	ldi	r24, 0x0B	; 11
     3c4:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
     3ce:	83 e9       	ldi	r24, 0x93	; 147
     3d0:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
     3d4:	08 95       	ret

000003d6 <_Z17update_EEPROM_RAMv>:
     3d6:	cf 93       	push	r28
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	09 f0       	breq	.+2      	; 0x3e4 <_Z17update_EEPROM_RAMv+0xe>
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	c6 2f       	mov	r28, r22
     3e6:	c1 95       	neg	r28
     3e8:	83 e1       	ldi	r24, 0x13	; 19
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 42 0c 	call	0x1884	; 0x1884 <eeprom_read_word>
     3f0:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <brightness>
     3f4:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <brightness+0x1>
     3f8:	82 17       	cp	r24, r18
     3fa:	93 07       	cpc	r25, r19
     3fc:	41 f0       	breq	.+16     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     3fe:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <brightness>
     402:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <brightness+0x1>
     406:	83 e1       	ldi	r24, 0x13	; 19
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <eeprom_write_word>
     40e:	85 e1       	ldi	r24, 0x15	; 21
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 42 0c 	call	0x1884	; 0x1884 <eeprom_read_word>
     416:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
     41a:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
     41e:	82 17       	cp	r24, r18
     420:	93 07       	cpc	r25, r19
     422:	41 f0       	breq	.+16     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
     424:	60 91 01 20 	lds	r22, 0x2001	; 0x802001 <DMXChan>
     428:	70 91 02 20 	lds	r23, 0x2002	; 0x802002 <DMXChan+0x1>
     42c:	85 e1       	ldi	r24, 0x15	; 21
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <eeprom_write_word>
     434:	80 e1       	ldi	r24, 0x10	; 16
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 32 0c 	call	0x1864	; 0x1864 <eeprom_read_byte>
     43c:	8c 17       	cp	r24, r28
     43e:	29 f0       	breq	.+10     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
     440:	6c 2f       	mov	r22, r28
     442:	80 e1       	ldi	r24, 0x10	; 16
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 47 0c 	call	0x188e	; 0x188e <eeprom_write_byte>
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <_Z10updateDispv>:
inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

void updateDisp(){
     44e:	4f 92       	push	r4
     450:	5f 92       	push	r5
     452:	6f 92       	push	r6
     454:	7f 92       	push	r7
     456:	8f 92       	push	r8
     458:	9f 92       	push	r9
     45a:	af 92       	push	r10
     45c:	bf 92       	push	r11
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	a1 97       	sbiw	r28, 0x21	; 33
     474:	cd bf       	out	0x3d, r28	; 61
     476:	de bf       	out	0x3e, r29	; 62
     478:	8b e2       	ldi	r24, 0x2B	; 43
     47a:	91 e2       	ldi	r25, 0x21	; 33
     47c:	4b e4       	ldi	r20, 0x4B	; 75
     47e:	51 e2       	ldi	r21, 0x21	; 33
     480:	dc 01       	movw	r26, r24
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     482:	bc 01       	movw	r22, r24
     484:	60 95       	com	r22
     486:	70 95       	com	r23
			RTC_CNT = 0;
     488:	08 e0       	ldi	r16, 0x08	; 8
     48a:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     48c:	3d 91       	ld	r19, X+
     48e:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     492:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     496:	ea 0f       	add	r30, r26
     498:	fb 1f       	adc	r31, r27
     49a:	e6 0f       	add	r30, r22
     49c:	f7 1f       	adc	r31, r23
     49e:	20 81       	ld	r18, Z
     4a0:	32 17       	cp	r19, r18
     4a2:	39 f0       	breq	.+14     	; 0x4b2 <_Z10updateDispv+0x64>
			RTC_CNT = 0;
     4a4:	f8 01       	movw	r30, r16
     4a6:	10 82       	st	Z, r1
     4a8:	11 82       	std	Z+1, r1	; 0x01
			editCounter = 0;
     4aa:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     4ae:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	uint8_t lowBound = 0xFF; //Lowest number in what the two arrays differ
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
     4b2:	4a 17       	cp	r20, r26
     4b4:	5b 07       	cpc	r21, r27
     4b6:	51 f7       	brne	.-44     	; 0x48c <_Z10updateDispv+0x3e>
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
			RTC_CNT = 0;
			editCounter = 0;
		}
	}
	if(RTC_CNT > 512){
     4b8:	a0 90 08 04 	lds	r10, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     4bc:	b0 90 09 04 	lds	r11, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     4c0:	c0 90 4c 21 	lds	r12, 0x214C	; 0x80214c <toBeDispPtr>
     4c4:	d0 90 4d 21 	lds	r13, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     4c8:	be 01       	movw	r22, r28
     4ca:	6f 5f       	subi	r22, 0xFF	; 255
     4cc:	7f 4f       	sbci	r23, 0xFF	; 255
     4ce:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <currBlinkMaskPtr>
     4d2:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <currBlinkMaskPtr+0x1>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     4d6:	fb 01       	movw	r30, r22
     4d8:	46 01       	movw	r8, r12
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     4da:	68 94       	set
     4dc:	ee 24       	eor	r14, r14
     4de:	e5 f8       	bld	r14, 5
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
     4e0:	11 e0       	ldi	r17, 0x01	; 1
     4e2:	a1 16       	cp	r10, r17
     4e4:	12 e0       	ldi	r17, 0x02	; 2
     4e6:	b1 06       	cpc	r11, r17
     4e8:	08 f4       	brcc	.+2      	; 0x4ec <_Z10updateDispv+0x9e>
     4ea:	d0 c0       	rjmp	.+416    	; 0x68c <_Z10updateDispv+0x23e>
     4ec:	d9 01       	movw	r26, r18
     4ee:	fc 90       	ld	r15, X
     4f0:	ff 20       	and	r15, r15
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <_Z10updateDispv+0xa8>
     4f4:	cb c0       	rjmp	.+406    	; 0x68c <_Z10updateDispv+0x23e>
     4f6:	f0 90 93 21 	lds	r15, 0x2193	; 0x802193 <editMode>
     4fa:	f1 10       	cpse	r15, r1
     4fc:	cb c0       	rjmp	.+406    	; 0x694 <_Z10updateDispv+0x246>
     4fe:	c6 c0       	rjmp	.+396    	; 0x68c <_Z10updateDispv+0x23e>
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
     500:	d4 01       	movw	r26, r8
     502:	fd 90       	ld	r15, X+
     504:	4d 01       	movw	r8, r26
     506:	dc 01       	movw	r26, r24
     508:	fd 92       	st	X+, r15
     50a:	cd 01       	movw	r24, r26
     50c:	31 96       	adiw	r30, 0x01	; 1
     50e:	bf ef       	ldi	r27, 0xFF	; 255
     510:	cb 1a       	sub	r12, r27
     512:	db 0a       	sbc	r13, r27
     514:	2f 5f       	subi	r18, 0xFF	; 255
     516:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
     518:	48 17       	cp	r20, r24
     51a:	59 07       	cpc	r21, r25
     51c:	09 f7       	brne	.-62     	; 0x4e0 <_Z10updateDispv+0x92>
     51e:	e1 e5       	ldi	r30, 0x51	; 81
     520:	f1 e2       	ldi	r31, 0x21	; 33
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	d1 2c       	mov	r13, r1
     526:	3f ef       	ldi	r19, 0xFF	; 255
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
     528:	db 01       	movw	r26, r22
     52a:	9d 91       	ld	r25, X+
     52c:	bd 01       	movw	r22, r26
     52e:	20 81       	ld	r18, Z
     530:	29 17       	cp	r18, r25
     532:	39 f0       	breq	.+14     	; 0x542 <_Z10updateDispv+0xf4>
			currDispData[i] = temp[i];
     534:	90 83       	st	Z, r25
			highBound = i;
			if(lowBound == 0xFF){
     536:	3f 3f       	cpi	r19, 0xFF	; 255
     538:	19 f4       	brne	.+6      	; 0x540 <_Z10updateDispv+0xf2>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     53a:	d8 2e       	mov	r13, r24
			if(lowBound == 0xFF){
				lowBound = i;
     53c:	38 2f       	mov	r19, r24
     53e:	01 c0       	rjmp	.+2      	; 0x542 <_Z10updateDispv+0xf4>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     540:	d8 2e       	mov	r13, r24
     542:	31 96       	adiw	r30, 0x01	; 1
     544:	8f 5f       	subi	r24, 0xFF	; 255
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
     546:	80 32       	cpi	r24, 0x20	; 32
     548:	79 f7       	brne	.-34     	; 0x528 <_Z10updateDispv+0xda>
			if(lowBound == 0xFF){
				lowBound = i;
			}
		}
	}
	if(lowBound != 0xFF){ //If anything has changed on the display
     54a:	3f 3f       	cpi	r19, 0xFF	; 255
     54c:	09 f4       	brne	.+2      	; 0x550 <_Z10updateDispv+0x102>
     54e:	a4 c0       	rjmp	.+328    	; 0x698 <_Z10updateDispv+0x24a>
		uint8_t tempPos = lowBound;
		if(tempPos > 15){
     550:	30 31       	cpi	r19, 0x10	; 16
     552:	18 f0       	brcs	.+6      	; 0x55a <_Z10updateDispv+0x10c>
			tempPos += 48;
     554:	80 e3       	ldi	r24, 0x30	; 48
     556:	83 0f       	add	r24, r19
     558:	01 c0       	rjmp	.+2      	; 0x55c <_Z10updateDispv+0x10e>
     55a:	83 2f       	mov	r24, r19
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
     55c:	80 68       	ori	r24, 0x80	; 128
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     55e:	90 e1       	ldi	r25, 0x10	; 16
     560:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	SPIC_DATA = SPIdata;
     564:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     568:	e2 ec       	ldi	r30, 0xC2	; 194
     56a:	f8 e0       	ldi	r31, 0x08	; 8
     56c:	80 81       	ld	r24, Z
     56e:	88 23       	and	r24, r24
     570:	ec f7       	brge	.-6      	; 0x56c <_Z10updateDispv+0x11e>
	SPIC_STATUS |= SPI_IF_bm;
     572:	e2 ec       	ldi	r30, 0xC2	; 194
     574:	f8 e0       	ldi	r31, 0x08	; 8
     576:	80 81       	ld	r24, Z
     578:	80 68       	ori	r24, 0x80	; 128
     57a:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     57c:	e5 e4       	ldi	r30, 0x45	; 69
     57e:	f6 e0       	ldi	r31, 0x06	; 6
     580:	80 e1       	ldi	r24, 0x10	; 16
     582:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     584:	87 ec       	ldi	r24, 0xC7	; 199
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <_Z10updateDispv+0x13a>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <_Z10updateDispv+0x140>
     58e:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     590:	88 e0       	ldi	r24, 0x08	; 8
     592:	80 83       	st	Z, r24
     594:	9a e0       	ldi	r25, 0x0A	; 10
     596:	9a 95       	dec	r25
     598:	f1 f7       	brne	.-4      	; 0x596 <_Z10updateDispv+0x148>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <_Z10updateDispv+0x14e>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     59c:	43 2f       	mov	r20, r19
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	8d 2c       	mov	r8, r13
     5a6:	91 2c       	mov	r9, r1
     5a8:	a1 2c       	mov	r10, r1
     5aa:	b1 2c       	mov	r11, r1
     5ac:	84 16       	cp	r8, r20
     5ae:	95 06       	cpc	r9, r21
     5b0:	a6 06       	cpc	r10, r22
     5b2:	b7 06       	cpc	r11, r23
     5b4:	08 f4       	brcc	.+2      	; 0x5b8 <_Z10updateDispv+0x16a>
     5b6:	62 c0       	rjmp	.+196    	; 0x67c <_Z10updateDispv+0x22e>
     5b8:	a3 2f       	mov	r26, r19
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	fd 01       	movw	r30, r26
     5be:	ef 5a       	subi	r30, 0xAF	; 175
     5c0:	fe 4d       	sbci	r31, 0xDE	; 222
     5c2:	2f 01       	movw	r4, r30
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     5c4:	06 e4       	ldi	r16, 0x46	; 70
     5c6:	16 e0       	ldi	r17, 0x06	; 6
     5c8:	68 94       	set
     5ca:	cc 24       	eor	r12, r12
     5cc:	c4 f8       	bld	r12, 4
     5ce:	9c 2d       	mov	r25, r12
	SPIC_DATA = SPIdata;
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f3 ec       	ldi	r31, 0xC3	; 195
     5d4:	ef 2e       	mov	r14, r31
     5d6:	f8 e0       	ldi	r31, 0x08	; 8
     5d8:	ff 2e       	mov	r15, r31
     5da:	f0 2d       	mov	r31, r0
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     5dc:	e2 ec       	ldi	r30, 0xC2	; 194
     5de:	f8 e0       	ldi	r31, 0x08	; 8
	SPIC_STATUS |= SPI_IF_bm;
	PORTC_OUTSET = (1 << SS_PIN);
     5e0:	25 e4       	ldi	r18, 0x45	; 69
     5e2:	36 e0       	ldi	r19, 0x06	; 6
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     5e4:	68 94       	set
     5e6:	77 24       	eor	r7, r7
     5e8:	73 f8       	bld	r7, 3
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
	SPIC_DATA = SPIdata;
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f0 ec       	ldi	r31, 0xC0	; 192
     5ee:	6f 2e       	mov	r6, r31
     5f0:	f0 2d       	mov	r31, r0
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
     5f2:	d2 01       	movw	r26, r4
     5f4:	8d 91       	ld	r24, X+
     5f6:	2d 01       	movw	r4, r26
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     5f8:	d8 01       	movw	r26, r16
     5fa:	9c 93       	st	X, r25
	SPIC_DATA = SPIdata;
     5fc:	d7 01       	movw	r26, r14
     5fe:	8c 93       	st	X, r24
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     600:	80 81       	ld	r24, Z
     602:	88 23       	and	r24, r24
     604:	ec f7       	brge	.-6      	; 0x600 <_Z10updateDispv+0x1b2>
	SPIC_STATUS |= SPI_IF_bm;
     606:	80 81       	ld	r24, Z
     608:	80 68       	ori	r24, 0x80	; 128
     60a:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     60c:	d9 01       	movw	r26, r18
     60e:	9c 93       	st	X, r25
     610:	a7 ec       	ldi	r26, 0xC7	; 199
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	11 97       	sbiw	r26, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <_Z10updateDispv+0x1c6>
     618:	00 c0       	rjmp	.+0      	; 0x61a <_Z10updateDispv+0x1cc>
     61a:	00 00       	nop
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
			if(i == 15 && highBound != 15){
     61c:	4f 30       	cpi	r20, 0x0F	; 15
     61e:	51 05       	cpc	r21, r1
     620:	61 05       	cpc	r22, r1
     622:	71 05       	cpc	r23, r1
     624:	09 f5       	brne	.+66     	; 0x668 <_Z10updateDispv+0x21a>
     626:	bf e0       	ldi	r27, 0x0F	; 15
     628:	db 16       	cp	r13, r27
     62a:	41 f1       	breq	.+80     	; 0x67c <_Z10updateDispv+0x22e>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     62c:	d8 01       	movw	r26, r16
     62e:	7c 92       	st	X, r7
     630:	ba e0       	ldi	r27, 0x0A	; 10
     632:	ba 95       	dec	r27
     634:	f1 f7       	brne	.-4      	; 0x632 <_Z10updateDispv+0x1e4>
     636:	00 c0       	rjmp	.+0      	; 0x638 <_Z10updateDispv+0x1ea>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     638:	d8 01       	movw	r26, r16
     63a:	cc 92       	st	X, r12
	SPIC_DATA = SPIdata;
     63c:	d7 01       	movw	r26, r14
     63e:	6c 92       	st	X, r6
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     640:	80 81       	ld	r24, Z
     642:	88 23       	and	r24, r24
     644:	ec f7       	brge	.-6      	; 0x640 <_Z10updateDispv+0x1f2>
	SPIC_STATUS |= SPI_IF_bm;
     646:	80 81       	ld	r24, Z
     648:	80 68       	ori	r24, 0x80	; 128
     64a:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     64c:	d9 01       	movw	r26, r18
     64e:	cc 92       	st	X, r12
     650:	a7 ec       	ldi	r26, 0xC7	; 199
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	11 97       	sbiw	r26, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <_Z10updateDispv+0x206>
     658:	00 c0       	rjmp	.+0      	; 0x65a <_Z10updateDispv+0x20c>
     65a:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     65c:	d9 01       	movw	r26, r18
     65e:	7c 92       	st	X, r7
     660:	ba e0       	ldi	r27, 0x0A	; 10
     662:	ba 95       	dec	r27
     664:	f1 f7       	brne	.-4      	; 0x662 <_Z10updateDispv+0x214>
     666:	00 c0       	rjmp	.+0      	; 0x668 <_Z10updateDispv+0x21a>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     668:	4f 5f       	subi	r20, 0xFF	; 255
     66a:	5f 4f       	sbci	r21, 0xFF	; 255
     66c:	6f 4f       	sbci	r22, 0xFF	; 255
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	84 16       	cp	r8, r20
     672:	95 06       	cpc	r9, r21
     674:	a6 06       	cpc	r10, r22
     676:	b7 06       	cpc	r11, r23
     678:	08 f0       	brcs	.+2      	; 0x67c <_Z10updateDispv+0x22e>
     67a:	bb cf       	rjmp	.-138    	; 0x5f2 <_Z10updateDispv+0x1a4>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     682:	ea e0       	ldi	r30, 0x0A	; 10
     684:	ea 95       	dec	r30
     686:	f1 f7       	brne	.-4      	; 0x684 <_Z10updateDispv+0x236>
     688:	00 c0       	rjmp	.+0      	; 0x68a <_Z10updateDispv+0x23c>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     68a:	06 c0       	rjmp	.+12     	; 0x698 <_Z10updateDispv+0x24a>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     68c:	d6 01       	movw	r26, r12
     68e:	fc 90       	ld	r15, X
     690:	f0 82       	st	Z, r15
     692:	36 cf       	rjmp	.-404    	; 0x500 <_Z10updateDispv+0xb2>
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     694:	e0 82       	st	Z, r14
     696:	34 cf       	rjmp	.-408    	; 0x500 <_Z10updateDispv+0xb2>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     698:	a1 96       	adiw	r28, 0x21	; 33
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	bf 90       	pop	r11
     6b0:	af 90       	pop	r10
     6b2:	9f 90       	pop	r9
     6b4:	8f 90       	pop	r8
     6b6:	7f 90       	pop	r7
     6b8:	6f 90       	pop	r6
     6ba:	5f 90       	pop	r5
     6bc:	4f 90       	pop	r4
     6be:	08 95       	ret

000006c0 <_Z12LCD_PRINTDECjhh>:
inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
	currCursorPos++;
}

void LCD_PRINTDEC(uint16_t numToPrint, uint8_t pos, uint8_t noOfDigits){
     6c0:	2f 92       	push	r2
     6c2:	3f 92       	push	r3
     6c4:	4f 92       	push	r4
     6c6:	5f 92       	push	r5
     6c8:	6f 92       	push	r6
     6ca:	7f 92       	push	r7
     6cc:	8f 92       	push	r8
     6ce:	9f 92       	push	r9
     6d0:	af 92       	push	r10
     6d2:	bf 92       	push	r11
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	2e 97       	sbiw	r28, 0x0e	; 14
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	56 2e       	mov	r5, r22
	//currCursorPos = pos;
	//WR_CHAR();
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
     6f0:	6c 01       	movw	r12, r24
     6f2:	e1 2c       	mov	r14, r1
     6f4:	f1 2c       	mov	r15, r1
     6f6:	00 e0       	ldi	r16, 0x00	; 0
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	98 01       	movw	r18, r16
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	da 82       	std	Y+2, r13	; 0x02
     700:	eb 82       	std	Y+3, r14	; 0x03
     702:	fc 82       	std	Y+4, r15	; 0x04
     704:	0d 83       	std	Y+5, r16	; 0x05
     706:	1e 83       	std	Y+6, r17	; 0x06
     708:	2f 83       	std	Y+7, r18	; 0x07
     70a:	38 87       	std	Y+8, r19	; 0x08
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
     70c:	4f 3f       	cpi	r20, 0xFF	; 255
     70e:	09 f0       	breq	.+2      	; 0x712 <_Z12LCD_PRINTDECjhh+0x52>
     710:	6c c0       	rjmp	.+216    	; 0x7ea <_Z12LCD_PRINTDECjhh+0x12a>
     712:	3e c0       	rjmp	.+124    	; 0x790 <_Z12LCD_PRINTDECjhh+0xd0>

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
		result *= gnd;
     714:	2a 2f       	mov	r18, r26
     716:	3b 2d       	mov	r19, r11
     718:	4c 2d       	mov	r20, r12
     71a:	5d 2d       	mov	r21, r13
     71c:	6e 2d       	mov	r22, r14
     71e:	7f 2d       	mov	r23, r15
     720:	80 2f       	mov	r24, r16
     722:	91 2f       	mov	r25, r17
     724:	01 e0       	ldi	r16, 0x01	; 1
     726:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__ashldi3>
     72a:	32 2e       	mov	r3, r18
     72c:	43 2e       	mov	r4, r19
     72e:	64 2e       	mov	r6, r20
     730:	75 2e       	mov	r7, r21
     732:	6a 87       	std	Y+10, r22	; 0x0a
     734:	79 87       	std	Y+9, r23	; 0x09
     736:	b8 2f       	mov	r27, r24
     738:	a9 2f       	mov	r26, r25
     73a:	02 e0       	ldi	r16, 0x02	; 2
     73c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__ashldi3>
     740:	a2 2e       	mov	r10, r18
     742:	b3 2e       	mov	r11, r19
     744:	c4 2e       	mov	r12, r20
     746:	d5 2e       	mov	r13, r21
     748:	e6 2e       	mov	r14, r22
     74a:	f7 2e       	mov	r15, r23
     74c:	08 2f       	mov	r16, r24
     74e:	19 2f       	mov	r17, r25
     750:	23 2d       	mov	r18, r3
     752:	34 2d       	mov	r19, r4
     754:	46 2d       	mov	r20, r6
     756:	57 2d       	mov	r21, r7
     758:	6a 85       	ldd	r22, Y+10	; 0x0a
     75a:	79 85       	ldd	r23, Y+9	; 0x09
     75c:	8b 2f       	mov	r24, r27
     75e:	9a 2f       	mov	r25, r26
     760:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__adddi3>
     764:	a2 2f       	mov	r26, r18
     766:	b3 2e       	mov	r11, r19
     768:	c4 2e       	mov	r12, r20
     76a:	d5 2e       	mov	r13, r21
     76c:	e6 2e       	mov	r14, r22
     76e:	f7 2e       	mov	r15, r23
     770:	08 2f       	mov	r16, r24
     772:	19 2f       	mov	r17, r25
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     774:	31 96       	adiw	r30, 0x01	; 1
     776:	e8 15       	cp	r30, r8
     778:	f9 05       	cpc	r31, r9
     77a:	64 f2       	brlt	.-104    	; 0x714 <_Z12LCD_PRINTDECjhh+0x54>
     77c:	13 c0       	rjmp	.+38     	; 0x7a4 <_Z12LCD_PRINTDECjhh+0xe4>
     77e:	aa e0       	ldi	r26, 0x0A	; 10
     780:	b1 2c       	mov	r11, r1
     782:	c1 2c       	mov	r12, r1
     784:	d1 2c       	mov	r13, r1
     786:	e1 2c       	mov	r14, r1
     788:	f1 2c       	mov	r15, r1
     78a:	00 e0       	ldi	r16, 0x00	; 0
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	0a c0       	rjmp	.+20     	; 0x7a4 <_Z12LCD_PRINTDECjhh+0xe4>
     790:	81 2c       	mov	r8, r1
     792:	91 2c       	mov	r9, r1
     794:	aa e0       	ldi	r26, 0x0A	; 10
     796:	b1 2c       	mov	r11, r1
     798:	c1 2c       	mov	r12, r1
     79a:	d1 2c       	mov	r13, r1
     79c:	e1 2c       	mov	r14, r1
     79e:	f1 2c       	mov	r15, r1
     7a0:	00 e0       	ldi	r16, 0x00	; 0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
		result *= gnd;
	}
	if(exp == 0){
     7a4:	81 14       	cp	r8, r1
     7a6:	91 04       	cpc	r9, r1
     7a8:	09 f4       	brne	.+2      	; 0x7ac <_Z12LCD_PRINTDECjhh+0xec>
     7aa:	1b c1       	rjmp	.+566    	; 0x9e2 <_Z12LCD_PRINTDECjhh+0x322>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     7ac:	29 81       	ldd	r18, Y+1	; 0x01
     7ae:	3a 81       	ldd	r19, Y+2	; 0x02
     7b0:	4b 81       	ldd	r20, Y+3	; 0x03
     7b2:	5c 81       	ldd	r21, Y+4	; 0x04
     7b4:	6d 81       	ldd	r22, Y+5	; 0x05
     7b6:	7e 81       	ldd	r23, Y+6	; 0x06
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	98 85       	ldd	r25, Y+8	; 0x08
     7bc:	aa 2e       	mov	r10, r26
     7be:	0e 94 0e 0c 	call	0x181c	; 0x181c <__cmpdi2>
     7c2:	0c f4       	brge	.+2      	; 0x7c6 <_Z12LCD_PRINTDECjhh+0x106>
     7c4:	fd c0       	rjmp	.+506    	; 0x9c0 <_Z12LCD_PRINTDECjhh+0x300>
				check = true;
			}
			decCounter++;
     7c6:	0f ef       	ldi	r16, 0xFF	; 255
     7c8:	80 1a       	sub	r8, r16
     7ca:	90 0a       	sbc	r9, r16
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     7cc:	12 e0       	ldi	r17, 0x02	; 2
     7ce:	81 16       	cp	r8, r17
     7d0:	91 04       	cpc	r9, r1
     7d2:	ac f2       	brlt	.-86     	; 0x77e <_Z12LCD_PRINTDECjhh+0xbe>
     7d4:	aa e0       	ldi	r26, 0x0A	; 10
     7d6:	b1 2c       	mov	r11, r1
     7d8:	c1 2c       	mov	r12, r1
     7da:	d1 2c       	mov	r13, r1
     7dc:	e1 2c       	mov	r14, r1
     7de:	f1 2c       	mov	r15, r1
     7e0:	00 e0       	ldi	r16, 0x00	; 0
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	e1 e0       	ldi	r30, 0x01	; 1
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	95 cf       	rjmp	.-214    	; 0x714 <_Z12LCD_PRINTDECjhh+0x54>
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
	}
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
     7ea:	84 2f       	mov	r24, r20
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	1c 01       	movw	r2, r24
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	22 1a       	sub	r2, r18
     7f4:	31 08       	sbc	r3, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     7f6:	33 20       	and	r3, r3
     7f8:	0c f4       	brge	.+2      	; 0x7fc <_Z12LCD_PRINTDECjhh+0x13c>
     7fa:	01 c1       	rjmp	.+514    	; 0x9fe <_Z12LCD_PRINTDECjhh+0x33e>
     7fc:	85 2d       	mov	r24, r5
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	8b 87       	std	Y+11, r24	; 0x0b
     802:	9c 87       	std	Y+12, r25	; 0x0c
     804:	41 2c       	mov	r4, r1
     806:	51 2c       	mov	r5, r1
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	29 16       	cp	r2, r25
     80c:	31 04       	cpc	r3, r1
     80e:	7c f1       	brlt	.+94     	; 0x86e <_Z12LCD_PRINTDECjhh+0x1ae>
     810:	2a e0       	ldi	r18, 0x0A	; 10
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	e1 e0       	ldi	r30, 0x01	; 1
     822:	f0 e0       	ldi	r31, 0x00	; 0
		result *= gnd;
     824:	01 e0       	ldi	r16, 0x01	; 1
     826:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__ashldi3>
     82a:	62 2e       	mov	r6, r18
     82c:	73 2e       	mov	r7, r19
     82e:	84 2e       	mov	r8, r20
     830:	95 2e       	mov	r9, r21
     832:	6a 87       	std	Y+10, r22	; 0x0a
     834:	79 87       	std	Y+9, r23	; 0x09
     836:	b8 2f       	mov	r27, r24
     838:	a9 2f       	mov	r26, r25
     83a:	02 e0       	ldi	r16, 0x02	; 2
     83c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__ashldi3>
     840:	a2 2e       	mov	r10, r18
     842:	b3 2e       	mov	r11, r19
     844:	c4 2e       	mov	r12, r20
     846:	d5 2e       	mov	r13, r21
     848:	e6 2e       	mov	r14, r22
     84a:	f7 2e       	mov	r15, r23
     84c:	08 2f       	mov	r16, r24
     84e:	19 2f       	mov	r17, r25
     850:	26 2d       	mov	r18, r6
     852:	37 2d       	mov	r19, r7
     854:	48 2d       	mov	r20, r8
     856:	59 2d       	mov	r21, r9
     858:	6a 85       	ldd	r22, Y+10	; 0x0a
     85a:	79 85       	ldd	r23, Y+9	; 0x09
     85c:	8b 2f       	mov	r24, r27
     85e:	9a 2f       	mov	r25, r26
     860:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__adddi3>
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     864:	31 96       	adiw	r30, 0x01	; 1
     866:	e2 15       	cp	r30, r2
     868:	f3 05       	cpc	r31, r3
     86a:	e1 f6       	brne	.-72     	; 0x824 <_Z12LCD_PRINTDECjhh+0x164>
     86c:	08 c0       	rjmp	.+16     	; 0x87e <_Z12LCD_PRINTDECjhh+0x1be>
	//PORTD_INTCTRL |= PORT_INT0LVL_HI_gc;
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
     86e:	2a e0       	ldi	r18, 0x0A	; 10
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 1; i < exp; i++){
		result *= gnd;
	}
	if(exp == 0){
     87e:	21 14       	cp	r2, r1
     880:	31 04       	cpc	r3, r1
     882:	49 f0       	breq	.+18     	; 0x896 <_Z12LCD_PRINTDECjhh+0x1d6>
     884:	2d 87       	std	Y+13, r18	; 0x0d
     886:	73 2e       	mov	r7, r19
     888:	84 2e       	mov	r8, r20
     88a:	95 2e       	mov	r9, r21
     88c:	6e 87       	std	Y+14, r22	; 0x0e
     88e:	79 87       	std	Y+9, r23	; 0x09
     890:	8a 87       	std	Y+10, r24	; 0x0a
     892:	69 2e       	mov	r6, r25
     894:	09 c0       	rjmp	.+18     	; 0x8a8 <_Z12LCD_PRINTDECjhh+0x1e8>
		return 1;
     896:	01 e0       	ldi	r16, 0x01	; 1
     898:	0d 87       	std	Y+13, r16	; 0x0d
     89a:	71 2c       	mov	r7, r1
     89c:	81 2c       	mov	r8, r1
     89e:	91 2c       	mov	r9, r1
     8a0:	1e 86       	std	Y+14, r1	; 0x0e
     8a2:	19 86       	std	Y+9, r1	; 0x09
     8a4:	1a 86       	std	Y+10, r1	; 0x0a
     8a6:	61 2c       	mov	r6, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
		int16_t t;
		for(t = 0; startNum - (mathPow(10, i) * t) >= 0; t++){} //t = 9 if i = 1 and startnum = 90, t = 3 if i = 2 and startnum is 356
     8a8:	ad 84       	ldd	r10, Y+13	; 0x0d
     8aa:	b7 2c       	mov	r11, r7
     8ac:	c8 2c       	mov	r12, r8
     8ae:	d9 2c       	mov	r13, r9
     8b0:	ee 84       	ldd	r14, Y+14	; 0x0e
     8b2:	f9 84       	ldd	r15, Y+9	; 0x09
     8b4:	0a 85       	ldd	r16, Y+10	; 0x0a
     8b6:	16 2d       	mov	r17, r6
     8b8:	24 2d       	mov	r18, r4
     8ba:	35 2d       	mov	r19, r5
     8bc:	95 2d       	mov	r25, r5
     8be:	99 0f       	add	r25, r25
     8c0:	99 0b       	sbc	r25, r25
     8c2:	49 2f       	mov	r20, r25
     8c4:	59 2f       	mov	r21, r25
     8c6:	69 2f       	mov	r22, r25
     8c8:	79 2f       	mov	r23, r25
     8ca:	89 2f       	mov	r24, r25
     8cc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__muldi3>
     8d0:	a2 2e       	mov	r10, r18
     8d2:	b3 2e       	mov	r11, r19
     8d4:	c4 2e       	mov	r12, r20
     8d6:	d5 2e       	mov	r13, r21
     8d8:	e6 2e       	mov	r14, r22
     8da:	f7 2e       	mov	r15, r23
     8dc:	08 2f       	mov	r16, r24
     8de:	19 2f       	mov	r17, r25
     8e0:	29 81       	ldd	r18, Y+1	; 0x01
     8e2:	3a 81       	ldd	r19, Y+2	; 0x02
     8e4:	4b 81       	ldd	r20, Y+3	; 0x03
     8e6:	5c 81       	ldd	r21, Y+4	; 0x04
     8e8:	6d 81       	ldd	r22, Y+5	; 0x05
     8ea:	7e 81       	ldd	r23, Y+6	; 0x06
     8ec:	8f 81       	ldd	r24, Y+7	; 0x07
     8ee:	98 85       	ldd	r25, Y+8	; 0x08
     8f0:	0e 94 05 0c 	call	0x180a	; 0x180a <__subdi3>
     8f4:	a0 e0       	ldi	r26, 0x00	; 0
     8f6:	0e 94 17 0c 	call	0x182e	; 0x182e <__cmpdi2_s8>
     8fa:	24 f0       	brlt	.+8      	; 0x904 <_Z12LCD_PRINTDECjhh+0x244>
     8fc:	1f ef       	ldi	r17, 0xFF	; 255
     8fe:	41 1a       	sub	r4, r17
     900:	51 0a       	sbc	r5, r17
     902:	82 cf       	rjmp	.-252    	; 0x808 <_Z12LCD_PRINTDECjhh+0x148>
     904:	2d 85       	ldd	r18, Y+13	; 0x0d
     906:	3e 85       	ldd	r19, Y+14	; 0x0e
		if(t > 0){
     908:	14 14       	cp	r1, r4
     90a:	15 04       	cpc	r1, r5
     90c:	ec f5       	brge	.+122    	; 0x988 <_Z12LCD_PRINTDECjhh+0x2c8>
			startNum -= mathPow(10, i) * (t - 1); //Subtract the printed number from the start number
     90e:	a2 01       	movw	r20, r4
     910:	41 50       	subi	r20, 0x01	; 1
     912:	51 09       	sbc	r21, r1
     914:	95 2f       	mov	r25, r21
     916:	99 0f       	add	r25, r25
     918:	99 0b       	sbc	r25, r25
     91a:	a2 2e       	mov	r10, r18
     91c:	b7 2c       	mov	r11, r7
     91e:	c8 2c       	mov	r12, r8
     920:	d9 2c       	mov	r13, r9
     922:	e3 2e       	mov	r14, r19
     924:	f9 84       	ldd	r15, Y+9	; 0x09
     926:	0a 85       	ldd	r16, Y+10	; 0x0a
     928:	16 2d       	mov	r17, r6
     92a:	24 2f       	mov	r18, r20
     92c:	35 2f       	mov	r19, r21
     92e:	49 2f       	mov	r20, r25
     930:	59 2f       	mov	r21, r25
     932:	69 2f       	mov	r22, r25
     934:	79 2f       	mov	r23, r25
     936:	89 2f       	mov	r24, r25
     938:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__muldi3>
     93c:	a2 2e       	mov	r10, r18
     93e:	b3 2e       	mov	r11, r19
     940:	c4 2e       	mov	r12, r20
     942:	d5 2e       	mov	r13, r21
     944:	e6 2e       	mov	r14, r22
     946:	f7 2e       	mov	r15, r23
     948:	08 2f       	mov	r16, r24
     94a:	19 2f       	mov	r17, r25
     94c:	29 81       	ldd	r18, Y+1	; 0x01
     94e:	3a 81       	ldd	r19, Y+2	; 0x02
     950:	4b 81       	ldd	r20, Y+3	; 0x03
     952:	5c 81       	ldd	r21, Y+4	; 0x04
     954:	6d 81       	ldd	r22, Y+5	; 0x05
     956:	7e 81       	ldd	r23, Y+6	; 0x06
     958:	8f 81       	ldd	r24, Y+7	; 0x07
     95a:	98 85       	ldd	r25, Y+8	; 0x08
     95c:	0e 94 05 0c 	call	0x180a	; 0x180a <__subdi3>
     960:	29 83       	std	Y+1, r18	; 0x01
     962:	3a 83       	std	Y+2, r19	; 0x02
     964:	4b 83       	std	Y+3, r20	; 0x03
     966:	5c 83       	std	Y+4, r21	; 0x04
     968:	6d 83       	std	Y+5, r22	; 0x05
     96a:	7e 83       	std	Y+6, r23	; 0x06
     96c:	8f 83       	std	Y+7, r24	; 0x07
     96e:	98 87       	std	Y+8, r25	; 0x08
			*(toBeDispPtr + pos + decCounter - i) = 0x2F + t;
     970:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     974:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     978:	8b 85       	ldd	r24, Y+11	; 0x0b
     97a:	9c 85       	ldd	r25, Y+12	; 0x0c
     97c:	e8 0f       	add	r30, r24
     97e:	f9 1f       	adc	r31, r25
     980:	8f e2       	ldi	r24, 0x2F	; 47
     982:	84 0d       	add	r24, r4
     984:	80 83       	st	Z, r24
     986:	0d c0       	rjmp	.+26     	; 0x9a2 <_Z12LCD_PRINTDECjhh+0x2e2>
		}
		else{
			*(toBeDispPtr + pos + decCounter - i) = 0x30;
     988:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <toBeDispPtr>
     98c:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     990:	cb 84       	ldd	r12, Y+11	; 0x0b
     992:	dc 84       	ldd	r13, Y+12	; 0x0c
     994:	ec 0d       	add	r30, r12
     996:	fd 1d       	adc	r31, r13
     998:	0f 2e       	mov	r0, r31
     99a:	f0 e3       	ldi	r31, 0x30	; 48
     99c:	df 2e       	mov	r13, r31
     99e:	f0 2d       	mov	r31, r0
     9a0:	d0 82       	st	Z, r13
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     9a2:	01 e0       	ldi	r16, 0x01	; 1
     9a4:	20 1a       	sub	r2, r16
     9a6:	31 08       	sbc	r3, r1
     9a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     9aa:	3c 85       	ldd	r19, Y+12	; 0x0c
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	2b 87       	std	Y+11, r18	; 0x0b
     9b2:	3c 87       	std	Y+12, r19	; 0x0c
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	23 16       	cp	r2, r19
     9b8:	33 06       	cpc	r3, r19
     9ba:	09 f0       	breq	.+2      	; 0x9be <_Z12LCD_PRINTDECjhh+0x2fe>
     9bc:	23 cf       	rjmp	.-442    	; 0x804 <_Z12LCD_PRINTDECjhh+0x144>
     9be:	1f c0       	rjmp	.+62     	; 0x9fe <_Z12LCD_PRINTDECjhh+0x33e>
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
     9c0:	14 01       	movw	r2, r8
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	28 1a       	sub	r2, r24
     9c6:	31 08       	sbc	r3, r1
     9c8:	16 cf       	rjmp	.-468    	; 0x7f6 <_Z12LCD_PRINTDECjhh+0x136>
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	89 1a       	sub	r8, r25
     9ce:	99 0a       	sbc	r9, r25
     9d0:	aa e0       	ldi	r26, 0x0A	; 10
     9d2:	b1 2c       	mov	r11, r1
     9d4:	c1 2c       	mov	r12, r1
     9d6:	d1 2c       	mov	r13, r1
     9d8:	e1 2c       	mov	r14, r1
     9da:	f1 2c       	mov	r15, r1
     9dc:	00 e0       	ldi	r16, 0x00	; 0
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	e1 ce       	rjmp	.-574    	; 0x7a4 <_Z12LCD_PRINTDECjhh+0xe4>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     9e2:	29 81       	ldd	r18, Y+1	; 0x01
     9e4:	3a 81       	ldd	r19, Y+2	; 0x02
     9e6:	4b 81       	ldd	r20, Y+3	; 0x03
     9e8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ea:	6d 81       	ldd	r22, Y+5	; 0x05
     9ec:	7e 81       	ldd	r23, Y+6	; 0x06
     9ee:	8f 81       	ldd	r24, Y+7	; 0x07
     9f0:	98 85       	ldd	r25, Y+8	; 0x08
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	0e 94 17 0c 	call	0x182e	; 0x182e <__cmpdi2_s8>
     9f8:	19 f3       	breq	.-58     	; 0x9c0 <_Z12LCD_PRINTDECjhh+0x300>
     9fa:	14 f3       	brlt	.-60     	; 0x9c0 <_Z12LCD_PRINTDECjhh+0x300>
     9fc:	e6 cf       	rjmp	.-52     	; 0x9ca <_Z12LCD_PRINTDECjhh+0x30a>
		}
		
		
	}
	//NWR_CHAR();
}
     9fe:	2e 96       	adiw	r28, 0x0e	; 14
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	bf 90       	pop	r11
     a16:	af 90       	pop	r10
     a18:	9f 90       	pop	r9
     a1a:	8f 90       	pop	r8
     a1c:	7f 90       	pop	r7
     a1e:	6f 90       	pop	r6
     a20:	5f 90       	pop	r5
     a22:	4f 90       	pop	r4
     a24:	3f 90       	pop	r3
     a26:	2f 90       	pop	r2
     a28:	08 95       	ret

00000a2a <_Z9LCD_PRINTPch>:

void LCD_PRINT(char charBuf[32], uint8_t pos){
	currCursorPos = pos;
     a2a:	60 93 4e 21 	sts	0x214E, r22	; 0x80214e <currCursorPos>
     a2e:	fc 01       	movw	r30, r24
	int i = 0;
	bool NULL_FOUND = false;
	for(i = 0; !NULL_FOUND; i++){
		if(charBuf[i] == '\0'){
     a30:	91 91       	ld	r25, Z+
     a32:	99 23       	and	r25, r25
     a34:	79 f0       	breq	.+30     	; 0xa54 <_Z9LCD_PRINTPch+0x2a>
		NWR_CHAR();
	}
}

inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
     a36:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     a3a:	a0 91 4c 21 	lds	r26, 0x214C	; 0x80214c <toBeDispPtr>
     a3e:	b0 91 4d 21 	lds	r27, 0x214D	; 0x80214d <toBeDispPtr+0x1>
     a42:	a8 0f       	add	r26, r24
     a44:	b1 1d       	adc	r27, r1
     a46:	9c 93       	st	X, r25
	currCursorPos++;
     a48:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <currCursorPos>
     a4c:	8f 5f       	subi	r24, 0xFF	; 255
     a4e:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <currCursorPos>
     a52:	ee cf       	rjmp	.-36     	; 0xa30 <_Z9LCD_PRINTPch+0x6>
     a54:	08 95       	ret

00000a56 <_Z13setScrnAndPWMj>:
			setCharInToBe(charBuf[i]);
		}
	}
}

void setScrnAndPWM(uint16_t tempVal){ //Update screen with brightness value and update PWM
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
	uint16_t fullTemp = (double)tempVal * (double)tempVal * 0.11111;
     a5e:	bc 01       	movw	r22, r24
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatunsisf>
     a68:	6b 01       	movw	r12, r22
     a6a:	7c 01       	movw	r14, r24
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsf3>
     a74:	24 ea       	ldi	r18, 0xA4	; 164
     a76:	3d e8       	ldi	r19, 0x8D	; 141
     a78:	43 ee       	ldi	r20, 0xE3	; 227
     a7a:	5d e3       	ldi	r21, 0x3D	; 61
     a7c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsf3>
     a80:	0e 94 37 0a 	call	0x146e	; 0x146e <__fixunssfsi>
	TCE0_CCABUF = fullTemp;
     a84:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
     a88:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
	uint16_t dispVal = (double)tempVal / 7.68;
	LCD_PRINTDEC(dispVal, 28, 0x3);
     a8c:	2f e8       	ldi	r18, 0x8F	; 143
     a8e:	32 ec       	ldi	r19, 0xC2	; 194
     a90:	45 ef       	ldi	r20, 0xF5	; 245
     a92:	50 e4       	ldi	r21, 0x40	; 64
     a94:	c7 01       	movw	r24, r14
     a96:	b6 01       	movw	r22, r12
     a98:	0e 94 c5 09 	call	0x138a	; 0x138a <__divsf3>
     a9c:	0e 94 37 0a 	call	0x146e	; 0x146e <__fixunssfsi>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	43 e0       	ldi	r20, 0x03	; 3
     aa6:	6c e1       	ldi	r22, 0x1C	; 28
     aa8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12LCD_PRINTDECjhh>
}
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	08 95       	ret

00000ab6 <_Z16updateBrightnessv>:

void updateBrightness(){
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
	uint16_t tempStore = TCC0_CNT;
     aba:	c0 91 20 08 	lds	r28, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     abe:	d0 91 21 08 	lds	r29, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
     ac2:	be 01       	movw	r22, r28
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatunsisf>
     acc:	27 ed       	ldi	r18, 0xD7	; 215
     ace:	3f ed       	ldi	r19, 0xDF	; 223
     ad0:	4f e3       	ldi	r20, 0x3F	; 63
     ad2:	55 e4       	ldi	r21, 0x45	; 69
     ad4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__gesf2>
     ad8:	18 16       	cp	r1, r24
     ada:	34 f0       	brlt	.+12     	; 0xae8 <_Z16updateBrightnessv+0x32>
		tempStore = (int)MAX_CNT_BRIGHTNESS;
	}
	//Set a minimum brightness threshold
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
     adc:	c8 30       	cpi	r28, 0x08	; 8
     ade:	d1 05       	cpc	r29, r1
     ae0:	28 f4       	brcc	.+10     	; 0xaec <_Z16updateBrightnessv+0x36>
		tempStore = 0;
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <_Z16updateBrightnessv+0x36>
void updateBrightness(){
	uint16_t tempStore = TCC0_CNT;
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
		tempStore = (int)MAX_CNT_BRIGHTNESS;
     ae8:	c0 e0       	ldi	r28, 0x00	; 0
     aea:	dc e0       	ldi	r29, 0x0C	; 12
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
		tempStore = 0;
	}
	#define BRIGHTNESS_FINAL_DIV (BRIGHTNESS_DIV * 4)
	brightness = tempStore / BRIGHTNESS_FINAL_DIV;
     aec:	d6 95       	lsr	r29
     aee:	c7 95       	ror	r28
     af0:	d6 95       	lsr	r29
     af2:	c7 95       	ror	r28
     af4:	c0 93 23 21 	sts	0x2123, r28	; 0x802123 <brightness>
     af8:	d0 93 24 21 	sts	0x2124, r29	; 0x802124 <brightness+0x1>
	setScrnAndPWM(brightness);
     afc:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     b00:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     b04:	0e 94 2b 05 	call	0xa56	; 0xa56 <_Z13setScrnAndPWMj>
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <_Z7setMode10DMXMANMode>:

//Mode control functions
void setMode(DMXMANMode tempMode){
	if(tempMode == DMX){
     b0e:	81 11       	cpse	r24, r1
     b10:	33 c0       	rjmp	.+102    	; 0xb78 <_Z7setMode10DMXMANMode+0x6a>
		if(editMode){
     b12:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     b16:	88 23       	and	r24, r24
     b18:	31 f0       	breq	.+12     	; 0xb26 <_Z7setMode10DMXMANMode+0x18>
			currBlinkMaskPtr = DMXBlinkVal0;
     b1a:	8a ee       	ldi	r24, 0xEA	; 234
     b1c:	90 e2       	ldi	r25, 0x20	; 32
     b1e:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     b22:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = DMXdisp;
     b26:	84 e2       	ldi	r24, 0x24	; 36
     b28:	90 e2       	ldi	r25, 0x20	; 32
     b2a:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     b2e:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = DMX;
     b32:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <currentMode>
	USARTD0_CTRLB &= ~USART_RXEN_bm;
	//PORTD_INTCTRL &= ~PORT_INT0LVL_HI_gc;
}

inline void DMX_ENABLE(){//Enable all DMX interrupts
	TCC1_INTCTRLA |= TC_OVFINTLVL_HI_gc;//Enable timer0 interrupt
     b36:	e6 e4       	ldi	r30, 0x46	; 70
     b38:	f8 e0       	ldi	r31, 0x08	; 8
     b3a:	80 81       	ld	r24, Z
     b3c:	83 60       	ori	r24, 0x03	; 3
     b3e:	80 83       	st	Z, r24
	USARTD0_CTRLA |= USART_RXCINTLVL_MED_gc;//Enable USART interrupt
     b40:	e3 ea       	ldi	r30, 0xA3	; 163
     b42:	f9 e0       	ldi	r31, 0x09	; 9
     b44:	80 81       	ld	r24, Z
     b46:	80 62       	ori	r24, 0x20	; 32
     b48:	80 83       	st	Z, r24
	USARTD0_CTRLB |= USART_RXEN_bm;
     b4a:	e4 ea       	ldi	r30, 0xA4	; 164
     b4c:	f9 e0       	ldi	r31, 0x09	; 9
     b4e:	80 81       	ld	r24, Z
     b50:	80 61       	ori	r24, 0x10	; 16
     b52:	80 83       	st	Z, r24
			currBlinkMaskPtr = DMXBlinkVal0;
		}
		toBeDispPtr = DMXdisp;
		currentMode = DMX;
		DMX_ENABLE();
		LCD_PRINTDEC(DMXChan, 22, 3);
     b54:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     b58:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     b5c:	43 e0       	ldi	r20, 0x03	; 3
     b5e:	66 e1       	ldi	r22, 0x16	; 22
     b60:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12LCD_PRINTDECjhh>
		LCD_PRINTDEC(DMXChan + 1, 28, 3);
     b64:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     b68:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     b6c:	43 e0       	ldi	r20, 0x03	; 3
     b6e:	6c e1       	ldi	r22, 0x1C	; 28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12LCD_PRINTDECjhh>
     b76:	08 95       	ret
	}
	if(tempMode == MAN){
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	41 f5       	brne	.+80     	; 0xbcc <_Z7setMode10DMXMANMode+0xbe>
		if(editMode){
     b7c:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     b80:	88 23       	and	r24, r24
     b82:	31 f0       	breq	.+12     	; 0xb90 <_Z7setMode10DMXMANMode+0x82>
			currBlinkMaskPtr = MANBlinkVal0;
     b84:	86 e6       	ldi	r24, 0x66	; 102
     b86:	90 e2       	ldi	r25, 0x20	; 32
     b88:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     b8c:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = MANdisp;
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	90 e2       	ldi	r25, 0x20	; 32
     b94:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <toBeDispPtr>
     b98:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <toBeDispPtr+0x1>
		currentMode = MAN;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <currentMode>
		eeprom_write_byte(MODE_addr, modeByte);
	}
}

inline void DMX_DISABLE(){//Disable all DMX interrupts
	TCC1_INTCTRLA &= ~TC_OVFINTLVL_HI_gc;//Disable timer0 interrupt
     ba2:	e6 e4       	ldi	r30, 0x46	; 70
     ba4:	f8 e0       	ldi	r31, 0x08	; 8
     ba6:	80 81       	ld	r24, Z
     ba8:	8c 7f       	andi	r24, 0xFC	; 252
     baa:	80 83       	st	Z, r24
	USARTD0_CTRLA &= ~USART_RXCINTLVL_MED_gc;//Disable USART interrupt
     bac:	e3 ea       	ldi	r30, 0xA3	; 163
     bae:	f9 e0       	ldi	r31, 0x09	; 9
     bb0:	80 81       	ld	r24, Z
     bb2:	8f 7d       	andi	r24, 0xDF	; 223
     bb4:	80 83       	st	Z, r24
	USARTD0_CTRLB &= ~USART_RXEN_bm;
     bb6:	e4 ea       	ldi	r30, 0xA4	; 164
     bb8:	f9 e0       	ldi	r31, 0x09	; 9
     bba:	80 81       	ld	r24, Z
     bbc:	8f 7e       	andi	r24, 0xEF	; 239
     bbe:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal0;
		}
		toBeDispPtr = MANdisp;
		currentMode = MAN;
		DMX_DISABLE();
		setScrnAndPWM(brightness);
     bc0:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     bc4:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     bc8:	0e 94 2b 05 	call	0xa56	; 0xa56 <_Z13setScrnAndPWMj>
     bcc:	08 95       	ret

00000bce <_Z17update_RAM_EEPROMv>:
	}
}

void update_RAM_EEPROM(){ //Updates RAM with all brightness, mode and DMX information from values stored in the EEPROM
	brightness = eeprom_read_word(BRIGHTNESS_addr);
     bce:	83 e1       	ldi	r24, 0x13	; 19
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 42 0c 	call	0x1884	; 0x1884 <eeprom_read_word>
     bd6:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <brightness>
     bda:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <brightness+0x1>
	DMXChan = eeprom_read_word(DMX_addr);
     bde:	85 e1       	ldi	r24, 0x15	; 21
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 42 0c 	call	0x1884	; 0x1884 <eeprom_read_word>
     be6:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
     bea:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
	setScrnAndPWM(brightness);
     bee:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     bf2:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     bf6:	0e 94 2b 05 	call	0xa56	; 0xa56 <_Z13setScrnAndPWMj>
	if(eeprom_read_byte(MODE_addr)){
     bfa:	80 e1       	ldi	r24, 0x10	; 16
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 32 0c 	call	0x1864	; 0x1864 <eeprom_read_byte>
     c02:	88 23       	and	r24, r24
     c04:	21 f0       	breq	.+8      	; 0xc0e <_Z17update_RAM_EEPROMv+0x40>
		setMode(MAN);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 87 05 	call	0xb0e	; 0xb0e <_Z7setMode10DMXMANMode>
     c0c:	08 95       	ret
	}
	else{
		setMode(DMX);
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	0e 94 87 05 	call	0xb0e	; 0xb0e <_Z7setMode10DMXMANMode>
     c14:	08 95       	ret

00000c16 <_Z10setEncMode11encoderMode>:
	}
}

void setEncMode(encoderMode tempMode){
	switch(tempMode){
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	d9 f0       	breq	.+54     	; 0xc50 <_Z10setEncMode11encoderMode+0x3a>
     c1a:	30 f0       	brcs	.+12     	; 0xc28 <_Z10setEncMode11encoderMode+0x12>
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	f1 f1       	breq	.+124    	; 0xc9c <_Z10setEncMode11encoderMode+0x86>
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	09 f4       	brne	.+2      	; 0xc26 <_Z10setEncMode11encoderMode+0x10>
     c24:	64 c0       	rjmp	.+200    	; 0xcee <_Z10setEncMode11encoderMode+0xd8>
     c26:	08 95       	ret
		case OFF:
		EncoderMode = OFF;
     c28:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <EncoderMode>
		TCC0_CTRLA &= ~TC_CLKSEL_DIV1_gc;
     c2c:	e0 e0       	ldi	r30, 0x00	; 0
     c2e:	f8 e0       	ldi	r31, 0x08	; 8
     c30:	80 81       	ld	r24, Z
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     c36:	e6 e0       	ldi	r30, 0x06	; 6
     c38:	f8 e0       	ldi	r31, 0x08	; 8
     c3a:	80 81       	ld	r24, Z
     c3c:	8e 7f       	andi	r24, 0xFE	; 254
     c3e:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     c40:	e7 e0       	ldi	r30, 0x07	; 7
     c42:	f8 e0       	ldi	r31, 0x08	; 8
     c44:	80 81       	ld	r24, Z
     c46:	8a 7f       	andi	r24, 0xFA	; 250
     c48:	80 83       	st	Z, r24
		//Insert EEPROM write code here
		update_EEPROM_RAM();
     c4a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_Z17update_EEPROM_RAMv>
		break;
     c4e:	08 95       	ret

		case MODESEL:
		#define TCC0_CNT_MODE (int)(160 * MODE_DIV)
		#define TCC0_PER_MODE (int)(320 * MODE_DIV)
		TCC0_CNT = TCC0_CNT_MODE;
     c50:	80 ea       	ldi	r24, 0xA0	; 160
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     c58:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     c5c:	e1 e0       	ldi	r30, 0x01	; 1
     c5e:	f8 e0       	ldi	r31, 0x08	; 8
     c60:	80 81       	ld	r24, Z
     c62:	88 7f       	andi	r24, 0xF8	; 248
     c64:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_MODE;
     c66:	80 e4       	ldi	r24, 0x40	; 64
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     c6e:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     c72:	e6 e0       	ldi	r30, 0x06	; 6
     c74:	f8 e0       	ldi	r31, 0x08	; 8
     c76:	80 81       	ld	r24, Z
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	80 83       	st	Z, r24
		OVF_firstSam = true;
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <__data_end>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     c82:	e7 e0       	ldi	r30, 0x07	; 7
     c84:	f8 e0       	ldi	r31, 0x08	; 8
     c86:	80 81       	ld	r24, Z
     c88:	8a 7f       	andi	r24, 0xFA	; 250
     c8a:	80 83       	st	Z, r24
		EncoderMode = MODESEL;
     c8c:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     c90:	e0 e0       	ldi	r30, 0x00	; 0
     c92:	f8 e0       	ldi	r31, 0x08	; 8
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
		break;
     c9a:	08 95       	ret

		case CHANSEL:
		#define TCC0_CNT_CHANNEL (int)(160 * CHANNEL_DIV)
		#define TCC0_PER_CHANNEL (int)(320 * CHANNEL_DIV)
		EncoderMode = CHANSEL;
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     ca2:	e0 e0       	ldi	r30, 0x00	; 0
     ca4:	f8 e0       	ldi	r31, 0x08	; 8
     ca6:	80 81       	ld	r24, Z
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	80 83       	st	Z, r24
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f8 e0       	ldi	r31, 0x08	; 8
     cb0:	80 81       	ld	r24, Z
     cb2:	88 7f       	andi	r24, 0xF8	; 248
     cb4:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_CHANNEL;
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     cbe:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = TCC0_CNT_CHANNEL;
     cc2:	80 ea       	ldi	r24, 0xA0	; 160
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     cca:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     cce:	e6 e0       	ldi	r30, 0x06	; 6
     cd0:	f8 e0       	ldi	r31, 0x08	; 8
     cd2:	80 81       	ld	r24, Z
     cd4:	8e 7f       	andi	r24, 0xFE	; 254
     cd6:	80 83       	st	Z, r24
		TCC0_INTCTRLB |= TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc;
     cd8:	e7 e0       	ldi	r30, 0x07	; 7
     cda:	f8 e0       	ldi	r31, 0x08	; 8
     cdc:	80 81       	ld	r24, Z
     cde:	85 60       	ori	r24, 0x05	; 5
     ce0:	80 83       	st	Z, r24
		CCA_firstSam = true;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <CCA_firstSam>
		CCB_firstSam = true;
     ce8:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <CCB_firstSam>
		break;
     cec:	08 95       	ret

		case BRIGHTSEL:
		EncoderMode = BRIGHTSEL;
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f8 e0       	ldi	r31, 0x08	; 8
     cf8:	80 81       	ld	r24, Z
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	80 83       	st	Z, r24
		TCC0_CTRLB |= TC_WGMODE_DS_B_gc;
     cfe:	e1 e0       	ldi	r30, 0x01	; 1
     d00:	f8 e0       	ldi	r31, 0x08	; 8
     d02:	80 81       	ld	r24, Z
     d04:	87 60       	ori	r24, 0x07	; 7
     d06:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     d08:	e6 e0       	ldi	r30, 0x06	; 6
     d0a:	f8 e0       	ldi	r31, 0x08	; 8
     d0c:	80 81       	ld	r24, Z
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d12:	e7 e0       	ldi	r30, 0x07	; 7
     d14:	f8 e0       	ldi	r31, 0x08	; 8
     d16:	80 81       	ld	r24, Z
     d18:	8a 7f       	andi	r24, 0xFA	; 250
     d1a:	80 83       	st	Z, r24
		#define TCC0_PER_BRIGHTNESS (3080 * BRIGHTNESS_DIV)
		TCC0_PER = TCC0_PER_BRIGHTNESS;
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	9c e0       	ldi	r25, 0x0C	; 12
     d20:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d24:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = (int)(brightness * BRIGHTNESS_FINAL_DIV);
     d28:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <brightness>
     d2c:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <brightness+0x1>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d3c:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     d40:	08 95       	ret

00000d42 <__vector_79>:
		break;
	}
}

//All ISR
ISR(TCD0_CCA_vect){
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	8f 93       	push	r24
     d4e:	ef 93       	push	r30
     d50:	ff 93       	push	r31
	#ifdef INVERT_BUTTON
		PORTC_PIN2CTRL |= PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
     d52:	e2 e5       	ldi	r30, 0x52	; 82
     d54:	f6 e0       	ldi	r31, 0x06	; 6
     d56:	80 81       	ld	r24, Z
     d58:	80 64       	ori	r24, 0x40	; 64
     d5a:	80 83       	st	Z, r24
	#else
		PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
    #endif
	
	TCD0_INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
     d5c:	e7 e0       	ldi	r30, 0x07	; 7
     d5e:	f9 e0       	ldi	r31, 0x09	; 9
     d60:	80 81       	ld	r24, Z
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	80 83       	st	Z, r24
} 
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	8f 91       	pop	r24
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <__vector_77>:

//PC2 interrupt when button is pressed
ISR(TCD0_OVF_vect){
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
	#ifdef INVERT_BUTTON
		PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
     d98:	e2 e5       	ldi	r30, 0x52	; 82
     d9a:	f6 e0       	ldi	r31, 0x06	; 6
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 7b       	andi	r24, 0xBF	; 191
     da0:	80 83       	st	Z, r24
	#else
		PORTC_PIN2CTRL |= PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
	#endif
	TCD0_INTCTRLB = TC_CCAINTLVL_LO_gc; //Setup compare interrupt so input will be un-inverted after release
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x700907>
	if(!editMode){
     da8:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
     dac:	81 11       	cpse	r24, r1
     dae:	0f c0       	rjmp	.+30     	; 0xdce <__vector_77+0x58>
		TCD0_PER = 1000; //Set debounce timer for short press detection
     db0:	88 ee       	ldi	r24, 0xE8	; 232
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     db8:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
		editMode = true;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <editMode>
		currentSelector = 0;
     dc2:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <currentSelector>
		editCounter = 0;
     dc6:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <editCounter>
     dca:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <editCounter+0x1>
	}
	if(currentMode == DMX){
     dce:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     dd2:	81 11       	cpse	r24, r1
     dd4:	4b c0       	rjmp	.+150    	; 0xe6c <__vector_77+0xf6>
		switch(currentSelector){
     dd6:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	11 f1       	breq	.+68     	; 0xe22 <__vector_77+0xac>
     dde:	28 f4       	brcc	.+10     	; 0xdea <__vector_77+0x74>
     de0:	88 23       	and	r24, r24
     de2:	41 f0       	breq	.+16     	; 0xdf4 <__vector_77+0x7e>
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	81 f0       	breq	.+32     	; 0xe08 <__vector_77+0x92>
     de8:	41 c0       	rjmp	.+130    	; 0xe6c <__vector_77+0xf6>
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	21 f1       	breq	.+72     	; 0xe36 <__vector_77+0xc0>
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	61 f1       	breq	.+88     	; 0xe4a <__vector_77+0xd4>
     df2:	3c c0       	rjmp	.+120    	; 0xe6c <__vector_77+0xf6>
			case 0:
				currBlinkMaskPtr = DMXBlinkVal0;
     df4:	8a ee       	ldi	r24, 0xEA	; 234
     df6:	90 e2       	ldi	r25, 0x20	; 32
     df8:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     dfc:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				setEncMode(MODESEL);
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z10setEncMode11encoderMode>
				break;
     e06:	32 c0       	rjmp	.+100    	; 0xe6c <__vector_77+0xf6>
			case 1:
				currBlinkMaskPtr = DMXBlinkVal1;
     e08:	89 ec       	ldi	r24, 0xC9	; 201
     e0a:	90 e2       	ldi	r25, 0x20	; 32
     e0c:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e10:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				dmxMult = 100;
     e14:	84 e6       	ldi	r24, 0x64	; 100
     e16:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
				setEncMode(CHANSEL);
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z10setEncMode11encoderMode>
				break;
     e20:	25 c0       	rjmp	.+74     	; 0xe6c <__vector_77+0xf6>
			case 2:
				currBlinkMaskPtr = DMXBlinkVal2;
     e22:	88 ea       	ldi	r24, 0xA8	; 168
     e24:	90 e2       	ldi	r25, 0x20	; 32
     e26:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e2a:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				dmxMult = 10;
     e2e:	8a e0       	ldi	r24, 0x0A	; 10
     e30:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
				break;
     e34:	4c c0       	rjmp	.+152    	; 0xece <__vector_77+0x158>
			case 3:
				currBlinkMaskPtr = DMXBlinkVal3;
     e36:	87 e8       	ldi	r24, 0x87	; 135
     e38:	90 e2       	ldi	r25, 0x20	; 32
     e3a:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e3e:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				dmxMult = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
				break;
     e48:	42 c0       	rjmp	.+132    	; 0xece <__vector_77+0x158>
			case 4:
				setEncMode(OFF);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z10setEncMode11encoderMode>
				currBlinkMaskPtr = NULLBlinkVal;
     e50:	82 e7       	ldi	r24, 0x72	; 114
     e52:	91 e2       	ldi	r25, 0x21	; 33
     e54:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e58:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				editMode = false;
     e5c:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
				TCD0_PER = BUTTON_DELAY;//Set required button press time to 1 second
     e60:	86 ea       	ldi	r24, 0xA6	; 166
     e62:	98 e2       	ldi	r25, 0x28	; 40
     e64:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e68:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
				break;
		}
	}
	if(currentMode == MAN){
     e6c:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	69 f5       	brne	.+90     	; 0xece <__vector_77+0x158>
		switch(currentSelector){
     e74:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	71 f0       	breq	.+28     	; 0xe98 <__vector_77+0x122>
     e7c:	18 f0       	brcs	.+6      	; 0xe84 <__vector_77+0x10e>
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	a9 f0       	breq	.+42     	; 0xeac <__vector_77+0x136>
     e82:	25 c0       	rjmp	.+74     	; 0xece <__vector_77+0x158>
			case 0:
				currBlinkMaskPtr = MANBlinkVal0;
     e84:	86 e6       	ldi	r24, 0x66	; 102
     e86:	90 e2       	ldi	r25, 0x20	; 32
     e88:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     e8c:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				setEncMode(MODESEL);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z10setEncMode11encoderMode>
				break;
     e96:	1b c0       	rjmp	.+54     	; 0xece <__vector_77+0x158>
			case 1:
				currBlinkMaskPtr = MANBlinkVal1;
     e98:	85 e4       	ldi	r24, 0x45	; 69
     e9a:	90 e2       	ldi	r25, 0x20	; 32
     e9c:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     ea0:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				setEncMode(BRIGHTSEL);
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z10setEncMode11encoderMode>
				break;
     eaa:	11 c0       	rjmp	.+34     	; 0xece <__vector_77+0x158>
			case 2:
				currBlinkMaskPtr = NULLBlinkVal;
     eac:	82 e7       	ldi	r24, 0x72	; 114
     eae:	91 e2       	ldi	r25, 0x21	; 33
     eb0:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
     eb4:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
				editMode = false;
     eb8:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
				setEncMode(OFF);
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z10setEncMode11encoderMode>
				TCD0_PER = BUTTON_DELAY;//Set required button press time to 1 second
     ec2:	86 ea       	ldi	r24, 0xA6	; 166
     ec4:	98 e2       	ldi	r25, 0x28	; 40
     ec6:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     eca:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
				break;
		}
	}
	currentSelector++;
     ece:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <currentSelector>
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <currentSelector>
}
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_14>:

ISR(TCC0_OVF_vect){
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
	TCC0_CNT = TCC0_CNT_MODE;
     f1c:	80 ea       	ldi	r24, 0xA0	; 160
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     f24:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	if(!OVF_firstSam){
     f28:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <__data_end>
     f2c:	81 11       	cpse	r24, r1
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <__vector_14+0x4e>
		if(currentMode == MAN){
     f30:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <currentMode>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	21 f4       	brne	.+8      	; 0xf40 <__vector_14+0x46>
			setMode(DMX);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0e 94 87 05 	call	0xb0e	; 0xb0e <_Z7setMode10DMXMANMode>
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <__vector_14+0x52>
		}
		else{
			setMode(MAN);
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	0e 94 87 05 	call	0xb0e	; 0xb0e <_Z7setMode10DMXMANMode>
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <__vector_14+0x52>
		}
	}
	else{
		OVF_firstSam = false;
     f48:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <__data_end>
	}
}
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_16>:

ISR(TCC0_CCA_vect){
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
	if(!CCA_firstSam){
     f90:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <CCA_firstSam>
     f94:	81 11       	cpse	r24, r1
     f96:	33 c0       	rjmp	.+102    	; 0xffe <__vector_16+0x90>
		if(CCB_flag){
     f98:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <CCB_flag>
     f9c:	88 23       	and	r24, r24
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <__vector_16+0x38>
			CCB_flag = false;
     fa0:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <CCB_flag>
     fa4:	2e c0       	rjmp	.+92     	; 0x1002 <__vector_16+0x94>
		}
		else{
			CCA_flag = true;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <CCA_flag>
			if(DMXChan - dmxMult >= DMXmin){
     fac:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     fb0:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     fb4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     fb8:	82 1b       	sub	r24, r18
     fba:	91 09       	sbc	r25, r1
     fbc:	18 16       	cp	r1, r24
     fbe:	19 06       	cpc	r1, r25
     fc0:	04 f5       	brge	.+64     	; 0x1002 <__vector_16+0x94>
				DMXChan -= dmxMult;
     fc2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     fc6:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     fca:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     fce:	82 1b       	sub	r24, r18
     fd0:	91 09       	sbc	r25, r1
     fd2:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
     fd6:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
     fda:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     fde:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     fe2:	43 e0       	ldi	r20, 0x03	; 3
     fe4:	66 e1       	ldi	r22, 0x16	; 22
     fe6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
     fea:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     fee:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     ff2:	43 e0       	ldi	r20, 0x03	; 3
     ff4:	6c e1       	ldi	r22, 0x1C	; 28
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12LCD_PRINTDECjhh>
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__vector_16+0x94>
			}
		}
	}
	else{
		CCA_firstSam = false;
     ffe:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <CCA_firstSam>
	}
}
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	bf 91       	pop	r27
    1008:	af 91       	pop	r26
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	7f 91       	pop	r23
    1010:	6f 91       	pop	r22
    1012:	5f 91       	pop	r21
    1014:	4f 91       	pop	r20
    1016:	3f 91       	pop	r19
    1018:	2f 91       	pop	r18
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	0f 90       	pop	r0
    1020:	1f 90       	pop	r1
    1022:	18 95       	reti

00001024 <__vector_17>:

ISR(TCC0_CCB_vect){
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	2f 93       	push	r18
    1030:	3f 93       	push	r19
    1032:	4f 93       	push	r20
    1034:	5f 93       	push	r21
    1036:	6f 93       	push	r22
    1038:	7f 93       	push	r23
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
    103e:	af 93       	push	r26
    1040:	bf 93       	push	r27
    1042:	ef 93       	push	r30
    1044:	ff 93       	push	r31
	if(!CCB_firstSam){
    1046:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <CCB_firstSam>
    104a:	81 11       	cpse	r24, r1
    104c:	33 c0       	rjmp	.+102    	; 0x10b4 <__vector_17+0x90>
		if(CCA_flag){
    104e:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <CCA_flag>
    1052:	88 23       	and	r24, r24
    1054:	19 f0       	breq	.+6      	; 0x105c <__vector_17+0x38>
			CCA_flag = false;
    1056:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <CCA_flag>
    105a:	2e c0       	rjmp	.+92     	; 0x10b8 <__vector_17+0x94>
		}
		else{
			CCB_flag = true;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <CCB_flag>
			if(DMXChan + dmxMult <= DMXMax){
    1062:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1066:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    106a:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    106e:	82 0f       	add	r24, r18
    1070:	91 1d       	adc	r25, r1
    1072:	81 15       	cp	r24, r1
    1074:	92 40       	sbci	r25, 0x02	; 2
    1076:	04 f5       	brge	.+64     	; 0x10b8 <__vector_17+0x94>
				DMXChan += dmxMult;
    1078:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    107c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1080:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1084:	82 0f       	add	r24, r18
    1086:	91 1d       	adc	r25, r1
    1088:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    108c:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    1090:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1094:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1098:	43 e0       	ldi	r20, 0x03	; 3
    109a:	66 e1       	ldi	r22, 0x16	; 22
    109c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    10a0:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    10a4:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    10a8:	43 e0       	ldi	r20, 0x03	; 3
    10aa:	6c e1       	ldi	r22, 0x1C	; 28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12LCD_PRINTDECjhh>
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <__vector_17+0x94>
			}
		}
	}
	else{
		CCB_firstSam = false;
    10b4:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <CCB_firstSam>
	}
}
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <__vector_10>:

ISR(RTC_OVF_vect){
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	2f 93       	push	r18
    10e6:	3f 93       	push	r19
    10e8:	4f 93       	push	r20
    10ea:	5f 93       	push	r21
    10ec:	6f 93       	push	r22
    10ee:	7f 93       	push	r23
    10f0:	8f 93       	push	r24
    10f2:	9f 93       	push	r25
    10f4:	af 93       	push	r26
    10f6:	bf 93       	push	r27
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31
	editCounter++;
    10fc:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    1100:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <editCounter>
    110a:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <editCounter+0x1>
	if(editCounter > 15){
    110e:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <editCounter>
    1112:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <editCounter+0x1>
    1116:	40 97       	sbiw	r24, 0x10	; 16
    1118:	88 f0       	brcs	.+34     	; 0x113c <__vector_10+0x62>
		setEncMode(OFF);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z10setEncMode11encoderMode>
		currBlinkMaskPtr = NULLBlinkVal;
    1120:	82 e7       	ldi	r24, 0x72	; 114
    1122:	91 e2       	ldi	r25, 0x21	; 33
    1124:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <currBlinkMaskPtr>
    1128:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <currBlinkMaskPtr+0x1>
		editMode = false;
    112c:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <editMode>
		TCD0_PER = 31250;//Set required button press time to 1 second
    1130:	82 e1       	ldi	r24, 0x12	; 18
    1132:	9a e7       	ldi	r25, 0x7A	; 122
    1134:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    1138:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	}
}
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <__vector_88>:

ISR(USARTD0_RXC_vect){//Interrupt for new DMX char
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
	uint16_t USART_data = USARTD0_DATA;
    1180:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    1184:	30 e0       	ldi	r19, 0x00	; 0
	if(cnt == DMXChan){//If DMX channel matches the set DMX channel
    1186:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    118a:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    118e:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1192:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1196:	48 17       	cp	r20, r24
    1198:	59 07       	cpc	r21, r25
    119a:	31 f4       	brne	.+12     	; 0x11a8 <__vector_88+0x4a>
		finalRes = USART_data << 8; //Buffer 8 MSB
    119c:	92 2f       	mov	r25, r18
    119e:	88 27       	eor	r24, r24
    11a0:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    11a4:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		//LCD_PRINTDEC(USART_data, 16, 5);
	}
	if(cnt == DMXChan + 1){//If DMX channel matches the set DMX channel + 1
    11a8:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    11ac:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    11b0:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <cnt>
    11b4:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <cnt+0x1>
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	84 17       	cp	r24, r20
    11bc:	95 07       	cpc	r25, r21
    11be:	a9 f4       	brne	.+42     	; 0x11ea <__vector_88+0x8c>
		//LCD_PRINTDEC(USART_data, 0, 5);
		finalRes |= USART_data; //Buffer LSB
    11c0:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    11c4:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    11c8:	82 2b       	or	r24, r18
    11ca:	93 2b       	or	r25, r19
    11cc:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <finalRes>
    11d0:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <finalRes+0x1>
		TCE0_CCABUF = finalRes; //Set compare register for PWM
    11d4:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <finalRes>
    11d8:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <finalRes+0x1>
    11dc:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
    11e0:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
		
		lt = true;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
	}

	if(DMXErrFlag){
    11ea:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    11ee:	88 23       	and	r24, r24
    11f0:	59 f0       	breq	.+22     	; 0x1208 <__vector_88+0xaa>
		lt = true;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
		if(cnt == 0 && USART_data == 0){
    11f8:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    11fc:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    1200:	89 2b       	or	r24, r25
    1202:	11 f4       	brne	.+4      	; 0x1208 <__vector_88+0xaa>
    1204:	23 2b       	or	r18, r19
    1206:	71 f0       	breq	.+28     	; 0x1224 <__vector_88+0xc6>
			DMXErrFlag = false;
			LCD_PRINT("      ", 10);
			lt = true;
		}
	}
	DMXErrCnt = 0;
    1208:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    120c:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	cnt++;//Increment channel counter
    1210:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <cnt>
    1214:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <cnt+0x1>
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <cnt>
    121e:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <cnt+0x1>
}
    1222:	0b c0       	rjmp	.+22     	; 0x123a <__vector_88+0xdc>
	}

	if(DMXErrFlag){
		lt = true;
		if(cnt == 0 && USART_data == 0){
			DMXErrFlag = false;
    1224:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <DMXErrFlag>
			LCD_PRINT("      ", 10);
    1228:	6a e0       	ldi	r22, 0x0A	; 10
    122a:	8b e0       	ldi	r24, 0x0B	; 11
    122c:	91 e2       	ldi	r25, 0x21	; 33
    122e:	0e 94 15 05 	call	0xa2a	; 0xa2a <_Z9LCD_PRINTPch>
			lt = true;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <lt>
    1238:	e7 cf       	rjmp	.-50     	; 0x1208 <__vector_88+0xaa>
		}
	}
	DMXErrCnt = 0;
	cnt++;//Increment channel counter
}
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <__vector_20>:

ISR(TCC1_OVF_vect){
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	cf 93       	push	r28
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
	cnt = 0; //Reset counter if there hasn't been any signal change in 1196 us on the DMX line (PD2)
    1280:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <cnt>
    1284:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <cnt+0x1>
	DMXErrCnt++;
    1288:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    128c:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <DMXErrCnt>
    1296:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <DMXErrCnt+0x1>
	if((DMXErrCnt > 836) && !DMXErrFlag){ //If there hasn't been any change in 1 second
    129a:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <DMXErrCnt>
    129e:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <DMXErrCnt+0x1>
    12a2:	85 34       	cpi	r24, 0x45	; 69
    12a4:	93 40       	sbci	r25, 0x03	; 3
    12a6:	90 f0       	brcs	.+36     	; 0x12cc <__vector_20+0x70>
    12a8:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <DMXErrFlag>
    12ac:	81 11       	cpse	r24, r1
    12ae:	0e c0       	rjmp	.+28     	; 0x12cc <__vector_20+0x70>
		DMXErrFlag = true;
    12b0:	c1 e0       	ldi	r28, 0x01	; 1
    12b2:	c0 93 25 21 	sts	0x2125, r28	; 0x802125 <DMXErrFlag>
		LCD_PRINT("NO DMX", 10);
    12b6:	6a e0       	ldi	r22, 0x0A	; 10
    12b8:	82 e1       	ldi	r24, 0x12	; 18
    12ba:	91 e2       	ldi	r25, 0x21	; 33
    12bc:	0e 94 15 05 	call	0xa2a	; 0xa2a <_Z9LCD_PRINTPch>
		lt = true;
    12c0:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
		DMXErrCnt = 0;
    12c4:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <DMXErrCnt>
    12c8:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <DMXErrCnt+0x1>
	}
	
}
    12cc:	ff 91       	pop	r31
    12ce:	ef 91       	pop	r30
    12d0:	cf 91       	pop	r28
    12d2:	bf 91       	pop	r27
    12d4:	af 91       	pop	r26
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	7f 91       	pop	r23
    12dc:	6f 91       	pop	r22
    12de:	5f 91       	pop	r21
    12e0:	4f 91       	pop	r20
    12e2:	3f 91       	pop	r19
    12e4:	2f 91       	pop	r18
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <main>:

int main(void)
{
	PORTC_DIRSET = (1 << MOSI_PIN) | (1 << SS_PIN) | (1 << SCK_PIN) | (1 << RS_PIN); //Set all pins used for communication to output
    12f0:	88 eb       	ldi	r24, 0xB8	; 184
    12f2:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	clk_set_32MHz();
    12f6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z13clk_set_32MHzv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12fa:	2f ef       	ldi	r18, 0xFF	; 255
    12fc:	85 ed       	ldi	r24, 0xD5	; 213
    12fe:	96 e0       	ldi	r25, 0x06	; 6
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	80 40       	sbci	r24, 0x00	; 0
    1304:	90 40       	sbci	r25, 0x00	; 0
    1306:	e1 f7       	brne	.-8      	; 0x1300 <main+0x10>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <main+0x1a>
    130a:	00 00       	nop
	_delay_ms(70);
	setup_PWM();
    130c:	0e 94 90 01 	call	0x320	; 0x320 <_Z9setup_PWMv>
	update_RAM_EEPROM();
    1310:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z17update_RAM_EEPROMv>
    setup_SPI();
    1314:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z9setup_SPIv>
    1318:	2f ef       	ldi	r18, 0xFF	; 255
    131a:	83 ec       	ldi	r24, 0xC3	; 195
    131c:	99 e0       	ldi	r25, 0x09	; 9
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	80 40       	sbci	r24, 0x00	; 0
    1322:	90 40       	sbci	r25, 0x00	; 0
    1324:	e1 f7       	brne	.-8      	; 0x131e <main+0x2e>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <main+0x38>
    1328:	00 00       	nop
    _delay_ms(100);
    setup_disp();
    132a:	0e 94 15 01 	call	0x22a	; 0x22a <_Z10setup_dispv>
	setup_btn();
    132e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z9setup_btnv>
	QDEC_INIT();
    1332:	0e 94 a4 01 	call	0x348	; 0x348 <_Z9QDEC_INITv>
	setup_blink();
    1336:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z11setup_blinkv>
	DMX_init();
    133a:	0e 94 ca 01 	call	0x394	; 0x394 <_Z8DMX_initv>
	updateDisp();
    133e:	0e 94 27 02 	call	0x44e	; 0x44e <_Z10updateDispv>
	setup_int();
    1342:	0e 94 8b 01 	call	0x316	; 0x316 <_Z9setup_intv>
		if(editMode){ //If the display is in edit mode update the display
			if(EncoderMode == BRIGHTSEL){
				updateBrightness();
			}
			updateDisp();
			lt = true;
    1346:	c1 e0       	ldi	r28, 0x01	; 1
	updateDisp();
	setup_int();

    while (1) 
    {
		if(editMode){ //If the display is in edit mode update the display
    1348:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <editMode>
    134c:	88 23       	and	r24, r24
    134e:	59 f0       	breq	.+22     	; 0x1366 <main+0x76>
			if(EncoderMode == BRIGHTSEL){
    1350:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <EncoderMode>
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	11 f4       	brne	.+4      	; 0x135c <main+0x6c>
				updateBrightness();
    1358:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z16updateBrightnessv>
			}
			updateDisp();
    135c:	0e 94 27 02 	call	0x44e	; 0x44e <_Z10updateDispv>
			lt = true;
    1360:	c0 93 2a 21 	sts	0x212A, r28	; 0x80212a <lt>
    1364:	08 c0       	rjmp	.+16     	; 0x1376 <main+0x86>
		}
		else{ 
			if (lt) //If lt is altered by another factor update the display as well
    1366:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <lt>
    136a:	88 23       	and	r24, r24
    136c:	21 f0       	breq	.+8      	; 0x1376 <main+0x86>
			{
				updateDisp();
    136e:	0e 94 27 02 	call	0x44e	; 0x44e <_Z10updateDispv>
				lt = false;
    1372:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <lt>
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	83 ef       	ldi	r24, 0xF3	; 243
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	80 40       	sbci	r24, 0x00	; 0
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	e1 f7       	brne	.-8      	; 0x137c <main+0x8c>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <main+0x96>
    1386:	00 00       	nop
    1388:	df cf       	rjmp	.-66     	; 0x1348 <main+0x58>

0000138a <__divsf3>:
    138a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__divsf3x>
    138e:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_round>
    1392:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_pscB>
    1396:	58 f0       	brcs	.+22     	; 0x13ae <__divsf3+0x24>
    1398:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_pscA>
    139c:	40 f0       	brcs	.+16     	; 0x13ae <__divsf3+0x24>
    139e:	29 f4       	brne	.+10     	; 0x13aa <__divsf3+0x20>
    13a0:	5f 3f       	cpi	r21, 0xFF	; 255
    13a2:	29 f0       	breq	.+10     	; 0x13ae <__divsf3+0x24>
    13a4:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_inf>
    13a8:	51 11       	cpse	r21, r1
    13aa:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_szero>
    13ae:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_nan>

000013b2 <__divsf3x>:
    13b2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_split3>
    13b6:	68 f3       	brcs	.-38     	; 0x1392 <__divsf3+0x8>

000013b8 <__divsf3_pse>:
    13b8:	99 23       	and	r25, r25
    13ba:	b1 f3       	breq	.-20     	; 0x13a8 <__divsf3+0x1e>
    13bc:	55 23       	and	r21, r21
    13be:	91 f3       	breq	.-28     	; 0x13a4 <__divsf3+0x1a>
    13c0:	95 1b       	sub	r25, r21
    13c2:	55 0b       	sbc	r21, r21
    13c4:	bb 27       	eor	r27, r27
    13c6:	aa 27       	eor	r26, r26
    13c8:	62 17       	cp	r22, r18
    13ca:	73 07       	cpc	r23, r19
    13cc:	84 07       	cpc	r24, r20
    13ce:	38 f0       	brcs	.+14     	; 0x13de <__divsf3_pse+0x26>
    13d0:	9f 5f       	subi	r25, 0xFF	; 255
    13d2:	5f 4f       	sbci	r21, 0xFF	; 255
    13d4:	22 0f       	add	r18, r18
    13d6:	33 1f       	adc	r19, r19
    13d8:	44 1f       	adc	r20, r20
    13da:	aa 1f       	adc	r26, r26
    13dc:	a9 f3       	breq	.-22     	; 0x13c8 <__divsf3_pse+0x10>
    13de:	35 d0       	rcall	.+106    	; 0x144a <__divsf3_pse+0x92>
    13e0:	0e 2e       	mov	r0, r30
    13e2:	3a f0       	brmi	.+14     	; 0x13f2 <__divsf3_pse+0x3a>
    13e4:	e0 e8       	ldi	r30, 0x80	; 128
    13e6:	32 d0       	rcall	.+100    	; 0x144c <__divsf3_pse+0x94>
    13e8:	91 50       	subi	r25, 0x01	; 1
    13ea:	50 40       	sbci	r21, 0x00	; 0
    13ec:	e6 95       	lsr	r30
    13ee:	00 1c       	adc	r0, r0
    13f0:	ca f7       	brpl	.-14     	; 0x13e4 <__divsf3_pse+0x2c>
    13f2:	2b d0       	rcall	.+86     	; 0x144a <__divsf3_pse+0x92>
    13f4:	fe 2f       	mov	r31, r30
    13f6:	29 d0       	rcall	.+82     	; 0x144a <__divsf3_pse+0x92>
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	bb 1f       	adc	r27, r27
    1400:	26 17       	cp	r18, r22
    1402:	37 07       	cpc	r19, r23
    1404:	48 07       	cpc	r20, r24
    1406:	ab 07       	cpc	r26, r27
    1408:	b0 e8       	ldi	r27, 0x80	; 128
    140a:	09 f0       	breq	.+2      	; 0x140e <__divsf3_pse+0x56>
    140c:	bb 0b       	sbc	r27, r27
    140e:	80 2d       	mov	r24, r0
    1410:	bf 01       	movw	r22, r30
    1412:	ff 27       	eor	r31, r31
    1414:	93 58       	subi	r25, 0x83	; 131
    1416:	5f 4f       	sbci	r21, 0xFF	; 255
    1418:	3a f0       	brmi	.+14     	; 0x1428 <__divsf3_pse+0x70>
    141a:	9e 3f       	cpi	r25, 0xFE	; 254
    141c:	51 05       	cpc	r21, r1
    141e:	78 f0       	brcs	.+30     	; 0x143e <__divsf3_pse+0x86>
    1420:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_inf>
    1424:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_szero>
    1428:	5f 3f       	cpi	r21, 0xFF	; 255
    142a:	e4 f3       	brlt	.-8      	; 0x1424 <__divsf3_pse+0x6c>
    142c:	98 3e       	cpi	r25, 0xE8	; 232
    142e:	d4 f3       	brlt	.-12     	; 0x1424 <__divsf3_pse+0x6c>
    1430:	86 95       	lsr	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	b7 95       	ror	r27
    1438:	f7 95       	ror	r31
    143a:	9f 5f       	subi	r25, 0xFF	; 255
    143c:	c9 f7       	brne	.-14     	; 0x1430 <__divsf3_pse+0x78>
    143e:	88 0f       	add	r24, r24
    1440:	91 1d       	adc	r25, r1
    1442:	96 95       	lsr	r25
    1444:	87 95       	ror	r24
    1446:	97 f9       	bld	r25, 7
    1448:	08 95       	ret
    144a:	e1 e0       	ldi	r30, 0x01	; 1
    144c:	66 0f       	add	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	bb 1f       	adc	r27, r27
    1454:	62 17       	cp	r22, r18
    1456:	73 07       	cpc	r23, r19
    1458:	84 07       	cpc	r24, r20
    145a:	ba 07       	cpc	r27, r26
    145c:	20 f0       	brcs	.+8      	; 0x1466 <__divsf3_pse+0xae>
    145e:	62 1b       	sub	r22, r18
    1460:	73 0b       	sbc	r23, r19
    1462:	84 0b       	sbc	r24, r20
    1464:	ba 0b       	sbc	r27, r26
    1466:	ee 1f       	adc	r30, r30
    1468:	88 f7       	brcc	.-30     	; 0x144c <__divsf3_pse+0x94>
    146a:	e0 95       	com	r30
    146c:	08 95       	ret

0000146e <__fixunssfsi>:
    146e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fp_splitA>
    1472:	88 f0       	brcs	.+34     	; 0x1496 <__fixunssfsi+0x28>
    1474:	9f 57       	subi	r25, 0x7F	; 127
    1476:	98 f0       	brcs	.+38     	; 0x149e <__fixunssfsi+0x30>
    1478:	b9 2f       	mov	r27, r25
    147a:	99 27       	eor	r25, r25
    147c:	b7 51       	subi	r27, 0x17	; 23
    147e:	b0 f0       	brcs	.+44     	; 0x14ac <__fixunssfsi+0x3e>
    1480:	e1 f0       	breq	.+56     	; 0x14ba <__fixunssfsi+0x4c>
    1482:	66 0f       	add	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	1a f0       	brmi	.+6      	; 0x1492 <__fixunssfsi+0x24>
    148c:	ba 95       	dec	r27
    148e:	c9 f7       	brne	.-14     	; 0x1482 <__fixunssfsi+0x14>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <__fixunssfsi+0x4c>
    1492:	b1 30       	cpi	r27, 0x01	; 1
    1494:	91 f0       	breq	.+36     	; 0x14ba <__fixunssfsi+0x4c>
    1496:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_zero>
    149a:	b1 e0       	ldi	r27, 0x01	; 1
    149c:	08 95       	ret
    149e:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_zero>
    14a2:	67 2f       	mov	r22, r23
    14a4:	78 2f       	mov	r23, r24
    14a6:	88 27       	eor	r24, r24
    14a8:	b8 5f       	subi	r27, 0xF8	; 248
    14aa:	39 f0       	breq	.+14     	; 0x14ba <__fixunssfsi+0x4c>
    14ac:	b9 3f       	cpi	r27, 0xF9	; 249
    14ae:	cc f3       	brlt	.-14     	; 0x14a2 <__fixunssfsi+0x34>
    14b0:	86 95       	lsr	r24
    14b2:	77 95       	ror	r23
    14b4:	67 95       	ror	r22
    14b6:	b3 95       	inc	r27
    14b8:	d9 f7       	brne	.-10     	; 0x14b0 <__fixunssfsi+0x42>
    14ba:	3e f4       	brtc	.+14     	; 0x14ca <__fixunssfsi+0x5c>
    14bc:	90 95       	com	r25
    14be:	80 95       	com	r24
    14c0:	70 95       	com	r23
    14c2:	61 95       	neg	r22
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	08 95       	ret

000014cc <__floatunsisf>:
    14cc:	e8 94       	clt
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <__floatsisf+0x12>

000014d0 <__floatsisf>:
    14d0:	97 fb       	bst	r25, 7
    14d2:	3e f4       	brtc	.+14     	; 0x14e2 <__floatsisf+0x12>
    14d4:	90 95       	com	r25
    14d6:	80 95       	com	r24
    14d8:	70 95       	com	r23
    14da:	61 95       	neg	r22
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	8f 4f       	sbci	r24, 0xFF	; 255
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	99 23       	and	r25, r25
    14e4:	a9 f0       	breq	.+42     	; 0x1510 <__floatsisf+0x40>
    14e6:	f9 2f       	mov	r31, r25
    14e8:	96 e9       	ldi	r25, 0x96	; 150
    14ea:	bb 27       	eor	r27, r27
    14ec:	93 95       	inc	r25
    14ee:	f6 95       	lsr	r31
    14f0:	87 95       	ror	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f1 11       	cpse	r31, r1
    14fa:	f8 cf       	rjmp	.-16     	; 0x14ec <__floatsisf+0x1c>
    14fc:	fa f4       	brpl	.+62     	; 0x153c <__floatsisf+0x6c>
    14fe:	bb 0f       	add	r27, r27
    1500:	11 f4       	brne	.+4      	; 0x1506 <__floatsisf+0x36>
    1502:	60 ff       	sbrs	r22, 0
    1504:	1b c0       	rjmp	.+54     	; 0x153c <__floatsisf+0x6c>
    1506:	6f 5f       	subi	r22, 0xFF	; 255
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	8f 4f       	sbci	r24, 0xFF	; 255
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	16 c0       	rjmp	.+44     	; 0x153c <__floatsisf+0x6c>
    1510:	88 23       	and	r24, r24
    1512:	11 f0       	breq	.+4      	; 0x1518 <__floatsisf+0x48>
    1514:	96 e9       	ldi	r25, 0x96	; 150
    1516:	11 c0       	rjmp	.+34     	; 0x153a <__floatsisf+0x6a>
    1518:	77 23       	and	r23, r23
    151a:	21 f0       	breq	.+8      	; 0x1524 <__floatsisf+0x54>
    151c:	9e e8       	ldi	r25, 0x8E	; 142
    151e:	87 2f       	mov	r24, r23
    1520:	76 2f       	mov	r23, r22
    1522:	05 c0       	rjmp	.+10     	; 0x152e <__floatsisf+0x5e>
    1524:	66 23       	and	r22, r22
    1526:	71 f0       	breq	.+28     	; 0x1544 <__floatsisf+0x74>
    1528:	96 e8       	ldi	r25, 0x86	; 134
    152a:	86 2f       	mov	r24, r22
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	2a f0       	brmi	.+10     	; 0x153c <__floatsisf+0x6c>
    1532:	9a 95       	dec	r25
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	da f7       	brpl	.-10     	; 0x1532 <__floatsisf+0x62>
    153c:	88 0f       	add	r24, r24
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	97 f9       	bld	r25, 7
    1544:	08 95       	ret

00001546 <__fp_inf>:
    1546:	97 f9       	bld	r25, 7
    1548:	9f 67       	ori	r25, 0x7F	; 127
    154a:	80 e8       	ldi	r24, 0x80	; 128
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	08 95       	ret

00001552 <__fp_nan>:
    1552:	9f ef       	ldi	r25, 0xFF	; 255
    1554:	80 ec       	ldi	r24, 0xC0	; 192
    1556:	08 95       	ret

00001558 <__fp_pscA>:
    1558:	00 24       	eor	r0, r0
    155a:	0a 94       	dec	r0
    155c:	16 16       	cp	r1, r22
    155e:	17 06       	cpc	r1, r23
    1560:	18 06       	cpc	r1, r24
    1562:	09 06       	cpc	r0, r25
    1564:	08 95       	ret

00001566 <__fp_pscB>:
    1566:	00 24       	eor	r0, r0
    1568:	0a 94       	dec	r0
    156a:	12 16       	cp	r1, r18
    156c:	13 06       	cpc	r1, r19
    156e:	14 06       	cpc	r1, r20
    1570:	05 06       	cpc	r0, r21
    1572:	08 95       	ret

00001574 <__fp_round>:
    1574:	09 2e       	mov	r0, r25
    1576:	03 94       	inc	r0
    1578:	00 0c       	add	r0, r0
    157a:	11 f4       	brne	.+4      	; 0x1580 <__fp_round+0xc>
    157c:	88 23       	and	r24, r24
    157e:	52 f0       	brmi	.+20     	; 0x1594 <__fp_round+0x20>
    1580:	bb 0f       	add	r27, r27
    1582:	40 f4       	brcc	.+16     	; 0x1594 <__fp_round+0x20>
    1584:	bf 2b       	or	r27, r31
    1586:	11 f4       	brne	.+4      	; 0x158c <__fp_round+0x18>
    1588:	60 ff       	sbrs	r22, 0
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <__fp_round+0x20>
    158c:	6f 5f       	subi	r22, 0xFF	; 255
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	8f 4f       	sbci	r24, 0xFF	; 255
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	08 95       	ret

00001596 <__fp_split3>:
    1596:	57 fd       	sbrc	r21, 7
    1598:	90 58       	subi	r25, 0x80	; 128
    159a:	44 0f       	add	r20, r20
    159c:	55 1f       	adc	r21, r21
    159e:	59 f0       	breq	.+22     	; 0x15b6 <__fp_splitA+0x10>
    15a0:	5f 3f       	cpi	r21, 0xFF	; 255
    15a2:	71 f0       	breq	.+28     	; 0x15c0 <__fp_splitA+0x1a>
    15a4:	47 95       	ror	r20

000015a6 <__fp_splitA>:
    15a6:	88 0f       	add	r24, r24
    15a8:	97 fb       	bst	r25, 7
    15aa:	99 1f       	adc	r25, r25
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <__fp_splitA+0x20>
    15ae:	9f 3f       	cpi	r25, 0xFF	; 255
    15b0:	79 f0       	breq	.+30     	; 0x15d0 <__fp_splitA+0x2a>
    15b2:	87 95       	ror	r24
    15b4:	08 95       	ret
    15b6:	12 16       	cp	r1, r18
    15b8:	13 06       	cpc	r1, r19
    15ba:	14 06       	cpc	r1, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	f2 cf       	rjmp	.-28     	; 0x15a4 <__fp_split3+0xe>
    15c0:	46 95       	lsr	r20
    15c2:	f1 df       	rcall	.-30     	; 0x15a6 <__fp_splitA>
    15c4:	08 c0       	rjmp	.+16     	; 0x15d6 <__fp_splitA+0x30>
    15c6:	16 16       	cp	r1, r22
    15c8:	17 06       	cpc	r1, r23
    15ca:	18 06       	cpc	r1, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	f1 cf       	rjmp	.-30     	; 0x15b2 <__fp_splitA+0xc>
    15d0:	86 95       	lsr	r24
    15d2:	71 05       	cpc	r23, r1
    15d4:	61 05       	cpc	r22, r1
    15d6:	08 94       	sec
    15d8:	08 95       	ret

000015da <__fp_zero>:
    15da:	e8 94       	clt

000015dc <__fp_szero>:
    15dc:	bb 27       	eor	r27, r27
    15de:	66 27       	eor	r22, r22
    15e0:	77 27       	eor	r23, r23
    15e2:	cb 01       	movw	r24, r22
    15e4:	97 f9       	bld	r25, 7
    15e6:	08 95       	ret

000015e8 <__gesf2>:
    15e8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__fp_cmp>
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <__gesf2+0x8>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	08 95       	ret

000015f2 <__mulsf3>:
    15f2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3x>
    15f6:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_round>
    15fa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_pscA>
    15fe:	38 f0       	brcs	.+14     	; 0x160e <__mulsf3+0x1c>
    1600:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_pscB>
    1604:	20 f0       	brcs	.+8      	; 0x160e <__mulsf3+0x1c>
    1606:	95 23       	and	r25, r21
    1608:	11 f0       	breq	.+4      	; 0x160e <__mulsf3+0x1c>
    160a:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_inf>
    160e:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_nan>
    1612:	11 24       	eor	r1, r1
    1614:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_szero>

00001618 <__mulsf3x>:
    1618:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_split3>
    161c:	70 f3       	brcs	.-36     	; 0x15fa <__mulsf3+0x8>

0000161e <__mulsf3_pse>:
    161e:	95 9f       	mul	r25, r21
    1620:	c1 f3       	breq	.-16     	; 0x1612 <__mulsf3+0x20>
    1622:	95 0f       	add	r25, r21
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	55 1f       	adc	r21, r21
    1628:	62 9f       	mul	r22, r18
    162a:	f0 01       	movw	r30, r0
    162c:	72 9f       	mul	r23, r18
    162e:	bb 27       	eor	r27, r27
    1630:	f0 0d       	add	r31, r0
    1632:	b1 1d       	adc	r27, r1
    1634:	63 9f       	mul	r22, r19
    1636:	aa 27       	eor	r26, r26
    1638:	f0 0d       	add	r31, r0
    163a:	b1 1d       	adc	r27, r1
    163c:	aa 1f       	adc	r26, r26
    163e:	64 9f       	mul	r22, r20
    1640:	66 27       	eor	r22, r22
    1642:	b0 0d       	add	r27, r0
    1644:	a1 1d       	adc	r26, r1
    1646:	66 1f       	adc	r22, r22
    1648:	82 9f       	mul	r24, r18
    164a:	22 27       	eor	r18, r18
    164c:	b0 0d       	add	r27, r0
    164e:	a1 1d       	adc	r26, r1
    1650:	62 1f       	adc	r22, r18
    1652:	73 9f       	mul	r23, r19
    1654:	b0 0d       	add	r27, r0
    1656:	a1 1d       	adc	r26, r1
    1658:	62 1f       	adc	r22, r18
    165a:	83 9f       	mul	r24, r19
    165c:	a0 0d       	add	r26, r0
    165e:	61 1d       	adc	r22, r1
    1660:	22 1f       	adc	r18, r18
    1662:	74 9f       	mul	r23, r20
    1664:	33 27       	eor	r19, r19
    1666:	a0 0d       	add	r26, r0
    1668:	61 1d       	adc	r22, r1
    166a:	23 1f       	adc	r18, r19
    166c:	84 9f       	mul	r24, r20
    166e:	60 0d       	add	r22, r0
    1670:	21 1d       	adc	r18, r1
    1672:	82 2f       	mov	r24, r18
    1674:	76 2f       	mov	r23, r22
    1676:	6a 2f       	mov	r22, r26
    1678:	11 24       	eor	r1, r1
    167a:	9f 57       	subi	r25, 0x7F	; 127
    167c:	50 40       	sbci	r21, 0x00	; 0
    167e:	9a f0       	brmi	.+38     	; 0x16a6 <__mulsf3_pse+0x88>
    1680:	f1 f0       	breq	.+60     	; 0x16be <__mulsf3_pse+0xa0>
    1682:	88 23       	and	r24, r24
    1684:	4a f0       	brmi	.+18     	; 0x1698 <__mulsf3_pse+0x7a>
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	bb 1f       	adc	r27, r27
    168c:	66 1f       	adc	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	88 1f       	adc	r24, r24
    1692:	91 50       	subi	r25, 0x01	; 1
    1694:	50 40       	sbci	r21, 0x00	; 0
    1696:	a9 f7       	brne	.-22     	; 0x1682 <__mulsf3_pse+0x64>
    1698:	9e 3f       	cpi	r25, 0xFE	; 254
    169a:	51 05       	cpc	r21, r1
    169c:	80 f0       	brcs	.+32     	; 0x16be <__mulsf3_pse+0xa0>
    169e:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_inf>
    16a2:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_szero>
    16a6:	5f 3f       	cpi	r21, 0xFF	; 255
    16a8:	e4 f3       	brlt	.-8      	; 0x16a2 <__mulsf3_pse+0x84>
    16aa:	98 3e       	cpi	r25, 0xE8	; 232
    16ac:	d4 f3       	brlt	.-12     	; 0x16a2 <__mulsf3_pse+0x84>
    16ae:	86 95       	lsr	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	b7 95       	ror	r27
    16b6:	f7 95       	ror	r31
    16b8:	e7 95       	ror	r30
    16ba:	9f 5f       	subi	r25, 0xFF	; 255
    16bc:	c1 f7       	brne	.-16     	; 0x16ae <__mulsf3_pse+0x90>
    16be:	fe 2b       	or	r31, r30
    16c0:	88 0f       	add	r24, r24
    16c2:	91 1d       	adc	r25, r1
    16c4:	96 95       	lsr	r25
    16c6:	87 95       	ror	r24
    16c8:	97 f9       	bld	r25, 7
    16ca:	08 95       	ret

000016cc <__fp_cmp>:
    16cc:	99 0f       	add	r25, r25
    16ce:	00 08       	sbc	r0, r0
    16d0:	55 0f       	add	r21, r21
    16d2:	aa 0b       	sbc	r26, r26
    16d4:	e0 e8       	ldi	r30, 0x80	; 128
    16d6:	fe ef       	ldi	r31, 0xFE	; 254
    16d8:	16 16       	cp	r1, r22
    16da:	17 06       	cpc	r1, r23
    16dc:	e8 07       	cpc	r30, r24
    16de:	f9 07       	cpc	r31, r25
    16e0:	c0 f0       	brcs	.+48     	; 0x1712 <__fp_cmp+0x46>
    16e2:	12 16       	cp	r1, r18
    16e4:	13 06       	cpc	r1, r19
    16e6:	e4 07       	cpc	r30, r20
    16e8:	f5 07       	cpc	r31, r21
    16ea:	98 f0       	brcs	.+38     	; 0x1712 <__fp_cmp+0x46>
    16ec:	62 1b       	sub	r22, r18
    16ee:	73 0b       	sbc	r23, r19
    16f0:	84 0b       	sbc	r24, r20
    16f2:	95 0b       	sbc	r25, r21
    16f4:	39 f4       	brne	.+14     	; 0x1704 <__fp_cmp+0x38>
    16f6:	0a 26       	eor	r0, r26
    16f8:	61 f0       	breq	.+24     	; 0x1712 <__fp_cmp+0x46>
    16fa:	23 2b       	or	r18, r19
    16fc:	24 2b       	or	r18, r20
    16fe:	25 2b       	or	r18, r21
    1700:	21 f4       	brne	.+8      	; 0x170a <__fp_cmp+0x3e>
    1702:	08 95       	ret
    1704:	0a 26       	eor	r0, r26
    1706:	09 f4       	brne	.+2      	; 0x170a <__fp_cmp+0x3e>
    1708:	a1 40       	sbci	r26, 0x01	; 1
    170a:	a6 95       	lsr	r26
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	81 1d       	adc	r24, r1
    1710:	81 1d       	adc	r24, r1
    1712:	08 95       	ret

00001714 <__muldi3>:
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	1f 93       	push	r17
    171a:	0f 93       	push	r16
    171c:	9a 9d       	mul	r25, r10
    171e:	f0 2d       	mov	r31, r0
    1720:	21 9f       	mul	r18, r17
    1722:	f0 0d       	add	r31, r0
    1724:	8b 9d       	mul	r24, r11
    1726:	f0 0d       	add	r31, r0
    1728:	8a 9d       	mul	r24, r10
    172a:	e0 2d       	mov	r30, r0
    172c:	f1 0d       	add	r31, r1
    172e:	03 9f       	mul	r16, r19
    1730:	f0 0d       	add	r31, r0
    1732:	02 9f       	mul	r16, r18
    1734:	e0 0d       	add	r30, r0
    1736:	f1 1d       	adc	r31, r1
    1738:	4e 9d       	mul	r20, r14
    173a:	e0 0d       	add	r30, r0
    173c:	f1 1d       	adc	r31, r1
    173e:	5e 9d       	mul	r21, r14
    1740:	f0 0d       	add	r31, r0
    1742:	4f 9d       	mul	r20, r15
    1744:	f0 0d       	add	r31, r0
    1746:	7f 93       	push	r23
    1748:	6f 93       	push	r22
    174a:	bf 92       	push	r11
    174c:	af 92       	push	r10
    174e:	5f 93       	push	r21
    1750:	4f 93       	push	r20
    1752:	d5 01       	movw	r26, r10
    1754:	0e 94 23 0c 	call	0x1846	; 0x1846 <__umulhisi3>
    1758:	8b 01       	movw	r16, r22
    175a:	ac 01       	movw	r20, r24
    175c:	d7 01       	movw	r26, r14
    175e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__umulhisi3>
    1762:	eb 01       	movw	r28, r22
    1764:	e8 0f       	add	r30, r24
    1766:	f9 1f       	adc	r31, r25
    1768:	d6 01       	movw	r26, r12
    176a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__muldi3_6>
    176e:	2f 91       	pop	r18
    1770:	3f 91       	pop	r19
    1772:	d6 01       	movw	r26, r12
    1774:	0e 94 23 0c 	call	0x1846	; 0x1846 <__umulhisi3>
    1778:	c6 0f       	add	r28, r22
    177a:	d7 1f       	adc	r29, r23
    177c:	e8 1f       	adc	r30, r24
    177e:	f9 1f       	adc	r31, r25
    1780:	af 91       	pop	r26
    1782:	bf 91       	pop	r27
    1784:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__muldi3_6>
    1788:	2f 91       	pop	r18
    178a:	3f 91       	pop	r19
    178c:	0e 94 23 0c 	call	0x1846	; 0x1846 <__umulhisi3>
    1790:	c6 0f       	add	r28, r22
    1792:	d7 1f       	adc	r29, r23
    1794:	e8 1f       	adc	r30, r24
    1796:	f9 1f       	adc	r31, r25
    1798:	d6 01       	movw	r26, r12
    179a:	0e 94 23 0c 	call	0x1846	; 0x1846 <__umulhisi3>
    179e:	e6 0f       	add	r30, r22
    17a0:	f7 1f       	adc	r31, r23
    17a2:	98 01       	movw	r18, r16
    17a4:	be 01       	movw	r22, r28
    17a6:	cf 01       	movw	r24, r30
    17a8:	11 24       	eor	r1, r1
    17aa:	0f 91       	pop	r16
    17ac:	1f 91       	pop	r17
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <__muldi3_6>:
    17b4:	0e 94 23 0c 	call	0x1846	; 0x1846 <__umulhisi3>
    17b8:	46 0f       	add	r20, r22
    17ba:	57 1f       	adc	r21, r23
    17bc:	c8 1f       	adc	r28, r24
    17be:	d9 1f       	adc	r29, r25
    17c0:	08 f4       	brcc	.+2      	; 0x17c4 <__muldi3_6+0x10>
    17c2:	31 96       	adiw	r30, 0x01	; 1
    17c4:	08 95       	ret

000017c6 <__ashldi3>:
    17c6:	0f 93       	push	r16
    17c8:	08 30       	cpi	r16, 0x08	; 8
    17ca:	90 f0       	brcs	.+36     	; 0x17f0 <__ashldi3+0x2a>
    17cc:	98 2f       	mov	r25, r24
    17ce:	87 2f       	mov	r24, r23
    17d0:	76 2f       	mov	r23, r22
    17d2:	65 2f       	mov	r22, r21
    17d4:	54 2f       	mov	r21, r20
    17d6:	43 2f       	mov	r20, r19
    17d8:	32 2f       	mov	r19, r18
    17da:	22 27       	eor	r18, r18
    17dc:	08 50       	subi	r16, 0x08	; 8
    17de:	f4 cf       	rjmp	.-24     	; 0x17c8 <__ashldi3+0x2>
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	66 1f       	adc	r22, r22
    17ea:	77 1f       	adc	r23, r23
    17ec:	88 1f       	adc	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 95       	dec	r16
    17f2:	b2 f7       	brpl	.-20     	; 0x17e0 <__ashldi3+0x1a>
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <__adddi3>:
    17f8:	2a 0d       	add	r18, r10
    17fa:	3b 1d       	adc	r19, r11
    17fc:	4c 1d       	adc	r20, r12
    17fe:	5d 1d       	adc	r21, r13
    1800:	6e 1d       	adc	r22, r14
    1802:	7f 1d       	adc	r23, r15
    1804:	80 1f       	adc	r24, r16
    1806:	91 1f       	adc	r25, r17
    1808:	08 95       	ret

0000180a <__subdi3>:
    180a:	2a 19       	sub	r18, r10
    180c:	3b 09       	sbc	r19, r11
    180e:	4c 09       	sbc	r20, r12
    1810:	5d 09       	sbc	r21, r13
    1812:	6e 09       	sbc	r22, r14
    1814:	7f 09       	sbc	r23, r15
    1816:	80 0b       	sbc	r24, r16
    1818:	91 0b       	sbc	r25, r17
    181a:	08 95       	ret

0000181c <__cmpdi2>:
    181c:	2a 15       	cp	r18, r10
    181e:	3b 05       	cpc	r19, r11
    1820:	4c 05       	cpc	r20, r12
    1822:	5d 05       	cpc	r21, r13
    1824:	6e 05       	cpc	r22, r14
    1826:	7f 05       	cpc	r23, r15
    1828:	80 07       	cpc	r24, r16
    182a:	91 07       	cpc	r25, r17
    182c:	08 95       	ret

0000182e <__cmpdi2_s8>:
    182e:	00 24       	eor	r0, r0
    1830:	a7 fd       	sbrc	r26, 7
    1832:	00 94       	com	r0
    1834:	2a 17       	cp	r18, r26
    1836:	30 05       	cpc	r19, r0
    1838:	40 05       	cpc	r20, r0
    183a:	50 05       	cpc	r21, r0
    183c:	60 05       	cpc	r22, r0
    183e:	70 05       	cpc	r23, r0
    1840:	80 05       	cpc	r24, r0
    1842:	90 05       	cpc	r25, r0
    1844:	08 95       	ret

00001846 <__umulhisi3>:
    1846:	a2 9f       	mul	r26, r18
    1848:	b0 01       	movw	r22, r0
    184a:	b3 9f       	mul	r27, r19
    184c:	c0 01       	movw	r24, r0
    184e:	a3 9f       	mul	r26, r19
    1850:	70 0d       	add	r23, r0
    1852:	81 1d       	adc	r24, r1
    1854:	11 24       	eor	r1, r1
    1856:	91 1d       	adc	r25, r1
    1858:	b2 9f       	mul	r27, r18
    185a:	70 0d       	add	r23, r0
    185c:	81 1d       	adc	r24, r1
    185e:	11 24       	eor	r1, r1
    1860:	91 1d       	adc	r25, r1
    1862:	08 95       	ret

00001864 <eeprom_read_byte>:
    1864:	03 d0       	rcall	.+6      	; 0x186c <eeprom_mapen>
    1866:	80 81       	ld	r24, Z
    1868:	99 27       	eor	r25, r25
    186a:	08 95       	ret

0000186c <eeprom_mapen>:
    186c:	e0 ec       	ldi	r30, 0xC0	; 192
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	37 85       	ldd	r19, Z+15	; 0x0f
    1872:	37 fd       	sbrc	r19, 7
    1874:	fd cf       	rjmp	.-6      	; 0x1870 <eeprom_mapen+0x4>
    1876:	34 85       	ldd	r19, Z+12	; 0x0c
    1878:	38 60       	ori	r19, 0x08	; 8
    187a:	34 87       	std	Z+12, r19	; 0x0c
    187c:	fc 01       	movw	r30, r24
    187e:	e0 50       	subi	r30, 0x00	; 0
    1880:	f0 4f       	sbci	r31, 0xF0	; 240
    1882:	08 95       	ret

00001884 <eeprom_read_word>:
    1884:	0e 94 36 0c 	call	0x186c	; 0x186c <eeprom_mapen>
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	08 95       	ret

0000188e <eeprom_write_byte>:
    188e:	26 2f       	mov	r18, r22

00001890 <eeprom_write_r18>:
    1890:	e0 ec       	ldi	r30, 0xC0	; 192
    1892:	f1 e0       	ldi	r31, 0x01	; 1
    1894:	37 85       	ldd	r19, Z+15	; 0x0f
    1896:	37 fd       	sbrc	r19, 7
    1898:	fd cf       	rjmp	.-6      	; 0x1894 <eeprom_write_r18+0x4>
    189a:	34 85       	ldd	r19, Z+12	; 0x0c
    189c:	37 7f       	andi	r19, 0xF7	; 247
    189e:	34 87       	std	Z+12, r19	; 0x0c
    18a0:	37 85       	ldd	r19, Z+15	; 0x0f
    18a2:	31 ff       	sbrs	r19, 1
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <eeprom_write_r18+0x28>
    18a6:	36 e3       	ldi	r19, 0x36	; 54
    18a8:	32 87       	std	Z+10, r19	; 0x0a
    18aa:	38 ed       	ldi	r19, 0xD8	; 216
    18ac:	34 bf       	out	0x34, r19	; 52
    18ae:	31 e0       	ldi	r19, 0x01	; 1
    18b0:	33 87       	std	Z+11, r19	; 0x0b
    18b2:	37 85       	ldd	r19, Z+15	; 0x0f
    18b4:	37 fd       	sbrc	r19, 7
    18b6:	fd cf       	rjmp	.-6      	; 0x18b2 <eeprom_write_r18+0x22>
    18b8:	33 e3       	ldi	r19, 0x33	; 51
    18ba:	32 87       	std	Z+10, r19	; 0x0a
    18bc:	80 83       	st	Z, r24
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	12 82       	std	Z+2, r1	; 0x02
    18c2:	24 83       	std	Z+4, r18	; 0x04
    18c4:	25 e3       	ldi	r18, 0x35	; 53
    18c6:	22 87       	std	Z+10, r18	; 0x0a
    18c8:	28 ed       	ldi	r18, 0xD8	; 216
    18ca:	31 e0       	ldi	r19, 0x01	; 1
    18cc:	24 bf       	out	0x34, r18	; 52
    18ce:	33 87       	std	Z+11, r19	; 0x0b
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	08 95       	ret

000018d4 <eeprom_write_word>:
    18d4:	0e 94 47 0c 	call	0x188e	; 0x188e <eeprom_write_byte>
    18d8:	27 2f       	mov	r18, r23
    18da:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <eeprom_write_r18>

000018de <_exit>:
    18de:	f8 94       	cli

000018e0 <__stop_program>:
    18e0:	ff cf       	rjmp	.-2      	; 0x18e0 <__stop_program>
