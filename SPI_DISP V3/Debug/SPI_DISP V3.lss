
SPI_DISP V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  000019bc  00001a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  0080211c  0080211c  00001b6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001932  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000415  00000000  00000000  00003626  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e12  00000000  00000000  00003a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  00004850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c44  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001743  00000000  00000000  00006a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000816b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_10>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_14>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_16>
      44:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_17>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_20>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     134:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__vector_77>
     138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     13c:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_79>
     140:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_80>
     144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     160:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__vector_88>
     164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	cd bf       	out	0x3d, r28	; 61
     174:	df e2       	ldi	r29, 0x2F	; 47
     176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
     178:	11 e2       	ldi	r17, 0x21	; 33
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e2       	ldi	r27, 0x20	; 32
     17e:	ec eb       	ldi	r30, 0xBC	; 188
     180:	f9 e1       	ldi	r31, 0x19	; 25
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	ac 31       	cpi	r26, 0x1C	; 28
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	21 e2       	ldi	r18, 0x21	; 33
     190:	ac e1       	ldi	r26, 0x1C	; 28
     192:	b1 e2       	ldi	r27, 0x21	; 33
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	ab 39       	cpi	r26, 0x9B	; 155
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <main>
     1a2:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_Z13clk_set_32MHzv>:
		return 1;
	}
	else{
		return result;
	}
}
     1aa:	e0 e5       	ldi	r30, 0x50	; 80
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	82 60       	ori	r24, 0x02	; 2
     1b2:	80 83       	st	Z, r24
     1b4:	e1 e5       	ldi	r30, 0x51	; 81
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	81 ff       	sbrs	r24, 1
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <_Z13clk_set_32MHzv+0xe>
     1be:	88 ed       	ldi	r24, 0xD8	; 216
     1c0:	84 bf       	out	0x34, r24	; 52
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     1c8:	08 95       	ret

000001ca <_Z11setup_blinkv>:
     1ca:	e0 e5       	ldi	r30, 0x50	; 80
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	84 60       	ori	r24, 0x04	; 4
     1d2:	80 83       	st	Z, r24
     1d4:	e1 e5       	ldi	r30, 0x51	; 81
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	82 ff       	sbrs	r24, 2
     1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <_Z11setup_blinkv+0xe>
     1de:	85 e0       	ldi	r24, 0x05	; 5
     1e0:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     1e4:	e1 e0       	ldi	r30, 0x01	; 1
     1e6:	f4 e0       	ldi	r31, 0x04	; 4
     1e8:	80 81       	ld	r24, Z
     1ea:	80 fd       	sbrc	r24, 0
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <_Z11setup_blinkv+0x1e>
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     1f4:	e1 e0       	ldi	r30, 0x01	; 1
     1f6:	f4 e0       	ldi	r31, 0x04	; 4
     1f8:	80 81       	ld	r24, Z
     1fa:	80 fd       	sbrc	r24, 0
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <_Z11setup_blinkv+0x2e>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	93 e0       	ldi	r25, 0x03	; 3
     208:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
     20c:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
     210:	e1 e0       	ldi	r30, 0x01	; 1
     212:	f4 e0       	ldi	r31, 0x04	; 4
     214:	80 81       	ld	r24, Z
     216:	80 fd       	sbrc	r24, 0
     218:	fd cf       	rjmp	.-6      	; 0x214 <_Z11setup_blinkv+0x4a>
     21a:	08 95       	ret

0000021c <_Z9setup_SPIv>:
     21c:	8e e5       	ldi	r24, 0x5E	; 94
     21e:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     222:	80 e1       	ldi	r24, 0x10	; 16
     224:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     228:	08 95       	ret

0000022a <_Z10setup_dispv>:
     22a:	88 eb       	ldi	r24, 0xB8	; 184
     22c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     230:	80 e1       	ldi	r24, 0x10	; 16
     232:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     236:	8c e0       	ldi	r24, 0x0C	; 12
     238:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     23c:	e2 ec       	ldi	r30, 0xC2	; 194
     23e:	f8 e0       	ldi	r31, 0x08	; 8
     240:	80 81       	ld	r24, Z
     242:	88 23       	and	r24, r24
     244:	ec f7       	brge	.-6      	; 0x240 <_Z10setup_dispv+0x16>
     246:	e2 ec       	ldi	r30, 0xC2	; 194
     248:	f8 e0       	ldi	r31, 0x08	; 8
     24a:	80 81       	ld	r24, Z
     24c:	80 68       	ori	r24, 0x80	; 128
     24e:	80 83       	st	Z, r24
     250:	80 e1       	ldi	r24, 0x10	; 16
     252:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     256:	e7 ec       	ldi	r30, 0xC7	; 199
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <_Z10setup_dispv+0x30>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <_Z10setup_dispv+0x36>
     260:	00 00       	nop
     262:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     266:	88 e3       	ldi	r24, 0x38	; 56
     268:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     26c:	e2 ec       	ldi	r30, 0xC2	; 194
     26e:	f8 e0       	ldi	r31, 0x08	; 8
     270:	80 81       	ld	r24, Z
     272:	88 23       	and	r24, r24
     274:	ec f7       	brge	.-6      	; 0x270 <_Z10setup_dispv+0x46>
     276:	e2 ec       	ldi	r30, 0xC2	; 194
     278:	f8 e0       	ldi	r31, 0x08	; 8
     27a:	80 81       	ld	r24, Z
     27c:	80 68       	ori	r24, 0x80	; 128
     27e:	80 83       	st	Z, r24
     280:	80 e1       	ldi	r24, 0x10	; 16
     282:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     286:	e7 ec       	ldi	r30, 0xC7	; 199
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	31 97       	sbiw	r30, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_Z10setup_dispv+0x60>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <_Z10setup_dispv+0x66>
     290:	00 00       	nop
     292:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     29c:	e2 ec       	ldi	r30, 0xC2	; 194
     29e:	f8 e0       	ldi	r31, 0x08	; 8
     2a0:	80 81       	ld	r24, Z
     2a2:	88 23       	and	r24, r24
     2a4:	ec f7       	brge	.-6      	; 0x2a0 <_Z10setup_dispv+0x76>
     2a6:	e2 ec       	ldi	r30, 0xC2	; 194
     2a8:	f8 e0       	ldi	r31, 0x08	; 8
     2aa:	80 81       	ld	r24, Z
     2ac:	80 68       	ori	r24, 0x80	; 128
     2ae:	80 83       	st	Z, r24
     2b0:	80 e1       	ldi	r24, 0x10	; 16
     2b2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2b6:	87 ec       	ldi	r24, 0xC7	; 199
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <_Z10setup_dispv+0x90>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <_Z10setup_dispv+0x96>
     2c0:	00 00       	nop
     2c2:	ef e9       	ldi	r30, 0x9F	; 159
     2c4:	f8 e2       	ldi	r31, 0x28	; 40
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_Z10setup_dispv+0x9c>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_Z10setup_dispv+0xa2>
     2cc:	00 00       	nop
     2ce:	08 95       	ret

000002d0 <_Z9setup_btnv>:
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
     2d6:	8b e8       	ldi	r24, 0x8B	; 139
     2d8:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <__TEXT_REGION_LENGTH__+0x700903>
     2dc:	83 e7       	ldi	r24, 0x73	; 115
     2de:	95 e5       	ldi	r25, 0x55	; 85
     2e0:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     2e4:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x700906>
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     2f6:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     2fa:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     2fe:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
     302:	84 e0       	ldi	r24, 0x04	; 4
     304:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     308:	e2 e5       	ldi	r30, 0x52	; 82
     30a:	f6 e0       	ldi	r31, 0x06	; 6
     30c:	8b e1       	ldi	r24, 0x1B	; 27
     30e:	80 83       	st	Z, r24
     310:	80 81       	ld	r24, Z
     312:	80 64       	ori	r24, 0x40	; 64
     314:	80 83       	st	Z, r24
     316:	82 e6       	ldi	r24, 0x62	; 98
     318:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__TEXT_REGION_LENGTH__+0x700183>
     31c:	08 95       	ret

0000031e <_Z9setup_intv>:
     31e:	87 e0       	ldi	r24, 0x07	; 7
     320:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     324:	78 94       	sei
     326:	08 95       	ret

00000328 <_Z9setup_PWMv>:
     328:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     32c:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     33c:	83 e1       	ldi	r24, 0x13	; 19
     33e:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     342:	8e ef       	ldi	r24, 0xFE	; 254
     344:	9f ef       	ldi	r25, 0xFF	; 255
     346:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     34a:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     34e:	08 95       	ret

00000350 <_Z9QDEC_INITv>:
     350:	80 e3       	ldi	r24, 0x30	; 48
     352:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
     35c:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__TEXT_REGION_LENGTH__+0x700675>
     360:	8c e6       	ldi	r24, 0x6C	; 108
     362:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
     366:	8d e6       	ldi	r24, 0x6D	; 109
     368:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x700181>
     36c:	89 e0       	ldi	r24, 0x09	; 9
     36e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__TEXT_REGION_LENGTH__+0x700188>
     372:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__TEXT_REGION_LENGTH__+0x700189>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     37c:	88 e6       	ldi	r24, 0x68	; 104
     37e:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <__TEXT_REGION_LENGTH__+0x700803>
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     38a:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     38e:	8f e3       	ldi	r24, 0x3F	; 63
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
     396:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
     39a:	08 95       	ret

0000039c <_Z8DMX_initv>:
     39c:	84 e0       	ldi	r24, 0x04	; 4
     39e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
     3a2:	88 e5       	ldi	r24, 0x58	; 88
     3a4:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     3a8:	8a e6       	ldi	r24, 0x6A	; 106
     3aa:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     3b4:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
     3b8:	8a e8       	ldi	r24, 0x8A	; 138
     3ba:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <__TEXT_REGION_LENGTH__+0x700843>
     3be:	87 e5       	ldi	r24, 0x57	; 87
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
     3c6:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
     3ca:	8b e0       	ldi	r24, 0x0B	; 11
     3cc:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
     3d0:	80 e8       	ldi	r24, 0x80	; 128
     3d2:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
     3d6:	83 e9       	ldi	r24, 0x93	; 147
     3d8:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
     3dc:	08 95       	ret

000003de <_Z17update_EEPROM_RAMv>:
     3de:	cf 93       	push	r28
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <currentMode>
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	09 f0       	breq	.+2      	; 0x3ec <_Z17update_EEPROM_RAMv+0xe>
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	c6 2f       	mov	r28, r22
     3ee:	c1 95       	neg	r28
     3f0:	83 e1       	ldi	r24, 0x13	; 19
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_word>
     3f8:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <brightness>
     3fc:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <brightness+0x1>
     400:	82 17       	cp	r24, r18
     402:	93 07       	cpc	r25, r19
     404:	41 f0       	breq	.+16     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
     406:	60 91 27 21 	lds	r22, 0x2127	; 0x802127 <brightness>
     40a:	70 91 28 21 	lds	r23, 0x2128	; 0x802128 <brightness+0x1>
     40e:	83 e1       	ldi	r24, 0x13	; 19
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <eeprom_write_word>
     416:	85 e1       	ldi	r24, 0x15	; 21
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_word>
     41e:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <DMXChan>
     422:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <DMXChan+0x1>
     426:	82 17       	cp	r24, r18
     428:	93 07       	cpc	r25, r19
     42a:	41 f0       	breq	.+16     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
     42c:	60 91 01 20 	lds	r22, 0x2001	; 0x802001 <DMXChan>
     430:	70 91 02 20 	lds	r23, 0x2002	; 0x802002 <DMXChan+0x1>
     434:	85 e1       	ldi	r24, 0x15	; 21
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <eeprom_write_word>
     43c:	80 e1       	ldi	r24, 0x10	; 16
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_read_byte>
     444:	8c 17       	cp	r24, r28
     446:	29 f0       	breq	.+10     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     448:	6c 2f       	mov	r22, r28
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <eeprom_write_byte>
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_Z10updateDispv>:
inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

void updateDisp(){
     456:	4f 92       	push	r4
     458:	5f 92       	push	r5
     45a:	6f 92       	push	r6
     45c:	7f 92       	push	r7
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	a1 97       	sbiw	r28, 0x21	; 33
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	de bf       	out	0x3e, r29	; 62
     480:	8f e2       	ldi	r24, 0x2F	; 47
     482:	91 e2       	ldi	r25, 0x21	; 33
     484:	4f e4       	ldi	r20, 0x4F	; 79
     486:	51 e2       	ldi	r21, 0x21	; 33
     488:	dc 01       	movw	r26, r24
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     48a:	bc 01       	movw	r22, r24
     48c:	60 95       	com	r22
     48e:	70 95       	com	r23
			RTC_CNT = 0;
     490:	08 e0       	ldi	r16, 0x08	; 8
     492:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
     494:	3d 91       	ld	r19, X+
     496:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <toBeDispPtr>
     49a:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <toBeDispPtr+0x1>
     49e:	ea 0f       	add	r30, r26
     4a0:	fb 1f       	adc	r31, r27
     4a2:	e6 0f       	add	r30, r22
     4a4:	f7 1f       	adc	r31, r23
     4a6:	20 81       	ld	r18, Z
     4a8:	32 17       	cp	r19, r18
     4aa:	39 f0       	breq	.+14     	; 0x4ba <_Z10updateDispv+0x64>
			RTC_CNT = 0;
     4ac:	f8 01       	movw	r30, r16
     4ae:	10 82       	st	Z, r1
     4b0:	11 82       	std	Z+1, r1	; 0x01
			editCounter = 0;
     4b2:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <editCounter>
     4b6:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <editCounter+0x1>
	uint8_t lowBound = 0xFF; //Lowest number in what the two arrays differ
	uint8_t highBound = 0; //Highest number in what the arrays differ
	char temp [33];
	uint32_t i = 0;
	bool toBlink = false;
	for(i = 0; i < 32; i++){//Check if any changes in diplayData have occurred, if so reset blink timer
     4ba:	4a 17       	cp	r20, r26
     4bc:	5b 07       	cpc	r21, r27
     4be:	51 f7       	brne	.-44     	; 0x494 <_Z10updateDispv+0x3e>
		if(oldToBeDispData[i] != *(toBeDispPtr + i)){
			RTC_CNT = 0;
			editCounter = 0;
		}
	}
	if(RTC_CNT > 512){
     4c0:	a0 90 08 04 	lds	r10, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     4c4:	b0 90 09 04 	lds	r11, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     4c8:	c0 90 50 21 	lds	r12, 0x2150	; 0x802150 <toBeDispPtr>
     4cc:	d0 90 51 21 	lds	r13, 0x2151	; 0x802151 <toBeDispPtr+0x1>
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <currBlinkMaskPtr>
     4da:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <currBlinkMaskPtr+0x1>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     4de:	fb 01       	movw	r30, r22
     4e0:	46 01       	movw	r8, r12
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     4e2:	68 94       	set
     4e4:	ee 24       	eor	r14, r14
     4e6:	e5 f8       	bld	r14, 5
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
     4e8:	11 e0       	ldi	r17, 0x01	; 1
     4ea:	a1 16       	cp	r10, r17
     4ec:	12 e0       	ldi	r17, 0x02	; 2
     4ee:	b1 06       	cpc	r11, r17
     4f0:	08 f4       	brcc	.+2      	; 0x4f4 <_Z10updateDispv+0x9e>
     4f2:	d0 c0       	rjmp	.+416    	; 0x694 <_Z10updateDispv+0x23e>
     4f4:	d9 01       	movw	r26, r18
     4f6:	fc 90       	ld	r15, X
     4f8:	ff 20       	and	r15, r15
     4fa:	09 f4       	brne	.+2      	; 0x4fe <_Z10updateDispv+0xa8>
     4fc:	cb c0       	rjmp	.+406    	; 0x694 <_Z10updateDispv+0x23e>
     4fe:	f0 90 97 21 	lds	r15, 0x2197	; 0x802197 <editMode>
     502:	f1 10       	cpse	r15, r1
     504:	cb c0       	rjmp	.+406    	; 0x69c <_Z10updateDispv+0x246>
     506:	c6 c0       	rjmp	.+396    	; 0x694 <_Z10updateDispv+0x23e>
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
     508:	d4 01       	movw	r26, r8
     50a:	fd 90       	ld	r15, X+
     50c:	4d 01       	movw	r8, r26
     50e:	dc 01       	movw	r26, r24
     510:	fd 92       	st	X+, r15
     512:	cd 01       	movw	r24, r26
     514:	31 96       	adiw	r30, 0x01	; 1
     516:	bf ef       	ldi	r27, 0xFF	; 255
     518:	cb 1a       	sub	r12, r27
     51a:	db 0a       	sbc	r13, r27
     51c:	2f 5f       	subi	r18, 0xFF	; 255
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
     520:	48 17       	cp	r20, r24
     522:	59 07       	cpc	r21, r25
     524:	09 f7       	brne	.-62     	; 0x4e8 <_Z10updateDispv+0x92>
     526:	e5 e5       	ldi	r30, 0x55	; 85
     528:	f1 e2       	ldi	r31, 0x21	; 33
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	d1 2c       	mov	r13, r1
     52e:	3f ef       	ldi	r19, 0xFF	; 255
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
     530:	db 01       	movw	r26, r22
     532:	9d 91       	ld	r25, X+
     534:	bd 01       	movw	r22, r26
     536:	20 81       	ld	r18, Z
     538:	29 17       	cp	r18, r25
     53a:	39 f0       	breq	.+14     	; 0x54a <_Z10updateDispv+0xf4>
			currDispData[i] = temp[i];
     53c:	90 83       	st	Z, r25
			highBound = i;
			if(lowBound == 0xFF){
     53e:	3f 3f       	cpi	r19, 0xFF	; 255
     540:	19 f4       	brne	.+6      	; 0x548 <_Z10updateDispv+0xf2>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     542:	d8 2e       	mov	r13, r24
			if(lowBound == 0xFF){
				lowBound = i;
     544:	38 2f       	mov	r19, r24
     546:	01 c0       	rjmp	.+2      	; 0x54a <_Z10updateDispv+0xf4>
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
		if(currDispData[i] != temp[i]){//Set the low and high bounds
			currDispData[i] = temp[i];
			highBound = i;
     548:	d8 2e       	mov	r13, r24
     54a:	31 96       	adiw	r30, 0x01	; 1
     54c:	8f 5f       	subi	r24, 0xFF	; 255
		{
			temp[i] = *(toBeDispPtr + i);
		}
		oldToBeDispData[i] = *(toBeDispPtr + i);
	}
	for(i = 0; i < 32; i++){
     54e:	80 32       	cpi	r24, 0x20	; 32
     550:	79 f7       	brne	.-34     	; 0x530 <_Z10updateDispv+0xda>
			if(lowBound == 0xFF){
				lowBound = i;
			}
		}
	}
	if(lowBound != 0xFF){ //If anything has changed on the display
     552:	3f 3f       	cpi	r19, 0xFF	; 255
     554:	09 f4       	brne	.+2      	; 0x558 <_Z10updateDispv+0x102>
     556:	a4 c0       	rjmp	.+328    	; 0x6a0 <_Z10updateDispv+0x24a>
		uint8_t tempPos = lowBound;
		if(tempPos > 15){
     558:	30 31       	cpi	r19, 0x10	; 16
     55a:	18 f0       	brcs	.+6      	; 0x562 <_Z10updateDispv+0x10c>
			tempPos += 48;
     55c:	80 e3       	ldi	r24, 0x30	; 48
     55e:	83 0f       	add	r24, r19
     560:	01 c0       	rjmp	.+2      	; 0x564 <_Z10updateDispv+0x10e>
     562:	83 2f       	mov	r24, r19
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
     564:	80 68       	ori	r24, 0x80	; 128
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     566:	90 e1       	ldi	r25, 0x10	; 16
     568:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	SPIC_DATA = SPIdata;
     56c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     570:	e2 ec       	ldi	r30, 0xC2	; 194
     572:	f8 e0       	ldi	r31, 0x08	; 8
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	ec f7       	brge	.-6      	; 0x574 <_Z10updateDispv+0x11e>
	SPIC_STATUS |= SPI_IF_bm;
     57a:	e2 ec       	ldi	r30, 0xC2	; 194
     57c:	f8 e0       	ldi	r31, 0x08	; 8
     57e:	80 81       	ld	r24, Z
     580:	80 68       	ori	r24, 0x80	; 128
     582:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     584:	e5 e4       	ldi	r30, 0x45	; 69
     586:	f6 e0       	ldi	r31, 0x06	; 6
     588:	80 e1       	ldi	r24, 0x10	; 16
     58a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58c:	87 ec       	ldi	r24, 0xC7	; 199
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <_Z10updateDispv+0x13a>
     594:	00 c0       	rjmp	.+0      	; 0x596 <_Z10updateDispv+0x140>
     596:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	80 83       	st	Z, r24
     59c:	9a e0       	ldi	r25, 0x0A	; 10
     59e:	9a 95       	dec	r25
     5a0:	f1 f7       	brne	.-4      	; 0x59e <_Z10updateDispv+0x148>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <_Z10updateDispv+0x14e>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     5a4:	43 2f       	mov	r20, r19
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	8d 2c       	mov	r8, r13
     5ae:	91 2c       	mov	r9, r1
     5b0:	a1 2c       	mov	r10, r1
     5b2:	b1 2c       	mov	r11, r1
     5b4:	84 16       	cp	r8, r20
     5b6:	95 06       	cpc	r9, r21
     5b8:	a6 06       	cpc	r10, r22
     5ba:	b7 06       	cpc	r11, r23
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <_Z10updateDispv+0x16a>
     5be:	62 c0       	rjmp	.+196    	; 0x684 <_Z10updateDispv+0x22e>
     5c0:	a3 2f       	mov	r26, r19
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	fd 01       	movw	r30, r26
     5c6:	eb 5a       	subi	r30, 0xAB	; 171
     5c8:	fe 4d       	sbci	r31, 0xDE	; 222
     5ca:	2f 01       	movw	r4, r30
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     5cc:	06 e4       	ldi	r16, 0x46	; 70
     5ce:	16 e0       	ldi	r17, 0x06	; 6
     5d0:	68 94       	set
     5d2:	cc 24       	eor	r12, r12
     5d4:	c4 f8       	bld	r12, 4
     5d6:	9c 2d       	mov	r25, r12
	SPIC_DATA = SPIdata;
     5d8:	0f 2e       	mov	r0, r31
     5da:	f3 ec       	ldi	r31, 0xC3	; 195
     5dc:	ef 2e       	mov	r14, r31
     5de:	f8 e0       	ldi	r31, 0x08	; 8
     5e0:	ff 2e       	mov	r15, r31
     5e2:	f0 2d       	mov	r31, r0
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     5e4:	e2 ec       	ldi	r30, 0xC2	; 194
     5e6:	f8 e0       	ldi	r31, 0x08	; 8
	SPIC_STATUS |= SPI_IF_bm;
	PORTC_OUTSET = (1 << SS_PIN);
     5e8:	25 e4       	ldi	r18, 0x45	; 69
     5ea:	36 e0       	ldi	r19, 0x06	; 6
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     5ec:	68 94       	set
     5ee:	77 24       	eor	r7, r7
     5f0:	73 f8       	bld	r7, 3
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
	SPIC_DATA = SPIdata;
     5f2:	0f 2e       	mov	r0, r31
     5f4:	f0 ec       	ldi	r31, 0xC0	; 192
     5f6:	6f 2e       	mov	r6, r31
     5f8:	f0 2d       	mov	r31, r0
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
     5fa:	d2 01       	movw	r26, r4
     5fc:	8d 91       	ld	r24, X+
     5fe:	2d 01       	movw	r4, r26
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     600:	d8 01       	movw	r26, r16
     602:	9c 93       	st	X, r25
	SPIC_DATA = SPIdata;
     604:	d7 01       	movw	r26, r14
     606:	8c 93       	st	X, r24
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     608:	80 81       	ld	r24, Z
     60a:	88 23       	and	r24, r24
     60c:	ec f7       	brge	.-6      	; 0x608 <_Z10updateDispv+0x1b2>
	SPIC_STATUS |= SPI_IF_bm;
     60e:	80 81       	ld	r24, Z
     610:	80 68       	ori	r24, 0x80	; 128
     612:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     614:	d9 01       	movw	r26, r18
     616:	9c 93       	st	X, r25
     618:	a7 ec       	ldi	r26, 0xC7	; 199
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	11 97       	sbiw	r26, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <_Z10updateDispv+0x1c6>
     620:	00 c0       	rjmp	.+0      	; 0x622 <_Z10updateDispv+0x1cc>
     622:	00 00       	nop
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
			send_SPI(currDispData[i]);
			if(i == 15 && highBound != 15){
     624:	4f 30       	cpi	r20, 0x0F	; 15
     626:	51 05       	cpc	r21, r1
     628:	61 05       	cpc	r22, r1
     62a:	71 05       	cpc	r23, r1
     62c:	09 f5       	brne	.+66     	; 0x670 <_Z10updateDispv+0x21a>
     62e:	bf e0       	ldi	r27, 0x0F	; 15
     630:	db 16       	cp	r13, r27
     632:	41 f1       	breq	.+80     	; 0x684 <_Z10updateDispv+0x22e>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     634:	d8 01       	movw	r26, r16
     636:	7c 92       	st	X, r7
     638:	ba e0       	ldi	r27, 0x0A	; 10
     63a:	ba 95       	dec	r27
     63c:	f1 f7       	brne	.-4      	; 0x63a <_Z10updateDispv+0x1e4>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <_Z10updateDispv+0x1ea>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal (1)
}
//Except for send_SPI
inline void send_SPI(uint8_t SPIdata){
	PORTC_OUTCLR = (1 << SS_PIN);
     640:	d8 01       	movw	r26, r16
     642:	cc 92       	st	X, r12
	SPIC_DATA = SPIdata;
     644:	d7 01       	movw	r26, r14
     646:	6c 92       	st	X, r6
	while(!(SPIC_STATUS & SPI_IF_bm)){}
     648:	80 81       	ld	r24, Z
     64a:	88 23       	and	r24, r24
     64c:	ec f7       	brge	.-6      	; 0x648 <_Z10updateDispv+0x1f2>
	SPIC_STATUS |= SPI_IF_bm;
     64e:	80 81       	ld	r24, Z
     650:	80 68       	ori	r24, 0x80	; 128
     652:	80 83       	st	Z, r24
	PORTC_OUTSET = (1 << SS_PIN);
     654:	d9 01       	movw	r26, r18
     656:	cc 92       	st	X, r12
     658:	a7 ec       	ldi	r26, 0xC7	; 199
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <_Z10updateDispv+0x206>
     660:	00 c0       	rjmp	.+0      	; 0x662 <_Z10updateDispv+0x20c>
     662:	00 00       	nop
		return result;
	}
}

inline void WR_CHAR(){
	PORTC_OUTSET = (1 << RS_PIN);
     664:	d9 01       	movw	r26, r18
     666:	7c 92       	st	X, r7
     668:	ba e0       	ldi	r27, 0x0A	; 10
     66a:	ba 95       	dec	r27
     66c:	f1 f7       	brne	.-4      	; 0x66a <_Z10updateDispv+0x214>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <_Z10updateDispv+0x21a>
			tempPos += 48;
		}
		tempPos |= 0b10000000;//Set the necessary bit to set DDRAM address
		send_SPI(tempPos);
		WR_CHAR();
		for(i = lowBound; i <= highBound; i++){
     670:	4f 5f       	subi	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	6f 4f       	sbci	r22, 0xFF	; 255
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	84 16       	cp	r8, r20
     67a:	95 06       	cpc	r9, r21
     67c:	a6 06       	cpc	r10, r22
     67e:	b7 06       	cpc	r11, r23
     680:	08 f0       	brcs	.+2      	; 0x684 <_Z10updateDispv+0x22e>
     682:	bb cf       	rjmp	.-138    	; 0x5fa <_Z10updateDispv+0x1a4>
	PORTC_OUTSET = (1 << RS_PIN);
	_delay_us(1); //Delay 1 us to ensure that the LCD has time to process change in RS signal
}

inline void NWR_CHAR(){
	PORTC_OUTCLR = (1 << RS_PIN);
     684:	88 e0       	ldi	r24, 0x08	; 8
     686:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     68a:	ea e0       	ldi	r30, 0x0A	; 10
     68c:	ea 95       	dec	r30
     68e:	f1 f7       	brne	.-4      	; 0x68c <_Z10updateDispv+0x236>
     690:	00 c0       	rjmp	.+0      	; 0x692 <_Z10updateDispv+0x23c>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <_Z10updateDispv+0x24a>
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
		}
		else
		{
			temp[i] = *(toBeDispPtr + i);
     694:	d6 01       	movw	r26, r12
     696:	fc 90       	ld	r15, X
     698:	f0 82       	st	Z, r15
     69a:	36 cf       	rjmp	.-404    	; 0x508 <_Z10updateDispv+0xb2>
	if(RTC_CNT > 512){
		toBlink = true; //If more than half a second has passed, blink
	}
	for(i = 0; i < 32; i++){//Blink
		if(toBlink && *(currBlinkMaskPtr + i) && editMode){
			temp[i] = ' ';
     69c:	e0 82       	st	Z, r14
     69e:	34 cf       	rjmp	.-408    	; 0x508 <_Z10updateDispv+0xb2>
				WR_CHAR();
			}
		}
		NWR_CHAR();
	}
}
     6a0:	a1 96       	adiw	r28, 0x21	; 33
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	9f 90       	pop	r9
     6bc:	8f 90       	pop	r8
     6be:	7f 90       	pop	r7
     6c0:	6f 90       	pop	r6
     6c2:	5f 90       	pop	r5
     6c4:	4f 90       	pop	r4
     6c6:	08 95       	ret

000006c8 <_Z12LCD_PRINTDECjhh>:
inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
	currCursorPos++;
}

void LCD_PRINTDEC(uint16_t numToPrint, uint8_t pos, uint8_t noOfDigits){
     6c8:	2f 92       	push	r2
     6ca:	3f 92       	push	r3
     6cc:	4f 92       	push	r4
     6ce:	5f 92       	push	r5
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	2e 97       	sbiw	r28, 0x0e	; 14
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	56 2e       	mov	r5, r22
	//currCursorPos = pos;
	//WR_CHAR();
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
     6f8:	6c 01       	movw	r12, r24
     6fa:	e1 2c       	mov	r14, r1
     6fc:	f1 2c       	mov	r15, r1
     6fe:	00 e0       	ldi	r16, 0x00	; 0
     700:	10 e0       	ldi	r17, 0x00	; 0
     702:	98 01       	movw	r18, r16
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	da 82       	std	Y+2, r13	; 0x02
     708:	eb 82       	std	Y+3, r14	; 0x03
     70a:	fc 82       	std	Y+4, r15	; 0x04
     70c:	0d 83       	std	Y+5, r16	; 0x05
     70e:	1e 83       	std	Y+6, r17	; 0x06
     710:	2f 83       	std	Y+7, r18	; 0x07
     712:	38 87       	std	Y+8, r19	; 0x08
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
     714:	4f 3f       	cpi	r20, 0xFF	; 255
     716:	09 f0       	breq	.+2      	; 0x71a <_Z12LCD_PRINTDECjhh+0x52>
     718:	6c c0       	rjmp	.+216    	; 0x7f2 <_Z12LCD_PRINTDECjhh+0x12a>
     71a:	3e c0       	rjmp	.+124    	; 0x798 <_Z12LCD_PRINTDECjhh+0xd0>

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
		result *= gnd;
     71c:	2a 2f       	mov	r18, r26
     71e:	3b 2d       	mov	r19, r11
     720:	4c 2d       	mov	r20, r12
     722:	5d 2d       	mov	r21, r13
     724:	6e 2d       	mov	r22, r14
     726:	7f 2d       	mov	r23, r15
     728:	80 2f       	mov	r24, r16
     72a:	91 2f       	mov	r25, r17
     72c:	01 e0       	ldi	r16, 0x01	; 1
     72e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ashldi3>
     732:	32 2e       	mov	r3, r18
     734:	43 2e       	mov	r4, r19
     736:	64 2e       	mov	r6, r20
     738:	75 2e       	mov	r7, r21
     73a:	6a 87       	std	Y+10, r22	; 0x0a
     73c:	79 87       	std	Y+9, r23	; 0x09
     73e:	b8 2f       	mov	r27, r24
     740:	a9 2f       	mov	r26, r25
     742:	02 e0       	ldi	r16, 0x02	; 2
     744:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ashldi3>
     748:	a2 2e       	mov	r10, r18
     74a:	b3 2e       	mov	r11, r19
     74c:	c4 2e       	mov	r12, r20
     74e:	d5 2e       	mov	r13, r21
     750:	e6 2e       	mov	r14, r22
     752:	f7 2e       	mov	r15, r23
     754:	08 2f       	mov	r16, r24
     756:	19 2f       	mov	r17, r25
     758:	23 2d       	mov	r18, r3
     75a:	34 2d       	mov	r19, r4
     75c:	46 2d       	mov	r20, r6
     75e:	57 2d       	mov	r21, r7
     760:	6a 85       	ldd	r22, Y+10	; 0x0a
     762:	79 85       	ldd	r23, Y+9	; 0x09
     764:	8b 2f       	mov	r24, r27
     766:	9a 2f       	mov	r25, r26
     768:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__adddi3>
     76c:	a2 2f       	mov	r26, r18
     76e:	b3 2e       	mov	r11, r19
     770:	c4 2e       	mov	r12, r20
     772:	d5 2e       	mov	r13, r21
     774:	e6 2e       	mov	r14, r22
     776:	f7 2e       	mov	r15, r23
     778:	08 2f       	mov	r16, r24
     77a:	19 2f       	mov	r17, r25
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     77c:	31 96       	adiw	r30, 0x01	; 1
     77e:	e8 15       	cp	r30, r8
     780:	f9 05       	cpc	r31, r9
     782:	64 f2       	brlt	.-104    	; 0x71c <_Z12LCD_PRINTDECjhh+0x54>
     784:	13 c0       	rjmp	.+38     	; 0x7ac <_Z12LCD_PRINTDECjhh+0xe4>
     786:	aa e0       	ldi	r26, 0x0A	; 10
     788:	b1 2c       	mov	r11, r1
     78a:	c1 2c       	mov	r12, r1
     78c:	d1 2c       	mov	r13, r1
     78e:	e1 2c       	mov	r14, r1
     790:	f1 2c       	mov	r15, r1
     792:	00 e0       	ldi	r16, 0x00	; 0
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	0a c0       	rjmp	.+20     	; 0x7ac <_Z12LCD_PRINTDECjhh+0xe4>
     798:	81 2c       	mov	r8, r1
     79a:	91 2c       	mov	r9, r1
     79c:	aa e0       	ldi	r26, 0x0A	; 10
     79e:	b1 2c       	mov	r11, r1
     7a0:	c1 2c       	mov	r12, r1
     7a2:	d1 2c       	mov	r13, r1
     7a4:	e1 2c       	mov	r14, r1
     7a6:	f1 2c       	mov	r15, r1
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	10 e0       	ldi	r17, 0x00	; 0
		result *= gnd;
	}
	if(exp == 0){
     7ac:	81 14       	cp	r8, r1
     7ae:	91 04       	cpc	r9, r1
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <_Z12LCD_PRINTDECjhh+0xec>
     7b2:	1b c1       	rjmp	.+566    	; 0x9ea <_Z12LCD_PRINTDECjhh+0x322>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     7b4:	29 81       	ldd	r18, Y+1	; 0x01
     7b6:	3a 81       	ldd	r19, Y+2	; 0x02
     7b8:	4b 81       	ldd	r20, Y+3	; 0x03
     7ba:	5c 81       	ldd	r21, Y+4	; 0x04
     7bc:	6d 81       	ldd	r22, Y+5	; 0x05
     7be:	7e 81       	ldd	r23, Y+6	; 0x06
     7c0:	8f 81       	ldd	r24, Y+7	; 0x07
     7c2:	98 85       	ldd	r25, Y+8	; 0x08
     7c4:	aa 2e       	mov	r10, r26
     7c6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__cmpdi2>
     7ca:	0c f4       	brge	.+2      	; 0x7ce <_Z12LCD_PRINTDECjhh+0x106>
     7cc:	fd c0       	rjmp	.+506    	; 0x9c8 <_Z12LCD_PRINTDECjhh+0x300>
				check = true;
			}
			decCounter++;
     7ce:	0f ef       	ldi	r16, 0xFF	; 255
     7d0:	80 1a       	sub	r8, r16
     7d2:	90 0a       	sbc	r9, r16
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     7d4:	12 e0       	ldi	r17, 0x02	; 2
     7d6:	81 16       	cp	r8, r17
     7d8:	91 04       	cpc	r9, r1
     7da:	ac f2       	brlt	.-86     	; 0x786 <_Z12LCD_PRINTDECjhh+0xbe>
     7dc:	aa e0       	ldi	r26, 0x0A	; 10
     7de:	b1 2c       	mov	r11, r1
     7e0:	c1 2c       	mov	r12, r1
     7e2:	d1 2c       	mov	r13, r1
     7e4:	e1 2c       	mov	r14, r1
     7e6:	f1 2c       	mov	r15, r1
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
     7ec:	e1 e0       	ldi	r30, 0x01	; 1
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	95 cf       	rjmp	.-214    	; 0x71c <_Z12LCD_PRINTDECjhh+0x54>
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
	}
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
     7f2:	84 2f       	mov	r24, r20
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	1c 01       	movw	r2, r24
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	22 1a       	sub	r2, r18
     7fc:	31 08       	sbc	r3, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     7fe:	33 20       	and	r3, r3
     800:	0c f4       	brge	.+2      	; 0x804 <_Z12LCD_PRINTDECjhh+0x13c>
     802:	01 c1       	rjmp	.+514    	; 0xa06 <_Z12LCD_PRINTDECjhh+0x33e>
     804:	85 2d       	mov	r24, r5
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	8b 87       	std	Y+11, r24	; 0x0b
     80a:	9c 87       	std	Y+12, r25	; 0x0c
     80c:	41 2c       	mov	r4, r1
     80e:	51 2c       	mov	r5, r1
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	29 16       	cp	r2, r25
     814:	31 04       	cpc	r3, r1
     816:	7c f1       	brlt	.+94     	; 0x876 <_Z12LCD_PRINTDECjhh+0x1ae>
     818:	2a e0       	ldi	r18, 0x0A	; 10
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	e1 e0       	ldi	r30, 0x01	; 1
     82a:	f0 e0       	ldi	r31, 0x00	; 0
		result *= gnd;
     82c:	01 e0       	ldi	r16, 0x01	; 1
     82e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ashldi3>
     832:	62 2e       	mov	r6, r18
     834:	73 2e       	mov	r7, r19
     836:	84 2e       	mov	r8, r20
     838:	95 2e       	mov	r9, r21
     83a:	6a 87       	std	Y+10, r22	; 0x0a
     83c:	79 87       	std	Y+9, r23	; 0x09
     83e:	b8 2f       	mov	r27, r24
     840:	a9 2f       	mov	r26, r25
     842:	02 e0       	ldi	r16, 0x02	; 2
     844:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ashldi3>
     848:	a2 2e       	mov	r10, r18
     84a:	b3 2e       	mov	r11, r19
     84c:	c4 2e       	mov	r12, r20
     84e:	d5 2e       	mov	r13, r21
     850:	e6 2e       	mov	r14, r22
     852:	f7 2e       	mov	r15, r23
     854:	08 2f       	mov	r16, r24
     856:	19 2f       	mov	r17, r25
     858:	26 2d       	mov	r18, r6
     85a:	37 2d       	mov	r19, r7
     85c:	48 2d       	mov	r20, r8
     85e:	59 2d       	mov	r21, r9
     860:	6a 85       	ldd	r22, Y+10	; 0x0a
     862:	79 85       	ldd	r23, Y+9	; 0x09
     864:	8b 2f       	mov	r24, r27
     866:	9a 2f       	mov	r25, r26
     868:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__adddi3>
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
	for(i = 1; i < exp; i++){
     86c:	31 96       	adiw	r30, 0x01	; 1
     86e:	e2 15       	cp	r30, r2
     870:	f3 05       	cpc	r31, r3
     872:	e1 f6       	brne	.-72     	; 0x82c <_Z12LCD_PRINTDECjhh+0x164>
     874:	08 c0       	rjmp	.+16     	; 0x886 <_Z12LCD_PRINTDECjhh+0x1be>
	//PORTD_INTCTRL |= PORT_INT0LVL_HI_gc;
}

int64_t mathPow(int16_t gnd, int16_t exp){
	int16_t i = 0;
	int64_t result = gnd;
     876:	2a e0       	ldi	r18, 0x0A	; 10
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 1; i < exp; i++){
		result *= gnd;
	}
	if(exp == 0){
     886:	21 14       	cp	r2, r1
     888:	31 04       	cpc	r3, r1
     88a:	49 f0       	breq	.+18     	; 0x89e <_Z12LCD_PRINTDECjhh+0x1d6>
     88c:	2d 87       	std	Y+13, r18	; 0x0d
     88e:	73 2e       	mov	r7, r19
     890:	84 2e       	mov	r8, r20
     892:	95 2e       	mov	r9, r21
     894:	6e 87       	std	Y+14, r22	; 0x0e
     896:	79 87       	std	Y+9, r23	; 0x09
     898:	8a 87       	std	Y+10, r24	; 0x0a
     89a:	69 2e       	mov	r6, r25
     89c:	09 c0       	rjmp	.+18     	; 0x8b0 <_Z12LCD_PRINTDECjhh+0x1e8>
		return 1;
     89e:	01 e0       	ldi	r16, 0x01	; 1
     8a0:	0d 87       	std	Y+13, r16	; 0x0d
     8a2:	71 2c       	mov	r7, r1
     8a4:	81 2c       	mov	r8, r1
     8a6:	91 2c       	mov	r9, r1
     8a8:	1e 86       	std	Y+14, r1	; 0x0e
     8aa:	19 86       	std	Y+9, r1	; 0x09
     8ac:	1a 86       	std	Y+10, r1	; 0x0a
     8ae:	61 2c       	mov	r6, r1
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
		int16_t t;
		for(t = 0; startNum - (mathPow(10, i) * t) >= 0; t++){} //t = 9 if i = 1 and startnum = 90, t = 3 if i = 2 and startnum is 356
     8b0:	ad 84       	ldd	r10, Y+13	; 0x0d
     8b2:	b7 2c       	mov	r11, r7
     8b4:	c8 2c       	mov	r12, r8
     8b6:	d9 2c       	mov	r13, r9
     8b8:	ee 84       	ldd	r14, Y+14	; 0x0e
     8ba:	f9 84       	ldd	r15, Y+9	; 0x09
     8bc:	0a 85       	ldd	r16, Y+10	; 0x0a
     8be:	16 2d       	mov	r17, r6
     8c0:	24 2d       	mov	r18, r4
     8c2:	35 2d       	mov	r19, r5
     8c4:	95 2d       	mov	r25, r5
     8c6:	99 0f       	add	r25, r25
     8c8:	99 0b       	sbc	r25, r25
     8ca:	49 2f       	mov	r20, r25
     8cc:	59 2f       	mov	r21, r25
     8ce:	69 2f       	mov	r22, r25
     8d0:	79 2f       	mov	r23, r25
     8d2:	89 2f       	mov	r24, r25
     8d4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__muldi3>
     8d8:	a2 2e       	mov	r10, r18
     8da:	b3 2e       	mov	r11, r19
     8dc:	c4 2e       	mov	r12, r20
     8de:	d5 2e       	mov	r13, r21
     8e0:	e6 2e       	mov	r14, r22
     8e2:	f7 2e       	mov	r15, r23
     8e4:	08 2f       	mov	r16, r24
     8e6:	19 2f       	mov	r17, r25
     8e8:	29 81       	ldd	r18, Y+1	; 0x01
     8ea:	3a 81       	ldd	r19, Y+2	; 0x02
     8ec:	4b 81       	ldd	r20, Y+3	; 0x03
     8ee:	5c 81       	ldd	r21, Y+4	; 0x04
     8f0:	6d 81       	ldd	r22, Y+5	; 0x05
     8f2:	7e 81       	ldd	r23, Y+6	; 0x06
     8f4:	8f 81       	ldd	r24, Y+7	; 0x07
     8f6:	98 85       	ldd	r25, Y+8	; 0x08
     8f8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__subdi3>
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	0e 94 84 0c 	call	0x1908	; 0x1908 <__cmpdi2_s8>
     902:	24 f0       	brlt	.+8      	; 0x90c <_Z12LCD_PRINTDECjhh+0x244>
     904:	1f ef       	ldi	r17, 0xFF	; 255
     906:	41 1a       	sub	r4, r17
     908:	51 0a       	sbc	r5, r17
     90a:	82 cf       	rjmp	.-252    	; 0x810 <_Z12LCD_PRINTDECjhh+0x148>
     90c:	2d 85       	ldd	r18, Y+13	; 0x0d
     90e:	3e 85       	ldd	r19, Y+14	; 0x0e
		if(t > 0){
     910:	14 14       	cp	r1, r4
     912:	15 04       	cpc	r1, r5
     914:	ec f5       	brge	.+122    	; 0x990 <_Z12LCD_PRINTDECjhh+0x2c8>
			startNum -= mathPow(10, i) * (t - 1); //Subtract the printed number from the start number
     916:	a2 01       	movw	r20, r4
     918:	41 50       	subi	r20, 0x01	; 1
     91a:	51 09       	sbc	r21, r1
     91c:	95 2f       	mov	r25, r21
     91e:	99 0f       	add	r25, r25
     920:	99 0b       	sbc	r25, r25
     922:	a2 2e       	mov	r10, r18
     924:	b7 2c       	mov	r11, r7
     926:	c8 2c       	mov	r12, r8
     928:	d9 2c       	mov	r13, r9
     92a:	e3 2e       	mov	r14, r19
     92c:	f9 84       	ldd	r15, Y+9	; 0x09
     92e:	0a 85       	ldd	r16, Y+10	; 0x0a
     930:	16 2d       	mov	r17, r6
     932:	24 2f       	mov	r18, r20
     934:	35 2f       	mov	r19, r21
     936:	49 2f       	mov	r20, r25
     938:	59 2f       	mov	r21, r25
     93a:	69 2f       	mov	r22, r25
     93c:	79 2f       	mov	r23, r25
     93e:	89 2f       	mov	r24, r25
     940:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__muldi3>
     944:	a2 2e       	mov	r10, r18
     946:	b3 2e       	mov	r11, r19
     948:	c4 2e       	mov	r12, r20
     94a:	d5 2e       	mov	r13, r21
     94c:	e6 2e       	mov	r14, r22
     94e:	f7 2e       	mov	r15, r23
     950:	08 2f       	mov	r16, r24
     952:	19 2f       	mov	r17, r25
     954:	29 81       	ldd	r18, Y+1	; 0x01
     956:	3a 81       	ldd	r19, Y+2	; 0x02
     958:	4b 81       	ldd	r20, Y+3	; 0x03
     95a:	5c 81       	ldd	r21, Y+4	; 0x04
     95c:	6d 81       	ldd	r22, Y+5	; 0x05
     95e:	7e 81       	ldd	r23, Y+6	; 0x06
     960:	8f 81       	ldd	r24, Y+7	; 0x07
     962:	98 85       	ldd	r25, Y+8	; 0x08
     964:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__subdi3>
     968:	29 83       	std	Y+1, r18	; 0x01
     96a:	3a 83       	std	Y+2, r19	; 0x02
     96c:	4b 83       	std	Y+3, r20	; 0x03
     96e:	5c 83       	std	Y+4, r21	; 0x04
     970:	6d 83       	std	Y+5, r22	; 0x05
     972:	7e 83       	std	Y+6, r23	; 0x06
     974:	8f 83       	std	Y+7, r24	; 0x07
     976:	98 87       	std	Y+8, r25	; 0x08
			*(toBeDispPtr + pos + decCounter - i) = 0x2F + t;
     978:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <toBeDispPtr>
     97c:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <toBeDispPtr+0x1>
     980:	8b 85       	ldd	r24, Y+11	; 0x0b
     982:	9c 85       	ldd	r25, Y+12	; 0x0c
     984:	e8 0f       	add	r30, r24
     986:	f9 1f       	adc	r31, r25
     988:	8f e2       	ldi	r24, 0x2F	; 47
     98a:	84 0d       	add	r24, r4
     98c:	80 83       	st	Z, r24
     98e:	0d c0       	rjmp	.+26     	; 0x9aa <_Z12LCD_PRINTDECjhh+0x2e2>
		}
		else{
			*(toBeDispPtr + pos + decCounter - i) = 0x30;
     990:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <toBeDispPtr>
     994:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <toBeDispPtr+0x1>
     998:	cb 84       	ldd	r12, Y+11	; 0x0b
     99a:	dc 84       	ldd	r13, Y+12	; 0x0c
     99c:	ec 0d       	add	r30, r12
     99e:	fd 1d       	adc	r31, r13
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f0 e3       	ldi	r31, 0x30	; 48
     9a4:	df 2e       	mov	r13, r31
     9a6:	f0 2d       	mov	r31, r0
     9a8:	d0 82       	st	Z, r13
	else{
		decCounter = noOfDigits - 1;//If one digit has to be printed decCounter has to be 0
	}

	int16_t i;
	for(i = decCounter; i >= 0; i--){ //Print every digit
     9aa:	01 e0       	ldi	r16, 0x01	; 1
     9ac:	20 1a       	sub	r2, r16
     9ae:	31 08       	sbc	r3, r1
     9b0:	2b 85       	ldd	r18, Y+11	; 0x0b
     9b2:	3c 85       	ldd	r19, Y+12	; 0x0c
     9b4:	2f 5f       	subi	r18, 0xFF	; 255
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	2b 87       	std	Y+11, r18	; 0x0b
     9ba:	3c 87       	std	Y+12, r19	; 0x0c
     9bc:	3f ef       	ldi	r19, 0xFF	; 255
     9be:	23 16       	cp	r2, r19
     9c0:	33 06       	cpc	r3, r19
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <_Z12LCD_PRINTDECjhh+0x2fe>
     9c4:	23 cf       	rjmp	.-442    	; 0x80c <_Z12LCD_PRINTDECjhh+0x144>
     9c6:	1f c0       	rjmp	.+62     	; 0xa06 <_Z12LCD_PRINTDECjhh+0x33e>
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
		}
		decCounter -= 2; //Subtract one for the extra decCounter++ and one for the fact that if one digit has to be printed decCounter has to be 0
     9c8:	14 01       	movw	r2, r8
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	28 1a       	sub	r2, r24
     9ce:	31 08       	sbc	r3, r1
     9d0:	16 cf       	rjmp	.-468    	; 0x7fe <_Z12LCD_PRINTDECjhh+0x136>
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
				check = true;
			}
			decCounter++;
     9d2:	9f ef       	ldi	r25, 0xFF	; 255
     9d4:	89 1a       	sub	r8, r25
     9d6:	99 0a       	sbc	r9, r25
     9d8:	aa e0       	ldi	r26, 0x0A	; 10
     9da:	b1 2c       	mov	r11, r1
     9dc:	c1 2c       	mov	r12, r1
     9de:	d1 2c       	mov	r13, r1
     9e0:	e1 2c       	mov	r14, r1
     9e2:	f1 2c       	mov	r15, r1
     9e4:	00 e0       	ldi	r16, 0x00	; 0
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	e1 ce       	rjmp	.-574    	; 0x7ac <_Z12LCD_PRINTDECjhh+0xe4>
	int16_t decCounter = 0;
	int64_t startNum = numToPrint;
	if(noOfDigits == 0xFF){/*0xFF for autodetect digits*/
		bool check = false; //If the correct numbersize has been found
		while(!check){
			if(mathPow(10, decCounter) > numToPrint){
     9ea:	29 81       	ldd	r18, Y+1	; 0x01
     9ec:	3a 81       	ldd	r19, Y+2	; 0x02
     9ee:	4b 81       	ldd	r20, Y+3	; 0x03
     9f0:	5c 81       	ldd	r21, Y+4	; 0x04
     9f2:	6d 81       	ldd	r22, Y+5	; 0x05
     9f4:	7e 81       	ldd	r23, Y+6	; 0x06
     9f6:	8f 81       	ldd	r24, Y+7	; 0x07
     9f8:	98 85       	ldd	r25, Y+8	; 0x08
     9fa:	a0 e0       	ldi	r26, 0x00	; 0
     9fc:	0e 94 84 0c 	call	0x1908	; 0x1908 <__cmpdi2_s8>
     a00:	19 f3       	breq	.-58     	; 0x9c8 <_Z12LCD_PRINTDECjhh+0x300>
     a02:	14 f3       	brlt	.-60     	; 0x9c8 <_Z12LCD_PRINTDECjhh+0x300>
     a04:	e6 cf       	rjmp	.-52     	; 0x9d2 <_Z12LCD_PRINTDECjhh+0x30a>
		}
		
		
	}
	//NWR_CHAR();
}
     a06:	2e 96       	adiw	r28, 0x0e	; 14
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	9f 90       	pop	r9
     a22:	8f 90       	pop	r8
     a24:	7f 90       	pop	r7
     a26:	6f 90       	pop	r6
     a28:	5f 90       	pop	r5
     a2a:	4f 90       	pop	r4
     a2c:	3f 90       	pop	r3
     a2e:	2f 90       	pop	r2
     a30:	08 95       	ret

00000a32 <_Z9LCD_PRINTPch>:

void LCD_PRINT(char charBuf[32], uint8_t pos){
	currCursorPos = pos;
     a32:	60 93 52 21 	sts	0x2152, r22	; 0x802152 <currCursorPos>
     a36:	fc 01       	movw	r30, r24
	int i = 0;
	bool NULL_FOUND = false;
	for(i = 0; !NULL_FOUND; i++){
		if(charBuf[i] == '\0'){
     a38:	91 91       	ld	r25, Z+
     a3a:	99 23       	and	r25, r25
     a3c:	79 f0       	breq	.+30     	; 0xa5c <_Z9LCD_PRINTPch+0x2a>
		NWR_CHAR();
	}
}

inline void setCharInToBe(char charToSend){//Doesn't include RS signal, just to update display arrays correctly
	*(toBeDispPtr + currCursorPos) = charToSend;
     a3e:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <currCursorPos>
     a42:	a0 91 50 21 	lds	r26, 0x2150	; 0x802150 <toBeDispPtr>
     a46:	b0 91 51 21 	lds	r27, 0x2151	; 0x802151 <toBeDispPtr+0x1>
     a4a:	a8 0f       	add	r26, r24
     a4c:	b1 1d       	adc	r27, r1
     a4e:	9c 93       	st	X, r25
	currCursorPos++;
     a50:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <currCursorPos>
     a54:	8f 5f       	subi	r24, 0xFF	; 255
     a56:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <currCursorPos>
     a5a:	ee cf       	rjmp	.-36     	; 0xa38 <_Z9LCD_PRINTPch+0x6>
     a5c:	08 95       	ret

00000a5e <_Z13setScrnAndPWMj>:
			setCharInToBe(charBuf[i]);
		}
	}
}

void setScrnAndPWM(uint16_t tempVal){ //Update screen with brightness value and update PWM
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
	uint16_t fullTemp = (double)tempVal * (double)tempVal * 0.11111;
     a66:	bc 01       	movw	r22, r24
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__floatunsisf>
     a70:	6b 01       	movw	r12, r22
     a72:	7c 01       	movw	r14, r24
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__mulsf3>
     a7c:	24 ea       	ldi	r18, 0xA4	; 164
     a7e:	3d e8       	ldi	r19, 0x8D	; 141
     a80:	43 ee       	ldi	r20, 0xE3	; 227
     a82:	5d e3       	ldi	r21, 0x3D	; 61
     a84:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__mulsf3>
     a88:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fixunssfsi>
	TCE0_CCABUF = fullTemp;
     a8c:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
     a90:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
	uint16_t dispVal = (double)tempVal / 7.68;
	LCD_PRINTDEC(dispVal, 28, 0x3);
     a94:	2f e8       	ldi	r18, 0x8F	; 143
     a96:	32 ec       	ldi	r19, 0xC2	; 194
     a98:	45 ef       	ldi	r20, 0xF5	; 245
     a9a:	50 e4       	ldi	r21, 0x40	; 64
     a9c:	c7 01       	movw	r24, r14
     a9e:	b6 01       	movw	r22, r12
     aa0:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divsf3>
     aa4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	43 e0       	ldi	r20, 0x03	; 3
     aae:	6c e1       	ldi	r22, 0x1C	; 28
     ab0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12LCD_PRINTDECjhh>
}
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <_Z16updateBrightnessv>:

void updateBrightness(){
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
	uint16_t tempStore = TCC0_CNT;
     ac2:	c0 91 20 08 	lds	r28, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     ac6:	d0 91 21 08 	lds	r29, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
     aca:	be 01       	movw	r22, r28
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__floatunsisf>
     ad4:	27 ed       	ldi	r18, 0xD7	; 215
     ad6:	3f ed       	ldi	r19, 0xDF	; 223
     ad8:	4f e3       	ldi	r20, 0x3F	; 63
     ada:	55 e4       	ldi	r21, 0x45	; 69
     adc:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__gesf2>
     ae0:	18 16       	cp	r1, r24
     ae2:	34 f0       	brlt	.+12     	; 0xaf0 <_Z16updateBrightnessv+0x32>
		tempStore = (int)MAX_CNT_BRIGHTNESS;
	}
	//Set a minimum brightness threshold
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
     ae4:	c8 30       	cpi	r28, 0x08	; 8
     ae6:	d1 05       	cpc	r29, r1
     ae8:	28 f4       	brcc	.+10     	; 0xaf4 <_Z16updateBrightnessv+0x36>
		tempStore = 0;
     aea:	c0 e0       	ldi	r28, 0x00	; 0
     aec:	d0 e0       	ldi	r29, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <_Z16updateBrightnessv+0x36>
void updateBrightness(){
	uint16_t tempStore = TCC0_CNT;
	//Set a maximum brightness threshold
	#define MAX_CNT_BRIGHTNESS ((BRIGHTNESS_DIV*3072) + 0.99)
	if(tempStore > MAX_CNT_BRIGHTNESS - 3){
		tempStore = (int)MAX_CNT_BRIGHTNESS;
     af0:	c0 e0       	ldi	r28, 0x00	; 0
     af2:	dc e0       	ldi	r29, 0x0C	; 12
	#define MIN_CNT_BRIGHTNESS (BRIGHTNESS_DIV*8)
	if(tempStore < MIN_CNT_BRIGHTNESS){
		tempStore = 0;
	}
	#define BRIGHTNESS_FINAL_DIV (BRIGHTNESS_DIV * 4)
	brightness = tempStore / BRIGHTNESS_FINAL_DIV;
     af4:	d6 95       	lsr	r29
     af6:	c7 95       	ror	r28
     af8:	d6 95       	lsr	r29
     afa:	c7 95       	ror	r28
     afc:	c0 93 27 21 	sts	0x2127, r28	; 0x802127 <brightness>
     b00:	d0 93 28 21 	sts	0x2128, r29	; 0x802128 <brightness+0x1>
	setScrnAndPWM(brightness);
     b04:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <brightness>
     b08:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <brightness+0x1>
     b0c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z13setScrnAndPWMj>
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <_Z7setMode10DMXMANMode>:

//Mode control functions
void setMode(DMXMANMode tempMode){
	if(tempMode == DMX){
     b16:	81 11       	cpse	r24, r1
     b18:	33 c0       	rjmp	.+102    	; 0xb80 <_Z7setMode10DMXMANMode+0x6a>
		if(editMode){
     b1a:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <editMode>
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <_Z7setMode10DMXMANMode+0x18>
			currBlinkMaskPtr = DMXBlinkVal0;
     b22:	8a ee       	ldi	r24, 0xEA	; 234
     b24:	90 e2       	ldi	r25, 0x20	; 32
     b26:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     b2a:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = DMXdisp;
     b2e:	84 e2       	ldi	r24, 0x24	; 36
     b30:	90 e2       	ldi	r25, 0x20	; 32
     b32:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <toBeDispPtr>
     b36:	90 93 51 21 	sts	0x2151, r25	; 0x802151 <toBeDispPtr+0x1>
		currentMode = DMX;
     b3a:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <currentMode>
	USARTD0_CTRLB &= ~USART_RXEN_bm;
	//PORTD_INTCTRL &= ~PORT_INT0LVL_HI_gc;
}

inline void DMX_ENABLE(){//Enable all DMX interrupts
	TCC1_INTCTRLA |= TC_OVFINTLVL_HI_gc;//Enable timer0 interrupt
     b3e:	e6 e4       	ldi	r30, 0x46	; 70
     b40:	f8 e0       	ldi	r31, 0x08	; 8
     b42:	80 81       	ld	r24, Z
     b44:	83 60       	ori	r24, 0x03	; 3
     b46:	80 83       	st	Z, r24
	USARTD0_CTRLA |= USART_RXCINTLVL_MED_gc;//Enable USART interrupt
     b48:	e3 ea       	ldi	r30, 0xA3	; 163
     b4a:	f9 e0       	ldi	r31, 0x09	; 9
     b4c:	80 81       	ld	r24, Z
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	80 83       	st	Z, r24
	USARTD0_CTRLB |= USART_RXEN_bm;
     b52:	e4 ea       	ldi	r30, 0xA4	; 164
     b54:	f9 e0       	ldi	r31, 0x09	; 9
     b56:	80 81       	ld	r24, Z
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	80 83       	st	Z, r24
			currBlinkMaskPtr = DMXBlinkVal0;
		}
		toBeDispPtr = DMXdisp;
		currentMode = DMX;
		DMX_ENABLE();
		LCD_PRINTDEC(DMXChan, 22, 3);
     b5c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     b60:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     b64:	43 e0       	ldi	r20, 0x03	; 3
     b66:	66 e1       	ldi	r22, 0x16	; 22
     b68:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12LCD_PRINTDECjhh>
		LCD_PRINTDEC(DMXChan + 1, 28, 3);
     b6c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
     b70:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
     b74:	43 e0       	ldi	r20, 0x03	; 3
     b76:	6c e1       	ldi	r22, 0x1C	; 28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12LCD_PRINTDECjhh>
     b7e:	08 95       	ret
	}
	if(tempMode == MAN){
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	41 f5       	brne	.+80     	; 0xbd4 <_Z7setMode10DMXMANMode+0xbe>
		if(editMode){
     b84:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <editMode>
     b88:	88 23       	and	r24, r24
     b8a:	31 f0       	breq	.+12     	; 0xb98 <_Z7setMode10DMXMANMode+0x82>
			currBlinkMaskPtr = MANBlinkVal0;
     b8c:	86 e6       	ldi	r24, 0x66	; 102
     b8e:	90 e2       	ldi	r25, 0x20	; 32
     b90:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     b94:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
		}
		toBeDispPtr = MANdisp;
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	90 e2       	ldi	r25, 0x20	; 32
     b9c:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <toBeDispPtr>
     ba0:	90 93 51 21 	sts	0x2151, r25	; 0x802151 <toBeDispPtr+0x1>
		currentMode = MAN;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <currentMode>
		eeprom_write_byte(MODE_addr, modeByte);
	}
}

inline void DMX_DISABLE(){//Disable all DMX interrupts
	TCC1_INTCTRLA &= ~TC_OVFINTLVL_HI_gc;//Disable timer0 interrupt
     baa:	e6 e4       	ldi	r30, 0x46	; 70
     bac:	f8 e0       	ldi	r31, 0x08	; 8
     bae:	80 81       	ld	r24, Z
     bb0:	8c 7f       	andi	r24, 0xFC	; 252
     bb2:	80 83       	st	Z, r24
	USARTD0_CTRLA &= ~USART_RXCINTLVL_MED_gc;//Disable USART interrupt
     bb4:	e3 ea       	ldi	r30, 0xA3	; 163
     bb6:	f9 e0       	ldi	r31, 0x09	; 9
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	80 83       	st	Z, r24
	USARTD0_CTRLB &= ~USART_RXEN_bm;
     bbe:	e4 ea       	ldi	r30, 0xA4	; 164
     bc0:	f9 e0       	ldi	r31, 0x09	; 9
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal0;
		}
		toBeDispPtr = MANdisp;
		currentMode = MAN;
		DMX_DISABLE();
		setScrnAndPWM(brightness);
     bc8:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <brightness>
     bcc:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <brightness+0x1>
     bd0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z13setScrnAndPWMj>
     bd4:	08 95       	ret

00000bd6 <_Z17update_RAM_EEPROMv>:
	}
}

void update_RAM_EEPROM(){ //Updates RAM with all brightness, mode and DMX information from values stored in the EEPROM
	brightness = eeprom_read_word(BRIGHTNESS_addr);
     bd6:	83 e1       	ldi	r24, 0x13	; 19
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_word>
     bde:	80 93 27 21 	sts	0x2127, r24	; 0x802127 <brightness>
     be2:	90 93 28 21 	sts	0x2128, r25	; 0x802128 <brightness+0x1>
	DMXChan = eeprom_read_word(DMX_addr);
     be6:	85 e1       	ldi	r24, 0x15	; 21
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_word>
     bee:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
     bf2:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
	if(eeprom_read_byte(MODE_addr)){
     bf6:	80 e1       	ldi	r24, 0x10	; 16
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_read_byte>
     bfe:	88 23       	and	r24, r24
     c00:	51 f0       	breq	.+20     	; 0xc16 <_Z17update_RAM_EEPROMv+0x40>
		setScrnAndPWM(brightness);
     c02:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <brightness>
     c06:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <brightness+0x1>
     c0a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z13setScrnAndPWMj>
		setMode(MAN);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z7setMode10DMXMANMode>
     c14:	08 95       	ret
	}
	else{
		setMode(DMX);
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z7setMode10DMXMANMode>
     c1c:	08 95       	ret

00000c1e <_Z16setPermanentModeb>:
	}
}

void setPermanentMode(bool temp){
     c1e:	cf 93       	push	r28
	if(blinkTimeoutIgnore != temp){
     c20:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <blinkTimeoutIgnore>
     c24:	98 17       	cp	r25, r24
     c26:	81 f0       	breq	.+32     	; 0xc48 <_Z16setPermanentModeb+0x2a>
     c28:	c8 2f       	mov	r28, r24
		if(temp){
     c2a:	88 23       	and	r24, r24
     c2c:	31 f0       	breq	.+12     	; 0xc3a <_Z16setPermanentModeb+0x1c>
			LCD_PRINT("P", 15);
     c2e:	6f e0       	ldi	r22, 0x0F	; 15
     c30:	8b e0       	ldi	r24, 0x0B	; 11
     c32:	91 e2       	ldi	r25, 0x21	; 33
     c34:	0e 94 19 05 	call	0xa32	; 0xa32 <_Z9LCD_PRINTPch>
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <_Z16setPermanentModeb+0x26>
		}
		else{
			LCD_PRINT(" ", 15);
     c3a:	6f e0       	ldi	r22, 0x0F	; 15
     c3c:	82 e1       	ldi	r24, 0x12	; 18
     c3e:	91 e2       	ldi	r25, 0x21	; 33
     c40:	0e 94 19 05 	call	0xa32	; 0xa32 <_Z9LCD_PRINTPch>
		}
		blinkTimeoutIgnore = temp;
     c44:	c0 93 1d 21 	sts	0x211D, r28	; 0x80211d <blinkTimeoutIgnore>
	}
}
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <_Z10setEncMode11encoderMode>:

void setEncMode(encoderMode tempMode){
	switch(tempMode){
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	d9 f0       	breq	.+54     	; 0xc86 <_Z10setEncMode11encoderMode+0x3a>
     c50:	30 f0       	brcs	.+12     	; 0xc5e <_Z10setEncMode11encoderMode+0x12>
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	f1 f1       	breq	.+124    	; 0xcd2 <_Z10setEncMode11encoderMode+0x86>
     c56:	83 30       	cpi	r24, 0x03	; 3
     c58:	09 f4       	brne	.+2      	; 0xc5c <_Z10setEncMode11encoderMode+0x10>
     c5a:	64 c0       	rjmp	.+200    	; 0xd24 <_Z10setEncMode11encoderMode+0xd8>
     c5c:	08 95       	ret
		case OFF:
		EncoderMode = OFF;
     c5e:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <EncoderMode>
		TCC0_CTRLA &= ~TC_CLKSEL_DIV1_gc;
     c62:	e0 e0       	ldi	r30, 0x00	; 0
     c64:	f8 e0       	ldi	r31, 0x08	; 8
     c66:	80 81       	ld	r24, Z
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     c6c:	e6 e0       	ldi	r30, 0x06	; 6
     c6e:	f8 e0       	ldi	r31, 0x08	; 8
     c70:	80 81       	ld	r24, Z
     c72:	8e 7f       	andi	r24, 0xFE	; 254
     c74:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     c76:	e7 e0       	ldi	r30, 0x07	; 7
     c78:	f8 e0       	ldi	r31, 0x08	; 8
     c7a:	80 81       	ld	r24, Z
     c7c:	8a 7f       	andi	r24, 0xFA	; 250
     c7e:	80 83       	st	Z, r24
		//Insert EEPROM write code here
		update_EEPROM_RAM();
     c80:	0e 94 ef 01 	call	0x3de	; 0x3de <_Z17update_EEPROM_RAMv>
		break;
     c84:	08 95       	ret

		case MODESEL:
		#define TCC0_CNT_MODE (int)(160 * MODE_DIV)
		#define TCC0_PER_MODE (int)(320 * MODE_DIV)
		TCC0_CNT = TCC0_CNT_MODE;
     c86:	80 ea       	ldi	r24, 0xA0	; 160
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     c8e:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     c92:	e1 e0       	ldi	r30, 0x01	; 1
     c94:	f8 e0       	ldi	r31, 0x08	; 8
     c96:	80 81       	ld	r24, Z
     c98:	88 7f       	andi	r24, 0xF8	; 248
     c9a:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_MODE;
     c9c:	80 e4       	ldi	r24, 0x40	; 64
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     ca4:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_INTCTRLA |= TC_OVFINTLVL_LO_gc;
     ca8:	e6 e0       	ldi	r30, 0x06	; 6
     caa:	f8 e0       	ldi	r31, 0x08	; 8
     cac:	80 81       	ld	r24, Z
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	80 83       	st	Z, r24
		OVF_firstSam = true;
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <OVF_firstSam>
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     cb8:	e7 e0       	ldi	r30, 0x07	; 7
     cba:	f8 e0       	ldi	r31, 0x08	; 8
     cbc:	80 81       	ld	r24, Z
     cbe:	8a 7f       	andi	r24, 0xFA	; 250
     cc0:	80 83       	st	Z, r24
		EncoderMode = MODESEL;
     cc2:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     cc6:	e0 e0       	ldi	r30, 0x00	; 0
     cc8:	f8 e0       	ldi	r31, 0x08	; 8
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
		break;
     cd0:	08 95       	ret

		case CHANSEL:
		#define TCC0_CNT_CHANNEL (int)(160 * CHANNEL_DIV)
		#define TCC0_PER_CHANNEL (int)(320 * CHANNEL_DIV)
		EncoderMode = CHANSEL;
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     cd8:	e0 e0       	ldi	r30, 0x00	; 0
     cda:	f8 e0       	ldi	r31, 0x08	; 8
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24
		TCC0_CTRLB &= ~TC_WGMODE_DS_B_gc;
     ce2:	e1 e0       	ldi	r30, 0x01	; 1
     ce4:	f8 e0       	ldi	r31, 0x08	; 8
     ce6:	80 81       	ld	r24, Z
     ce8:	88 7f       	andi	r24, 0xF8	; 248
     cea:	80 83       	st	Z, r24
		TCC0_PER = TCC0_PER_CHANNEL;
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     cf4:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = TCC0_CNT_CHANNEL;
     cf8:	80 ea       	ldi	r24, 0xA0	; 160
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d00:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     d04:	e6 e0       	ldi	r30, 0x06	; 6
     d06:	f8 e0       	ldi	r31, 0x08	; 8
     d08:	80 81       	ld	r24, Z
     d0a:	8e 7f       	andi	r24, 0xFE	; 254
     d0c:	80 83       	st	Z, r24
		TCC0_INTCTRLB |= TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc;
     d0e:	e7 e0       	ldi	r30, 0x07	; 7
     d10:	f8 e0       	ldi	r31, 0x08	; 8
     d12:	80 81       	ld	r24, Z
     d14:	85 60       	ori	r24, 0x05	; 5
     d16:	80 83       	st	Z, r24
		CCA_firstSam = true;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <CCA_firstSam>
		CCB_firstSam = true;
     d1e:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <CCB_firstSam>
		break;
     d22:	08 95       	ret

		case BRIGHTSEL:
		EncoderMode = BRIGHTSEL;
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <EncoderMode>
		TCC0_CTRLA |= TC_CLKSEL_DIV1_gc;
     d2a:	e0 e0       	ldi	r30, 0x00	; 0
     d2c:	f8 e0       	ldi	r31, 0x08	; 8
     d2e:	80 81       	ld	r24, Z
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	80 83       	st	Z, r24
		TCC0_CTRLB |= TC_WGMODE_DS_B_gc;
     d34:	e1 e0       	ldi	r30, 0x01	; 1
     d36:	f8 e0       	ldi	r31, 0x08	; 8
     d38:	80 81       	ld	r24, Z
     d3a:	87 60       	ori	r24, 0x07	; 7
     d3c:	80 83       	st	Z, r24
		TCC0_INTCTRLA &= ~TC_OVFINTLVL_LO_gc;
     d3e:	e6 e0       	ldi	r30, 0x06	; 6
     d40:	f8 e0       	ldi	r31, 0x08	; 8
     d42:	80 81       	ld	r24, Z
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	80 83       	st	Z, r24
		TCC0_INTCTRLB &= ~(TC_CCAINTLVL_LO_gc | TC_CCBINTLVL_LO_gc);
     d48:	e7 e0       	ldi	r30, 0x07	; 7
     d4a:	f8 e0       	ldi	r31, 0x08	; 8
     d4c:	80 81       	ld	r24, Z
     d4e:	8a 7f       	andi	r24, 0xFA	; 250
     d50:	80 83       	st	Z, r24
		#define TCC0_PER_BRIGHTNESS (3080 * BRIGHTNESS_DIV)
		TCC0_PER = TCC0_PER_BRIGHTNESS;
     d52:	88 e0       	ldi	r24, 0x08	; 8
     d54:	9c e0       	ldi	r25, 0x0C	; 12
     d56:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d5a:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		TCC0_CNT = (int)(brightness * BRIGHTNESS_FINAL_DIV);
     d5e:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <brightness>
     d62:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <brightness+0x1>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d72:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     d76:	08 95       	ret

00000d78 <_Z12exitEditModev>:
		break;
	}
}

void exitEditMode(){
	setEncMode(OFF);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 26 06 	call	0xc4c	; 0xc4c <_Z10setEncMode11encoderMode>
	currBlinkMaskPtr = NULLBlinkVal;
     d7e:	86 e7       	ldi	r24, 0x76	; 118
     d80:	91 e2       	ldi	r25, 0x21	; 33
     d82:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     d86:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
	editMode = false;
     d8a:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <editMode>
	TCD0_PER = 31250;//Set required button press time to 1 second
     d8e:	82 e1       	ldi	r24, 0x12	; 18
     d90:	9a e7       	ldi	r25, 0x7A	; 122
     d92:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     d96:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	setPermanentMode(false);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <_Z16setPermanentModeb>
     da0:	08 95       	ret

00000da2 <__vector_79>:
}



//All ISR
ISR(TCD0_CCA_vect){
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	8f 93       	push	r24
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
	#ifdef INVERT_BUTTON
		PORTC_PIN2CTRL |= PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
     db2:	e2 e5       	ldi	r30, 0x52	; 82
     db4:	f6 e0       	ldi	r31, 0x06	; 6
     db6:	80 81       	ld	r24, Z
     db8:	80 64       	ori	r24, 0x40	; 64
     dba:	80 83       	st	Z, r24
	#else
		PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //When the button is released and TCD0 starts counting up again set PC2 direction to normal
    #endif
	
	TCD0_INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
     dbc:	e7 e0       	ldi	r30, 0x07	; 7
     dbe:	f9 e0       	ldi	r31, 0x09	; 9
     dc0:	80 81       	ld	r24, Z
     dc2:	8e 7f       	andi	r24, 0xFE	; 254
     dc4:	80 83       	st	Z, r24
} 
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	8f 91       	pop	r24
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_80>:

ISR(TCD0_CCB_vect){
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
	TCD0_PER = 1000; //Set debounce timer for short press detection
     de8:	88 ee       	ldi	r24, 0xE8	; 232
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     df0:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	longPressDetection = false;
     df4:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
	TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
     df8:	e7 e0       	ldi	r30, 0x07	; 7
     dfa:	f9 e0       	ldi	r31, 0x09	; 9
     dfc:	80 81       	ld	r24, Z
     dfe:	8b 7f       	andi	r24, 0xFB	; 251
     e00:	80 83       	st	Z, r24
}
     e02:	ff 91       	pop	r31
     e04:	ef 91       	pop	r30
     e06:	9f 91       	pop	r25
     e08:	8f 91       	pop	r24
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <_Z21buttonRegularResponsev>:

void buttonRegularResponse(){
	if(!editMode){
     e14:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <editMode>
     e18:	81 11       	cpse	r24, r1
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <_Z21buttonRegularResponsev+0x26>
		TCD0_PER = 1000; //Set debounce timer for short press detection
     e1c:	88 ee       	ldi	r24, 0xE8	; 232
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     e24:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
		editMode = true;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <editMode>
		currentSelector = 0;
     e2e:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <currentSelector>
		editCounter = 0;
     e32:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <editCounter>
     e36:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <editCounter+0x1>
	}
	if(currentMode == DMX){
     e3a:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <currentMode>
     e3e:	81 11       	cpse	r24, r1
     e40:	3c c0       	rjmp	.+120    	; 0xeba <_Z21buttonRegularResponsev+0xa6>
		switch(currentSelector){
     e42:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <currentSelector>
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	11 f1       	breq	.+68     	; 0xe8e <_Z21buttonRegularResponsev+0x7a>
     e4a:	28 f4       	brcc	.+10     	; 0xe56 <_Z21buttonRegularResponsev+0x42>
     e4c:	88 23       	and	r24, r24
     e4e:	41 f0       	breq	.+16     	; 0xe60 <_Z21buttonRegularResponsev+0x4c>
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	81 f0       	breq	.+32     	; 0xe74 <_Z21buttonRegularResponsev+0x60>
     e54:	32 c0       	rjmp	.+100    	; 0xeba <_Z21buttonRegularResponsev+0xa6>
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	21 f1       	breq	.+72     	; 0xea2 <_Z21buttonRegularResponsev+0x8e>
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	61 f1       	breq	.+88     	; 0xeb6 <_Z21buttonRegularResponsev+0xa2>
     e5e:	2d c0       	rjmp	.+90     	; 0xeba <_Z21buttonRegularResponsev+0xa6>
			case 0:
			currBlinkMaskPtr = DMXBlinkVal0;
     e60:	8a ee       	ldi	r24, 0xEA	; 234
     e62:	90 e2       	ldi	r25, 0x20	; 32
     e64:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     e68:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	0e 94 26 06 	call	0xc4c	; 0xc4c <_Z10setEncMode11encoderMode>
			break;
     e72:	23 c0       	rjmp	.+70     	; 0xeba <_Z21buttonRegularResponsev+0xa6>
			case 1:
			currBlinkMaskPtr = DMXBlinkVal1;
     e74:	89 ec       	ldi	r24, 0xC9	; 201
     e76:	90 e2       	ldi	r25, 0x20	; 32
     e78:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     e7c:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
			dmxMult = 100;
     e80:	84 e6       	ldi	r24, 0x64	; 100
     e82:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			setEncMode(CHANSEL);
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	0e 94 26 06 	call	0xc4c	; 0xc4c <_Z10setEncMode11encoderMode>
			break;
     e8c:	16 c0       	rjmp	.+44     	; 0xeba <_Z21buttonRegularResponsev+0xa6>
			case 2:
			currBlinkMaskPtr = DMXBlinkVal2;
     e8e:	88 ea       	ldi	r24, 0xA8	; 168
     e90:	90 e2       	ldi	r25, 0x20	; 32
     e92:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     e96:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
			dmxMult = 10;
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     ea0:	4b c0       	rjmp	.+150    	; 0xf38 <_Z21buttonRegularResponsev+0x124>
			case 3:
			currBlinkMaskPtr = DMXBlinkVal3;
     ea2:	87 e8       	ldi	r24, 0x87	; 135
     ea4:	90 e2       	ldi	r25, 0x20	; 32
     ea6:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     eaa:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
			dmxMult = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
			break;
     eb4:	41 c0       	rjmp	.+130    	; 0xf38 <_Z21buttonRegularResponsev+0x124>
			case 4:
			exitEditMode();
     eb6:	0e 94 bc 06 	call	0xd78	; 0xd78 <_Z12exitEditModev>
			break;
		}
	}
	if(currentMode == MAN){
     eba:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <currentMode>
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	d9 f5       	brne	.+118    	; 0xf38 <_Z21buttonRegularResponsev+0x124>
		switch(currentSelector){
     ec2:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <currentSelector>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	71 f0       	breq	.+28     	; 0xee6 <_Z21buttonRegularResponsev+0xd2>
     eca:	18 f0       	brcs	.+6      	; 0xed2 <_Z21buttonRegularResponsev+0xbe>
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	91 f1       	breq	.+100    	; 0xf34 <_Z21buttonRegularResponsev+0x120>
     ed0:	33 c0       	rjmp	.+102    	; 0xf38 <_Z21buttonRegularResponsev+0x124>
			case 0:
			currBlinkMaskPtr = MANBlinkVal0;
     ed2:	86 e6       	ldi	r24, 0x66	; 102
     ed4:	90 e2       	ldi	r25, 0x20	; 32
     ed6:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     eda:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
			setEncMode(MODESEL);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	0e 94 26 06 	call	0xc4c	; 0xc4c <_Z10setEncMode11encoderMode>
			break;
     ee4:	29 c0       	rjmp	.+82     	; 0xf38 <_Z21buttonRegularResponsev+0x124>
			case 1:
			TCD0_CNT = 1;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
     eee:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
			TCD0_PER = 46875;
     ef2:	8b e1       	ldi	r24, 0x1B	; 27
     ef4:	97 eb       	ldi	r25, 0xB7	; 183
     ef6:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     efa:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
			TCD0_CCB = 0;
     efe:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
     f02:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
			TCD0_INTFLAGS |= (1 << 5); //Clear flag because the timer was just at 0
     f06:	ec e0       	ldi	r30, 0x0C	; 12
     f08:	f9 e0       	ldi	r31, 0x09	; 9
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	80 83       	st	Z, r24
			longPressDetection = true;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <__data_end>
			TCD0_INTCTRLB |= TC_CCBINTLVL_LO_gc; //When the button is released before the longPress mark, return to normal operation
     f16:	e7 e0       	ldi	r30, 0x07	; 7
     f18:	f9 e0       	ldi	r31, 0x09	; 9
     f1a:	80 81       	ld	r24, Z
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	80 83       	st	Z, r24
			currBlinkMaskPtr = MANBlinkVal1;
     f20:	85 e4       	ldi	r24, 0x45	; 69
     f22:	90 e2       	ldi	r25, 0x20	; 32
     f24:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <currBlinkMaskPtr>
     f28:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <currBlinkMaskPtr+0x1>
			setEncMode(BRIGHTSEL);
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	0e 94 26 06 	call	0xc4c	; 0xc4c <_Z10setEncMode11encoderMode>
			break;
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <_Z21buttonRegularResponsev+0x124>
			case 2:
			exitEditMode();
     f34:	0e 94 bc 06 	call	0xd78	; 0xd78 <_Z12exitEditModev>
			break;
		}
	}
	currentSelector++;
     f38:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <currentSelector>
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <currentSelector>
     f42:	08 95       	ret

00000f44 <__vector_77>:
}

//PC2 interrupt when button is pressed
ISR(TCD0_OVF_vect){
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	2f 93       	push	r18
     f50:	3f 93       	push	r19
     f52:	4f 93       	push	r20
     f54:	5f 93       	push	r21
     f56:	6f 93       	push	r22
     f58:	7f 93       	push	r23
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	af 93       	push	r26
     f60:	bf 93       	push	r27
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
	
	if(longPressDetection){
     f66:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
     f6a:	88 23       	and	r24, r24
     f6c:	89 f0       	breq	.+34     	; 0xf90 <__vector_77+0x4c>
		setPermanentMode(true);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	0e 94 0f 06 	call	0xc1e	; 0xc1e <_Z16setPermanentModeb>
		
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc;
     f74:	e7 e0       	ldi	r30, 0x07	; 7
     f76:	f9 e0       	ldi	r31, 0x09	; 9
     f78:	80 81       	ld	r24, Z
     f7a:	8b 7f       	andi	r24, 0xFB	; 251
     f7c:	80 83       	st	Z, r24
		longPressDetection = false;
     f7e:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		//Short press detection again
		TCD0_PER = 1000;
     f82:	88 ee       	ldi	r24, 0xE8	; 232
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
     f8a:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__vector_77+0x50>
	}
	else{
		buttonRegularResponse();
     f90:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z21buttonRegularResponsev>
	}
	if(!longPressDetection){
     f94:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <__data_end>
     f98:	81 11       	cpse	r24, r1
     f9a:	0a c0       	rjmp	.+20     	; 0xfb0 <__vector_77+0x6c>
		#ifdef INVERT_BUTTON
			PORTC_PIN2CTRL &= ~PORT_INVEN_bm; //Invert button behaviour
     f9c:	e2 e5       	ldi	r30, 0x52	; 82
     f9e:	f6 e0       	ldi	r31, 0x06	; 6
     fa0:	80 81       	ld	r24, Z
     fa2:	8f 7b       	andi	r24, 0xBF	; 191
     fa4:	80 83       	st	Z, r24
		#else
			PORTC_PIN2CTRL |= PORT_INVEN_bm;
		#endif
		TCD0_INTCTRLB |= TC_CCAINTLVL_LO_gc; //Setup compare interrupt so input will be un-inverted after release
     fa6:	e7 e0       	ldi	r30, 0x07	; 7
     fa8:	f9 e0       	ldi	r31, 0x09	; 9
     faa:	80 81       	ld	r24, Z
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	80 83       	st	Z, r24
	}
	
}
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <__vector_14>:

ISR(TCC0_OVF_vect){
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31
	TCC0_CNT = TCC0_CNT_MODE;
     ff4:	80 ea       	ldi	r24, 0xA0	; 160
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     ffc:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	if(!OVF_firstSam){
    1000:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <OVF_firstSam>
    1004:	81 11       	cpse	r24, r1
    1006:	0c c0       	rjmp	.+24     	; 0x1020 <__vector_14+0x4e>
		if(currentMode == MAN){
    1008:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <currentMode>
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	21 f4       	brne	.+8      	; 0x1018 <__vector_14+0x46>
			setMode(DMX);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z7setMode10DMXMANMode>
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <__vector_14+0x52>
		}
		else{
			setMode(MAN);
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z7setMode10DMXMANMode>
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <__vector_14+0x52>
		}
	}
	else{
		OVF_firstSam = false;
    1020:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <OVF_firstSam>
	}
}
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_16>:

ISR(TCC0_CCA_vect){
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
	if(!CCA_firstSam){
    1068:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <CCA_firstSam>
    106c:	81 11       	cpse	r24, r1
    106e:	33 c0       	rjmp	.+102    	; 0x10d6 <__vector_16+0x90>
		if(CCB_flag){
    1070:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <CCB_flag>
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <__vector_16+0x38>
			CCB_flag = false;
    1078:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <CCB_flag>
    107c:	2e c0       	rjmp	.+92     	; 0x10da <__vector_16+0x94>
		}
		else{
			CCA_flag = true;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <CCA_flag>
			if(DMXChan - dmxMult >= DMXmin){
    1084:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1088:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    108c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1090:	82 1b       	sub	r24, r18
    1092:	91 09       	sbc	r25, r1
    1094:	18 16       	cp	r1, r24
    1096:	19 06       	cpc	r1, r25
    1098:	04 f5       	brge	.+64     	; 0x10da <__vector_16+0x94>
				DMXChan -= dmxMult;
    109a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    109e:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    10a2:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    10a6:	82 1b       	sub	r24, r18
    10a8:	91 09       	sbc	r25, r1
    10aa:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    10ae:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    10b2:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    10b6:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    10ba:	43 e0       	ldi	r20, 0x03	; 3
    10bc:	66 e1       	ldi	r22, 0x16	; 22
    10be:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    10c2:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    10c6:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    10ca:	43 e0       	ldi	r20, 0x03	; 3
    10cc:	6c e1       	ldi	r22, 0x1C	; 28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12LCD_PRINTDECjhh>
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <__vector_16+0x94>
			}
		}
	}
	else{
		CCA_firstSam = false;
    10d6:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <CCA_firstSam>
	}
}
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	0f 90       	pop	r0
    10f8:	1f 90       	pop	r1
    10fa:	18 95       	reti

000010fc <__vector_17>:

ISR(TCC0_CCB_vect){
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	if(!CCB_firstSam){
    111e:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <CCB_firstSam>
    1122:	81 11       	cpse	r24, r1
    1124:	33 c0       	rjmp	.+102    	; 0x118c <__vector_17+0x90>
		if(CCA_flag){
    1126:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <CCA_flag>
    112a:	88 23       	and	r24, r24
    112c:	19 f0       	breq	.+6      	; 0x1134 <__vector_17+0x38>
			CCA_flag = false;
    112e:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <CCA_flag>
    1132:	2e c0       	rjmp	.+92     	; 0x1190 <__vector_17+0x94>
		}
		else{
			CCB_flag = true;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <CCB_flag>
			if(DMXChan + dmxMult <= DMXMax){
    113a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    113e:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1142:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1146:	82 0f       	add	r24, r18
    1148:	91 1d       	adc	r25, r1
    114a:	81 15       	cp	r24, r1
    114c:	92 40       	sbci	r25, 0x02	; 2
    114e:	04 f5       	brge	.+64     	; 0x1190 <__vector_17+0x94>
				DMXChan += dmxMult;
    1150:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1154:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1158:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    115c:	82 0f       	add	r24, r18
    115e:	91 1d       	adc	r25, r1
    1160:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <DMXChan>
    1164:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <DMXChan+0x1>
				LCD_PRINTDEC(DMXChan, 22, 3);
    1168:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    116c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1170:	43 e0       	ldi	r20, 0x03	; 3
    1172:	66 e1       	ldi	r22, 0x16	; 22
    1174:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12LCD_PRINTDECjhh>
				LCD_PRINTDEC(DMXChan + 1, 28, 3);
    1178:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    117c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1180:	43 e0       	ldi	r20, 0x03	; 3
    1182:	6c e1       	ldi	r22, 0x1C	; 28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12LCD_PRINTDECjhh>
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <__vector_17+0x94>
			}
		}
	}
	else{
		CCB_firstSam = false;
    118c:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <CCB_firstSam>
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_10>:

ISR(RTC_OVF_vect){
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	2f 93       	push	r18
    11be:	3f 93       	push	r19
    11c0:	4f 93       	push	r20
    11c2:	5f 93       	push	r21
    11c4:	6f 93       	push	r22
    11c6:	7f 93       	push	r23
    11c8:	8f 93       	push	r24
    11ca:	9f 93       	push	r25
    11cc:	af 93       	push	r26
    11ce:	bf 93       	push	r27
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
	
	if(blinkTimeoutIgnore){
    11d4:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <blinkTimeoutIgnore>
    11d8:	88 23       	and	r24, r24
    11da:	29 f0       	breq	.+10     	; 0x11e6 <__vector_10+0x34>
		editCounter = 0;
    11dc:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <editCounter>
    11e0:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <editCounter+0x1>
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <__vector_10+0x46>
	}
	else
	{
		editCounter++;
    11e6:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <editCounter>
    11ea:	90 91 2d 21 	lds	r25, 0x212D	; 0x80212d <editCounter+0x1>
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <editCounter>
    11f4:	90 93 2d 21 	sts	0x212D, r25	; 0x80212d <editCounter+0x1>
	}
	if(editCounter > 15){
    11f8:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <editCounter>
    11fc:	90 91 2d 21 	lds	r25, 0x212D	; 0x80212d <editCounter+0x1>
    1200:	40 97       	sbiw	r24, 0x10	; 16
    1202:	48 f0       	brcs	.+18     	; 0x1216 <__vector_10+0x64>
		longPressDetection = false;
    1204:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <__data_end>
		TCD0_INTCTRLB &= ~TC_CCBINTLVL_LO_gc; //Disable interrupt
    1208:	e7 e0       	ldi	r30, 0x07	; 7
    120a:	f9 e0       	ldi	r31, 0x09	; 9
    120c:	80 81       	ld	r24, Z
    120e:	8b 7f       	andi	r24, 0xFB	; 251
    1210:	80 83       	st	Z, r24
		exitEditMode();
    1212:	0e 94 bc 06 	call	0xd78	; 0xd78 <_Z12exitEditModev>
	}
}
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	bf 91       	pop	r27
    121c:	af 91       	pop	r26
    121e:	9f 91       	pop	r25
    1220:	8f 91       	pop	r24
    1222:	7f 91       	pop	r23
    1224:	6f 91       	pop	r22
    1226:	5f 91       	pop	r21
    1228:	4f 91       	pop	r20
    122a:	3f 91       	pop	r19
    122c:	2f 91       	pop	r18
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti

00001238 <__vector_88>:

ISR(USARTD0_RXC_vect){//Interrupt for new DMX char
    1238:	1f 92       	push	r1
    123a:	0f 92       	push	r0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
	uint16_t USART_data = USARTD0_DATA;
    125a:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    125e:	30 e0       	ldi	r19, 0x00	; 0
	if(cnt == DMXChan){//If DMX channel matches the set DMX channel
    1260:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <cnt>
    1264:	50 91 26 21 	lds	r21, 0x2126	; 0x802126 <cnt+0x1>
    1268:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    126c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    1270:	48 17       	cp	r20, r24
    1272:	59 07       	cpc	r21, r25
    1274:	31 f4       	brne	.+12     	; 0x1282 <__vector_88+0x4a>
		finalRes = USART_data << 8; //Buffer 8 MSB
    1276:	92 2f       	mov	r25, r18
    1278:	88 27       	eor	r24, r24
    127a:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <finalRes>
    127e:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <finalRes+0x1>
		//LCD_PRINTDEC(USART_data, 16, 5);
	}
	if(cnt == DMXChan + 1){//If DMX channel matches the set DMX channel + 1
    1282:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <DMXChan>
    1286:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <DMXChan+0x1>
    128a:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <cnt>
    128e:	50 91 26 21 	lds	r21, 0x2126	; 0x802126 <cnt+0x1>
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	84 17       	cp	r24, r20
    1296:	95 07       	cpc	r25, r21
    1298:	a9 f4       	brne	.+42     	; 0x12c4 <__vector_88+0x8c>
		//LCD_PRINTDEC(USART_data, 0, 5);
		finalRes |= USART_data; //Buffer LSB
    129a:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <finalRes>
    129e:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <finalRes+0x1>
    12a2:	82 2b       	or	r24, r18
    12a4:	93 2b       	or	r25, r19
    12a6:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <finalRes>
    12aa:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <finalRes+0x1>
		TCE0_CCABUF = finalRes; //Set compare register for PWM
    12ae:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <finalRes>
    12b2:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <finalRes+0x1>
    12b6:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__TEXT_REGION_LENGTH__+0x700a38>
    12ba:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__TEXT_REGION_LENGTH__+0x700a39>
		
		lt = true;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <lt>
	}

	if(DMXErrFlag){
    12c4:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <DMXErrFlag>
    12c8:	88 23       	and	r24, r24
    12ca:	59 f0       	breq	.+22     	; 0x12e2 <__vector_88+0xaa>
		lt = true;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <lt>
		if(cnt == 0 && USART_data == 0){
    12d2:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <cnt>
    12d6:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <cnt+0x1>
    12da:	89 2b       	or	r24, r25
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <__vector_88+0xaa>
    12de:	23 2b       	or	r18, r19
    12e0:	71 f0       	breq	.+28     	; 0x12fe <__vector_88+0xc6>
			DMXErrFlag = false;
			LCD_PRINT("      ", 10);
			lt = true;
		}
	}
	DMXErrCnt = 0;
    12e2:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <DMXErrCnt>
    12e6:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <DMXErrCnt+0x1>
	cnt++;//Increment channel counter
    12ea:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <cnt>
    12ee:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <cnt+0x1>
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <cnt>
    12f8:	90 93 26 21 	sts	0x2126, r25	; 0x802126 <cnt+0x1>
}
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <__vector_88+0xdc>
	}

	if(DMXErrFlag){
		lt = true;
		if(cnt == 0 && USART_data == 0){
			DMXErrFlag = false;
    12fe:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <DMXErrFlag>
			LCD_PRINT("      ", 10);
    1302:	6a e0       	ldi	r22, 0x0A	; 10
    1304:	8d e0       	ldi	r24, 0x0D	; 13
    1306:	91 e2       	ldi	r25, 0x21	; 33
    1308:	0e 94 19 05 	call	0xa32	; 0xa32 <_Z9LCD_PRINTPch>
			lt = true;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <lt>
    1312:	e7 cf       	rjmp	.-50     	; 0x12e2 <__vector_88+0xaa>
		}
	}
	DMXErrCnt = 0;
	cnt++;//Increment channel counter
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_20>:

ISR(TCC1_OVF_vect){
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	cf 93       	push	r28
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
	cnt = 0; //Reset counter if there hasn't been any signal change in 1196 us on the DMX line (PD2)
    135a:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <cnt>
    135e:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <cnt+0x1>
	DMXErrCnt++;
    1362:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <DMXErrCnt>
    1366:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <DMXErrCnt+0x1>
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <DMXErrCnt>
    1370:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <DMXErrCnt+0x1>
	if((DMXErrCnt > 836) && !DMXErrFlag){ //If there hasn't been any change in 1 second
    1374:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <DMXErrCnt>
    1378:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <DMXErrCnt+0x1>
    137c:	85 34       	cpi	r24, 0x45	; 69
    137e:	93 40       	sbci	r25, 0x03	; 3
    1380:	90 f0       	brcs	.+36     	; 0x13a6 <__vector_20+0x70>
    1382:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <DMXErrFlag>
    1386:	81 11       	cpse	r24, r1
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <__vector_20+0x70>
		DMXErrFlag = true;
    138a:	c1 e0       	ldi	r28, 0x01	; 1
    138c:	c0 93 29 21 	sts	0x2129, r28	; 0x802129 <DMXErrFlag>
		LCD_PRINT("NO DMX", 10);
    1390:	6a e0       	ldi	r22, 0x0A	; 10
    1392:	84 e1       	ldi	r24, 0x14	; 20
    1394:	91 e2       	ldi	r25, 0x21	; 33
    1396:	0e 94 19 05 	call	0xa32	; 0xa32 <_Z9LCD_PRINTPch>
		lt = true;
    139a:	c0 93 2e 21 	sts	0x212E, r28	; 0x80212e <lt>
		DMXErrCnt = 0;
    139e:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <DMXErrCnt>
    13a2:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <DMXErrCnt+0x1>
	}
	
}
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	cf 91       	pop	r28
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <main>:

int main(void)
{
	PORTC_DIRSET = (1 << MOSI_PIN) | (1 << SS_PIN) | (1 << SCK_PIN) | (1 << RS_PIN); //Set all pins used for communication to output
    13ca:	88 eb       	ldi	r24, 0xB8	; 184
    13cc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	clk_set_32MHz();
    13d0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z13clk_set_32MHzv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13d4:	2f ef       	ldi	r18, 0xFF	; 255
    13d6:	85 ed       	ldi	r24, 0xD5	; 213
    13d8:	96 e0       	ldi	r25, 0x06	; 6
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	80 40       	sbci	r24, 0x00	; 0
    13de:	90 40       	sbci	r25, 0x00	; 0
    13e0:	e1 f7       	brne	.-8      	; 0x13da <main+0x10>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <main+0x1a>
    13e4:	00 00       	nop
	_delay_ms(70);
	setup_PWM();
    13e6:	0e 94 94 01 	call	0x328	; 0x328 <_Z9setup_PWMv>
	update_RAM_EEPROM();
    13ea:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_Z17update_RAM_EEPROMv>
    setup_SPI();
    13ee:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z9setup_SPIv>
    13f2:	2f ef       	ldi	r18, 0xFF	; 255
    13f4:	83 ec       	ldi	r24, 0xC3	; 195
    13f6:	99 e0       	ldi	r25, 0x09	; 9
    13f8:	21 50       	subi	r18, 0x01	; 1
    13fa:	80 40       	sbci	r24, 0x00	; 0
    13fc:	90 40       	sbci	r25, 0x00	; 0
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <main+0x2e>
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <main+0x38>
    1402:	00 00       	nop
    _delay_ms(100);
    setup_disp();
    1404:	0e 94 15 01 	call	0x22a	; 0x22a <_Z10setup_dispv>
	setup_btn();
    1408:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z9setup_btnv>
	QDEC_INIT();
    140c:	0e 94 a8 01 	call	0x350	; 0x350 <_Z9QDEC_INITv>
	setup_blink();
    1410:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z11setup_blinkv>
	DMX_init();
    1414:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z8DMX_initv>
	updateDisp();
    1418:	0e 94 2b 02 	call	0x456	; 0x456 <_Z10updateDispv>
	setup_int();
    141c:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z9setup_intv>
		if(editMode){ //If the display is in edit mode update the display
			if(EncoderMode == BRIGHTSEL){
				updateBrightness();
			}
			updateDisp();
			lt = true;
    1420:	c1 e0       	ldi	r28, 0x01	; 1
	updateDisp();
	setup_int();

    while (1) 
    {
		if(editMode){ //If the display is in edit mode update the display
    1422:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <editMode>
    1426:	88 23       	and	r24, r24
    1428:	59 f0       	breq	.+22     	; 0x1440 <main+0x76>
			if(EncoderMode == BRIGHTSEL){
    142a:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <EncoderMode>
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	11 f4       	brne	.+4      	; 0x1436 <main+0x6c>
				updateBrightness();
    1432:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z16updateBrightnessv>
			}
			updateDisp();
    1436:	0e 94 2b 02 	call	0x456	; 0x456 <_Z10updateDispv>
			lt = true;
    143a:	c0 93 2e 21 	sts	0x212E, r28	; 0x80212e <lt>
    143e:	08 c0       	rjmp	.+16     	; 0x1450 <main+0x86>
		}
		else{ 
			if (lt) //If lt is altered by another factor update the display as well
    1440:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <lt>
    1444:	88 23       	and	r24, r24
    1446:	21 f0       	breq	.+8      	; 0x1450 <main+0x86>
			{
				updateDisp();
    1448:	0e 94 2b 02 	call	0x456	; 0x456 <_Z10updateDispv>
				lt = false;
    144c:	10 92 2e 21 	sts	0x212E, r1	; 0x80212e <lt>
    1450:	2f ef       	ldi	r18, 0xFF	; 255
    1452:	83 ef       	ldi	r24, 0xF3	; 243
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	21 50       	subi	r18, 0x01	; 1
    1458:	80 40       	sbci	r24, 0x00	; 0
    145a:	90 40       	sbci	r25, 0x00	; 0
    145c:	e1 f7       	brne	.-8      	; 0x1456 <main+0x8c>
    145e:	00 c0       	rjmp	.+0      	; 0x1460 <main+0x96>
    1460:	00 00       	nop
    1462:	df cf       	rjmp	.-66     	; 0x1422 <main+0x58>

00001464 <__divsf3>:
    1464:	0e 94 46 0a 	call	0x148c	; 0x148c <__divsf3x>
    1468:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__fp_round>
    146c:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_pscB>
    1470:	58 f0       	brcs	.+22     	; 0x1488 <__divsf3+0x24>
    1472:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_pscA>
    1476:	40 f0       	brcs	.+16     	; 0x1488 <__divsf3+0x24>
    1478:	29 f4       	brne	.+10     	; 0x1484 <__divsf3+0x20>
    147a:	5f 3f       	cpi	r21, 0xFF	; 255
    147c:	29 f0       	breq	.+10     	; 0x1488 <__divsf3+0x24>
    147e:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_inf>
    1482:	51 11       	cpse	r21, r1
    1484:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__fp_szero>
    1488:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_nan>

0000148c <__divsf3x>:
    148c:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fp_split3>
    1490:	68 f3       	brcs	.-38     	; 0x146c <__divsf3+0x8>

00001492 <__divsf3_pse>:
    1492:	99 23       	and	r25, r25
    1494:	b1 f3       	breq	.-20     	; 0x1482 <__divsf3+0x1e>
    1496:	55 23       	and	r21, r21
    1498:	91 f3       	breq	.-28     	; 0x147e <__divsf3+0x1a>
    149a:	95 1b       	sub	r25, r21
    149c:	55 0b       	sbc	r21, r21
    149e:	bb 27       	eor	r27, r27
    14a0:	aa 27       	eor	r26, r26
    14a2:	62 17       	cp	r22, r18
    14a4:	73 07       	cpc	r23, r19
    14a6:	84 07       	cpc	r24, r20
    14a8:	38 f0       	brcs	.+14     	; 0x14b8 <__divsf3_pse+0x26>
    14aa:	9f 5f       	subi	r25, 0xFF	; 255
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	44 1f       	adc	r20, r20
    14b4:	aa 1f       	adc	r26, r26
    14b6:	a9 f3       	breq	.-22     	; 0x14a2 <__divsf3_pse+0x10>
    14b8:	35 d0       	rcall	.+106    	; 0x1524 <__divsf3_pse+0x92>
    14ba:	0e 2e       	mov	r0, r30
    14bc:	3a f0       	brmi	.+14     	; 0x14cc <__divsf3_pse+0x3a>
    14be:	e0 e8       	ldi	r30, 0x80	; 128
    14c0:	32 d0       	rcall	.+100    	; 0x1526 <__divsf3_pse+0x94>
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	50 40       	sbci	r21, 0x00	; 0
    14c6:	e6 95       	lsr	r30
    14c8:	00 1c       	adc	r0, r0
    14ca:	ca f7       	brpl	.-14     	; 0x14be <__divsf3_pse+0x2c>
    14cc:	2b d0       	rcall	.+86     	; 0x1524 <__divsf3_pse+0x92>
    14ce:	fe 2f       	mov	r31, r30
    14d0:	29 d0       	rcall	.+82     	; 0x1524 <__divsf3_pse+0x92>
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	bb 1f       	adc	r27, r27
    14da:	26 17       	cp	r18, r22
    14dc:	37 07       	cpc	r19, r23
    14de:	48 07       	cpc	r20, r24
    14e0:	ab 07       	cpc	r26, r27
    14e2:	b0 e8       	ldi	r27, 0x80	; 128
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <__divsf3_pse+0x56>
    14e6:	bb 0b       	sbc	r27, r27
    14e8:	80 2d       	mov	r24, r0
    14ea:	bf 01       	movw	r22, r30
    14ec:	ff 27       	eor	r31, r31
    14ee:	93 58       	subi	r25, 0x83	; 131
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	3a f0       	brmi	.+14     	; 0x1502 <__divsf3_pse+0x70>
    14f4:	9e 3f       	cpi	r25, 0xFE	; 254
    14f6:	51 05       	cpc	r21, r1
    14f8:	78 f0       	brcs	.+30     	; 0x1518 <__divsf3_pse+0x86>
    14fa:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_inf>
    14fe:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__fp_szero>
    1502:	5f 3f       	cpi	r21, 0xFF	; 255
    1504:	e4 f3       	brlt	.-8      	; 0x14fe <__divsf3_pse+0x6c>
    1506:	98 3e       	cpi	r25, 0xE8	; 232
    1508:	d4 f3       	brlt	.-12     	; 0x14fe <__divsf3_pse+0x6c>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b7 95       	ror	r27
    1512:	f7 95       	ror	r31
    1514:	9f 5f       	subi	r25, 0xFF	; 255
    1516:	c9 f7       	brne	.-14     	; 0x150a <__divsf3_pse+0x78>
    1518:	88 0f       	add	r24, r24
    151a:	91 1d       	adc	r25, r1
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret
    1524:	e1 e0       	ldi	r30, 0x01	; 1
    1526:	66 0f       	add	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	88 1f       	adc	r24, r24
    152c:	bb 1f       	adc	r27, r27
    152e:	62 17       	cp	r22, r18
    1530:	73 07       	cpc	r23, r19
    1532:	84 07       	cpc	r24, r20
    1534:	ba 07       	cpc	r27, r26
    1536:	20 f0       	brcs	.+8      	; 0x1540 <__divsf3_pse+0xae>
    1538:	62 1b       	sub	r22, r18
    153a:	73 0b       	sbc	r23, r19
    153c:	84 0b       	sbc	r24, r20
    153e:	ba 0b       	sbc	r27, r26
    1540:	ee 1f       	adc	r30, r30
    1542:	88 f7       	brcc	.-30     	; 0x1526 <__divsf3_pse+0x94>
    1544:	e0 95       	com	r30
    1546:	08 95       	ret

00001548 <__fixunssfsi>:
    1548:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_splitA>
    154c:	88 f0       	brcs	.+34     	; 0x1570 <__fixunssfsi+0x28>
    154e:	9f 57       	subi	r25, 0x7F	; 127
    1550:	98 f0       	brcs	.+38     	; 0x1578 <__fixunssfsi+0x30>
    1552:	b9 2f       	mov	r27, r25
    1554:	99 27       	eor	r25, r25
    1556:	b7 51       	subi	r27, 0x17	; 23
    1558:	b0 f0       	brcs	.+44     	; 0x1586 <__fixunssfsi+0x3e>
    155a:	e1 f0       	breq	.+56     	; 0x1594 <__fixunssfsi+0x4c>
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	1a f0       	brmi	.+6      	; 0x156c <__fixunssfsi+0x24>
    1566:	ba 95       	dec	r27
    1568:	c9 f7       	brne	.-14     	; 0x155c <__fixunssfsi+0x14>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <__fixunssfsi+0x4c>
    156c:	b1 30       	cpi	r27, 0x01	; 1
    156e:	91 f0       	breq	.+36     	; 0x1594 <__fixunssfsi+0x4c>
    1570:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__fp_zero>
    1574:	b1 e0       	ldi	r27, 0x01	; 1
    1576:	08 95       	ret
    1578:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__fp_zero>
    157c:	67 2f       	mov	r22, r23
    157e:	78 2f       	mov	r23, r24
    1580:	88 27       	eor	r24, r24
    1582:	b8 5f       	subi	r27, 0xF8	; 248
    1584:	39 f0       	breq	.+14     	; 0x1594 <__fixunssfsi+0x4c>
    1586:	b9 3f       	cpi	r27, 0xF9	; 249
    1588:	cc f3       	brlt	.-14     	; 0x157c <__fixunssfsi+0x34>
    158a:	86 95       	lsr	r24
    158c:	77 95       	ror	r23
    158e:	67 95       	ror	r22
    1590:	b3 95       	inc	r27
    1592:	d9 f7       	brne	.-10     	; 0x158a <__fixunssfsi+0x42>
    1594:	3e f4       	brtc	.+14     	; 0x15a4 <__fixunssfsi+0x5c>
    1596:	90 95       	com	r25
    1598:	80 95       	com	r24
    159a:	70 95       	com	r23
    159c:	61 95       	neg	r22
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8f 4f       	sbci	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	08 95       	ret

000015a6 <__floatunsisf>:
    15a6:	e8 94       	clt
    15a8:	09 c0       	rjmp	.+18     	; 0x15bc <__floatsisf+0x12>

000015aa <__floatsisf>:
    15aa:	97 fb       	bst	r25, 7
    15ac:	3e f4       	brtc	.+14     	; 0x15bc <__floatsisf+0x12>
    15ae:	90 95       	com	r25
    15b0:	80 95       	com	r24
    15b2:	70 95       	com	r23
    15b4:	61 95       	neg	r22
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	99 23       	and	r25, r25
    15be:	a9 f0       	breq	.+42     	; 0x15ea <__floatsisf+0x40>
    15c0:	f9 2f       	mov	r31, r25
    15c2:	96 e9       	ldi	r25, 0x96	; 150
    15c4:	bb 27       	eor	r27, r27
    15c6:	93 95       	inc	r25
    15c8:	f6 95       	lsr	r31
    15ca:	87 95       	ror	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	b7 95       	ror	r27
    15d2:	f1 11       	cpse	r31, r1
    15d4:	f8 cf       	rjmp	.-16     	; 0x15c6 <__floatsisf+0x1c>
    15d6:	fa f4       	brpl	.+62     	; 0x1616 <__floatsisf+0x6c>
    15d8:	bb 0f       	add	r27, r27
    15da:	11 f4       	brne	.+4      	; 0x15e0 <__floatsisf+0x36>
    15dc:	60 ff       	sbrs	r22, 0
    15de:	1b c0       	rjmp	.+54     	; 0x1616 <__floatsisf+0x6c>
    15e0:	6f 5f       	subi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	8f 4f       	sbci	r24, 0xFF	; 255
    15e6:	9f 4f       	sbci	r25, 0xFF	; 255
    15e8:	16 c0       	rjmp	.+44     	; 0x1616 <__floatsisf+0x6c>
    15ea:	88 23       	and	r24, r24
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <__floatsisf+0x48>
    15ee:	96 e9       	ldi	r25, 0x96	; 150
    15f0:	11 c0       	rjmp	.+34     	; 0x1614 <__floatsisf+0x6a>
    15f2:	77 23       	and	r23, r23
    15f4:	21 f0       	breq	.+8      	; 0x15fe <__floatsisf+0x54>
    15f6:	9e e8       	ldi	r25, 0x8E	; 142
    15f8:	87 2f       	mov	r24, r23
    15fa:	76 2f       	mov	r23, r22
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <__floatsisf+0x5e>
    15fe:	66 23       	and	r22, r22
    1600:	71 f0       	breq	.+28     	; 0x161e <__floatsisf+0x74>
    1602:	96 e8       	ldi	r25, 0x86	; 134
    1604:	86 2f       	mov	r24, r22
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	2a f0       	brmi	.+10     	; 0x1616 <__floatsisf+0x6c>
    160c:	9a 95       	dec	r25
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	da f7       	brpl	.-10     	; 0x160c <__floatsisf+0x62>
    1616:	88 0f       	add	r24, r24
    1618:	96 95       	lsr	r25
    161a:	87 95       	ror	r24
    161c:	97 f9       	bld	r25, 7
    161e:	08 95       	ret

00001620 <__fp_inf>:
    1620:	97 f9       	bld	r25, 7
    1622:	9f 67       	ori	r25, 0x7F	; 127
    1624:	80 e8       	ldi	r24, 0x80	; 128
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	08 95       	ret

0000162c <__fp_nan>:
    162c:	9f ef       	ldi	r25, 0xFF	; 255
    162e:	80 ec       	ldi	r24, 0xC0	; 192
    1630:	08 95       	ret

00001632 <__fp_pscA>:
    1632:	00 24       	eor	r0, r0
    1634:	0a 94       	dec	r0
    1636:	16 16       	cp	r1, r22
    1638:	17 06       	cpc	r1, r23
    163a:	18 06       	cpc	r1, r24
    163c:	09 06       	cpc	r0, r25
    163e:	08 95       	ret

00001640 <__fp_pscB>:
    1640:	00 24       	eor	r0, r0
    1642:	0a 94       	dec	r0
    1644:	12 16       	cp	r1, r18
    1646:	13 06       	cpc	r1, r19
    1648:	14 06       	cpc	r1, r20
    164a:	05 06       	cpc	r0, r21
    164c:	08 95       	ret

0000164e <__fp_round>:
    164e:	09 2e       	mov	r0, r25
    1650:	03 94       	inc	r0
    1652:	00 0c       	add	r0, r0
    1654:	11 f4       	brne	.+4      	; 0x165a <__fp_round+0xc>
    1656:	88 23       	and	r24, r24
    1658:	52 f0       	brmi	.+20     	; 0x166e <__fp_round+0x20>
    165a:	bb 0f       	add	r27, r27
    165c:	40 f4       	brcc	.+16     	; 0x166e <__fp_round+0x20>
    165e:	bf 2b       	or	r27, r31
    1660:	11 f4       	brne	.+4      	; 0x1666 <__fp_round+0x18>
    1662:	60 ff       	sbrs	r22, 0
    1664:	04 c0       	rjmp	.+8      	; 0x166e <__fp_round+0x20>
    1666:	6f 5f       	subi	r22, 0xFF	; 255
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	8f 4f       	sbci	r24, 0xFF	; 255
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	08 95       	ret

00001670 <__fp_split3>:
    1670:	57 fd       	sbrc	r21, 7
    1672:	90 58       	subi	r25, 0x80	; 128
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	59 f0       	breq	.+22     	; 0x1690 <__fp_splitA+0x10>
    167a:	5f 3f       	cpi	r21, 0xFF	; 255
    167c:	71 f0       	breq	.+28     	; 0x169a <__fp_splitA+0x1a>
    167e:	47 95       	ror	r20

00001680 <__fp_splitA>:
    1680:	88 0f       	add	r24, r24
    1682:	97 fb       	bst	r25, 7
    1684:	99 1f       	adc	r25, r25
    1686:	61 f0       	breq	.+24     	; 0x16a0 <__fp_splitA+0x20>
    1688:	9f 3f       	cpi	r25, 0xFF	; 255
    168a:	79 f0       	breq	.+30     	; 0x16aa <__fp_splitA+0x2a>
    168c:	87 95       	ror	r24
    168e:	08 95       	ret
    1690:	12 16       	cp	r1, r18
    1692:	13 06       	cpc	r1, r19
    1694:	14 06       	cpc	r1, r20
    1696:	55 1f       	adc	r21, r21
    1698:	f2 cf       	rjmp	.-28     	; 0x167e <__fp_split3+0xe>
    169a:	46 95       	lsr	r20
    169c:	f1 df       	rcall	.-30     	; 0x1680 <__fp_splitA>
    169e:	08 c0       	rjmp	.+16     	; 0x16b0 <__fp_splitA+0x30>
    16a0:	16 16       	cp	r1, r22
    16a2:	17 06       	cpc	r1, r23
    16a4:	18 06       	cpc	r1, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	f1 cf       	rjmp	.-30     	; 0x168c <__fp_splitA+0xc>
    16aa:	86 95       	lsr	r24
    16ac:	71 05       	cpc	r23, r1
    16ae:	61 05       	cpc	r22, r1
    16b0:	08 94       	sec
    16b2:	08 95       	ret

000016b4 <__fp_zero>:
    16b4:	e8 94       	clt

000016b6 <__fp_szero>:
    16b6:	bb 27       	eor	r27, r27
    16b8:	66 27       	eor	r22, r22
    16ba:	77 27       	eor	r23, r23
    16bc:	cb 01       	movw	r24, r22
    16be:	97 f9       	bld	r25, 7
    16c0:	08 95       	ret

000016c2 <__gesf2>:
    16c2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_cmp>
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <__gesf2+0x8>
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	08 95       	ret

000016cc <__mulsf3>:
    16cc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__mulsf3x>
    16d0:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__fp_round>
    16d4:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_pscA>
    16d8:	38 f0       	brcs	.+14     	; 0x16e8 <__mulsf3+0x1c>
    16da:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_pscB>
    16de:	20 f0       	brcs	.+8      	; 0x16e8 <__mulsf3+0x1c>
    16e0:	95 23       	and	r25, r21
    16e2:	11 f0       	breq	.+4      	; 0x16e8 <__mulsf3+0x1c>
    16e4:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_inf>
    16e8:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_nan>
    16ec:	11 24       	eor	r1, r1
    16ee:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__fp_szero>

000016f2 <__mulsf3x>:
    16f2:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fp_split3>
    16f6:	70 f3       	brcs	.-36     	; 0x16d4 <__mulsf3+0x8>

000016f8 <__mulsf3_pse>:
    16f8:	95 9f       	mul	r25, r21
    16fa:	c1 f3       	breq	.-16     	; 0x16ec <__mulsf3+0x20>
    16fc:	95 0f       	add	r25, r21
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	55 1f       	adc	r21, r21
    1702:	62 9f       	mul	r22, r18
    1704:	f0 01       	movw	r30, r0
    1706:	72 9f       	mul	r23, r18
    1708:	bb 27       	eor	r27, r27
    170a:	f0 0d       	add	r31, r0
    170c:	b1 1d       	adc	r27, r1
    170e:	63 9f       	mul	r22, r19
    1710:	aa 27       	eor	r26, r26
    1712:	f0 0d       	add	r31, r0
    1714:	b1 1d       	adc	r27, r1
    1716:	aa 1f       	adc	r26, r26
    1718:	64 9f       	mul	r22, r20
    171a:	66 27       	eor	r22, r22
    171c:	b0 0d       	add	r27, r0
    171e:	a1 1d       	adc	r26, r1
    1720:	66 1f       	adc	r22, r22
    1722:	82 9f       	mul	r24, r18
    1724:	22 27       	eor	r18, r18
    1726:	b0 0d       	add	r27, r0
    1728:	a1 1d       	adc	r26, r1
    172a:	62 1f       	adc	r22, r18
    172c:	73 9f       	mul	r23, r19
    172e:	b0 0d       	add	r27, r0
    1730:	a1 1d       	adc	r26, r1
    1732:	62 1f       	adc	r22, r18
    1734:	83 9f       	mul	r24, r19
    1736:	a0 0d       	add	r26, r0
    1738:	61 1d       	adc	r22, r1
    173a:	22 1f       	adc	r18, r18
    173c:	74 9f       	mul	r23, r20
    173e:	33 27       	eor	r19, r19
    1740:	a0 0d       	add	r26, r0
    1742:	61 1d       	adc	r22, r1
    1744:	23 1f       	adc	r18, r19
    1746:	84 9f       	mul	r24, r20
    1748:	60 0d       	add	r22, r0
    174a:	21 1d       	adc	r18, r1
    174c:	82 2f       	mov	r24, r18
    174e:	76 2f       	mov	r23, r22
    1750:	6a 2f       	mov	r22, r26
    1752:	11 24       	eor	r1, r1
    1754:	9f 57       	subi	r25, 0x7F	; 127
    1756:	50 40       	sbci	r21, 0x00	; 0
    1758:	9a f0       	brmi	.+38     	; 0x1780 <__mulsf3_pse+0x88>
    175a:	f1 f0       	breq	.+60     	; 0x1798 <__mulsf3_pse+0xa0>
    175c:	88 23       	and	r24, r24
    175e:	4a f0       	brmi	.+18     	; 0x1772 <__mulsf3_pse+0x7a>
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	bb 1f       	adc	r27, r27
    1766:	66 1f       	adc	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	88 1f       	adc	r24, r24
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	a9 f7       	brne	.-22     	; 0x175c <__mulsf3_pse+0x64>
    1772:	9e 3f       	cpi	r25, 0xFE	; 254
    1774:	51 05       	cpc	r21, r1
    1776:	80 f0       	brcs	.+32     	; 0x1798 <__mulsf3_pse+0xa0>
    1778:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_inf>
    177c:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__fp_szero>
    1780:	5f 3f       	cpi	r21, 0xFF	; 255
    1782:	e4 f3       	brlt	.-8      	; 0x177c <__mulsf3_pse+0x84>
    1784:	98 3e       	cpi	r25, 0xE8	; 232
    1786:	d4 f3       	brlt	.-12     	; 0x177c <__mulsf3_pse+0x84>
    1788:	86 95       	lsr	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b7 95       	ror	r27
    1790:	f7 95       	ror	r31
    1792:	e7 95       	ror	r30
    1794:	9f 5f       	subi	r25, 0xFF	; 255
    1796:	c1 f7       	brne	.-16     	; 0x1788 <__mulsf3_pse+0x90>
    1798:	fe 2b       	or	r31, r30
    179a:	88 0f       	add	r24, r24
    179c:	91 1d       	adc	r25, r1
    179e:	96 95       	lsr	r25
    17a0:	87 95       	ror	r24
    17a2:	97 f9       	bld	r25, 7
    17a4:	08 95       	ret

000017a6 <__fp_cmp>:
    17a6:	99 0f       	add	r25, r25
    17a8:	00 08       	sbc	r0, r0
    17aa:	55 0f       	add	r21, r21
    17ac:	aa 0b       	sbc	r26, r26
    17ae:	e0 e8       	ldi	r30, 0x80	; 128
    17b0:	fe ef       	ldi	r31, 0xFE	; 254
    17b2:	16 16       	cp	r1, r22
    17b4:	17 06       	cpc	r1, r23
    17b6:	e8 07       	cpc	r30, r24
    17b8:	f9 07       	cpc	r31, r25
    17ba:	c0 f0       	brcs	.+48     	; 0x17ec <__fp_cmp+0x46>
    17bc:	12 16       	cp	r1, r18
    17be:	13 06       	cpc	r1, r19
    17c0:	e4 07       	cpc	r30, r20
    17c2:	f5 07       	cpc	r31, r21
    17c4:	98 f0       	brcs	.+38     	; 0x17ec <__fp_cmp+0x46>
    17c6:	62 1b       	sub	r22, r18
    17c8:	73 0b       	sbc	r23, r19
    17ca:	84 0b       	sbc	r24, r20
    17cc:	95 0b       	sbc	r25, r21
    17ce:	39 f4       	brne	.+14     	; 0x17de <__fp_cmp+0x38>
    17d0:	0a 26       	eor	r0, r26
    17d2:	61 f0       	breq	.+24     	; 0x17ec <__fp_cmp+0x46>
    17d4:	23 2b       	or	r18, r19
    17d6:	24 2b       	or	r18, r20
    17d8:	25 2b       	or	r18, r21
    17da:	21 f4       	brne	.+8      	; 0x17e4 <__fp_cmp+0x3e>
    17dc:	08 95       	ret
    17de:	0a 26       	eor	r0, r26
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <__fp_cmp+0x3e>
    17e2:	a1 40       	sbci	r26, 0x01	; 1
    17e4:	a6 95       	lsr	r26
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	81 1d       	adc	r24, r1
    17ea:	81 1d       	adc	r24, r1
    17ec:	08 95       	ret

000017ee <__muldi3>:
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	1f 93       	push	r17
    17f4:	0f 93       	push	r16
    17f6:	9a 9d       	mul	r25, r10
    17f8:	f0 2d       	mov	r31, r0
    17fa:	21 9f       	mul	r18, r17
    17fc:	f0 0d       	add	r31, r0
    17fe:	8b 9d       	mul	r24, r11
    1800:	f0 0d       	add	r31, r0
    1802:	8a 9d       	mul	r24, r10
    1804:	e0 2d       	mov	r30, r0
    1806:	f1 0d       	add	r31, r1
    1808:	03 9f       	mul	r16, r19
    180a:	f0 0d       	add	r31, r0
    180c:	02 9f       	mul	r16, r18
    180e:	e0 0d       	add	r30, r0
    1810:	f1 1d       	adc	r31, r1
    1812:	4e 9d       	mul	r20, r14
    1814:	e0 0d       	add	r30, r0
    1816:	f1 1d       	adc	r31, r1
    1818:	5e 9d       	mul	r21, r14
    181a:	f0 0d       	add	r31, r0
    181c:	4f 9d       	mul	r20, r15
    181e:	f0 0d       	add	r31, r0
    1820:	7f 93       	push	r23
    1822:	6f 93       	push	r22
    1824:	bf 92       	push	r11
    1826:	af 92       	push	r10
    1828:	5f 93       	push	r21
    182a:	4f 93       	push	r20
    182c:	d5 01       	movw	r26, r10
    182e:	0e 94 90 0c 	call	0x1920	; 0x1920 <__umulhisi3>
    1832:	8b 01       	movw	r16, r22
    1834:	ac 01       	movw	r20, r24
    1836:	d7 01       	movw	r26, r14
    1838:	0e 94 90 0c 	call	0x1920	; 0x1920 <__umulhisi3>
    183c:	eb 01       	movw	r28, r22
    183e:	e8 0f       	add	r30, r24
    1840:	f9 1f       	adc	r31, r25
    1842:	d6 01       	movw	r26, r12
    1844:	0e 94 47 0c 	call	0x188e	; 0x188e <__muldi3_6>
    1848:	2f 91       	pop	r18
    184a:	3f 91       	pop	r19
    184c:	d6 01       	movw	r26, r12
    184e:	0e 94 90 0c 	call	0x1920	; 0x1920 <__umulhisi3>
    1852:	c6 0f       	add	r28, r22
    1854:	d7 1f       	adc	r29, r23
    1856:	e8 1f       	adc	r30, r24
    1858:	f9 1f       	adc	r31, r25
    185a:	af 91       	pop	r26
    185c:	bf 91       	pop	r27
    185e:	0e 94 47 0c 	call	0x188e	; 0x188e <__muldi3_6>
    1862:	2f 91       	pop	r18
    1864:	3f 91       	pop	r19
    1866:	0e 94 90 0c 	call	0x1920	; 0x1920 <__umulhisi3>
    186a:	c6 0f       	add	r28, r22
    186c:	d7 1f       	adc	r29, r23
    186e:	e8 1f       	adc	r30, r24
    1870:	f9 1f       	adc	r31, r25
    1872:	d6 01       	movw	r26, r12
    1874:	0e 94 90 0c 	call	0x1920	; 0x1920 <__umulhisi3>
    1878:	e6 0f       	add	r30, r22
    187a:	f7 1f       	adc	r31, r23
    187c:	98 01       	movw	r18, r16
    187e:	be 01       	movw	r22, r28
    1880:	cf 01       	movw	r24, r30
    1882:	11 24       	eor	r1, r1
    1884:	0f 91       	pop	r16
    1886:	1f 91       	pop	r17
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <__muldi3_6>:
    188e:	0e 94 90 0c 	call	0x1920	; 0x1920 <__umulhisi3>
    1892:	46 0f       	add	r20, r22
    1894:	57 1f       	adc	r21, r23
    1896:	c8 1f       	adc	r28, r24
    1898:	d9 1f       	adc	r29, r25
    189a:	08 f4       	brcc	.+2      	; 0x189e <__muldi3_6+0x10>
    189c:	31 96       	adiw	r30, 0x01	; 1
    189e:	08 95       	ret

000018a0 <__ashldi3>:
    18a0:	0f 93       	push	r16
    18a2:	08 30       	cpi	r16, 0x08	; 8
    18a4:	90 f0       	brcs	.+36     	; 0x18ca <__ashldi3+0x2a>
    18a6:	98 2f       	mov	r25, r24
    18a8:	87 2f       	mov	r24, r23
    18aa:	76 2f       	mov	r23, r22
    18ac:	65 2f       	mov	r22, r21
    18ae:	54 2f       	mov	r21, r20
    18b0:	43 2f       	mov	r20, r19
    18b2:	32 2f       	mov	r19, r18
    18b4:	22 27       	eor	r18, r18
    18b6:	08 50       	subi	r16, 0x08	; 8
    18b8:	f4 cf       	rjmp	.-24     	; 0x18a2 <__ashldi3+0x2>
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	44 1f       	adc	r20, r20
    18c0:	55 1f       	adc	r21, r21
    18c2:	66 1f       	adc	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 95       	dec	r16
    18cc:	b2 f7       	brpl	.-20     	; 0x18ba <__ashldi3+0x1a>
    18ce:	0f 91       	pop	r16
    18d0:	08 95       	ret

000018d2 <__adddi3>:
    18d2:	2a 0d       	add	r18, r10
    18d4:	3b 1d       	adc	r19, r11
    18d6:	4c 1d       	adc	r20, r12
    18d8:	5d 1d       	adc	r21, r13
    18da:	6e 1d       	adc	r22, r14
    18dc:	7f 1d       	adc	r23, r15
    18de:	80 1f       	adc	r24, r16
    18e0:	91 1f       	adc	r25, r17
    18e2:	08 95       	ret

000018e4 <__subdi3>:
    18e4:	2a 19       	sub	r18, r10
    18e6:	3b 09       	sbc	r19, r11
    18e8:	4c 09       	sbc	r20, r12
    18ea:	5d 09       	sbc	r21, r13
    18ec:	6e 09       	sbc	r22, r14
    18ee:	7f 09       	sbc	r23, r15
    18f0:	80 0b       	sbc	r24, r16
    18f2:	91 0b       	sbc	r25, r17
    18f4:	08 95       	ret

000018f6 <__cmpdi2>:
    18f6:	2a 15       	cp	r18, r10
    18f8:	3b 05       	cpc	r19, r11
    18fa:	4c 05       	cpc	r20, r12
    18fc:	5d 05       	cpc	r21, r13
    18fe:	6e 05       	cpc	r22, r14
    1900:	7f 05       	cpc	r23, r15
    1902:	80 07       	cpc	r24, r16
    1904:	91 07       	cpc	r25, r17
    1906:	08 95       	ret

00001908 <__cmpdi2_s8>:
    1908:	00 24       	eor	r0, r0
    190a:	a7 fd       	sbrc	r26, 7
    190c:	00 94       	com	r0
    190e:	2a 17       	cp	r18, r26
    1910:	30 05       	cpc	r19, r0
    1912:	40 05       	cpc	r20, r0
    1914:	50 05       	cpc	r21, r0
    1916:	60 05       	cpc	r22, r0
    1918:	70 05       	cpc	r23, r0
    191a:	80 05       	cpc	r24, r0
    191c:	90 05       	cpc	r25, r0
    191e:	08 95       	ret

00001920 <__umulhisi3>:
    1920:	a2 9f       	mul	r26, r18
    1922:	b0 01       	movw	r22, r0
    1924:	b3 9f       	mul	r27, r19
    1926:	c0 01       	movw	r24, r0
    1928:	a3 9f       	mul	r26, r19
    192a:	70 0d       	add	r23, r0
    192c:	81 1d       	adc	r24, r1
    192e:	11 24       	eor	r1, r1
    1930:	91 1d       	adc	r25, r1
    1932:	b2 9f       	mul	r27, r18
    1934:	70 0d       	add	r23, r0
    1936:	81 1d       	adc	r24, r1
    1938:	11 24       	eor	r1, r1
    193a:	91 1d       	adc	r25, r1
    193c:	08 95       	ret

0000193e <eeprom_read_byte>:
    193e:	03 d0       	rcall	.+6      	; 0x1946 <eeprom_mapen>
    1940:	80 81       	ld	r24, Z
    1942:	99 27       	eor	r25, r25
    1944:	08 95       	ret

00001946 <eeprom_mapen>:
    1946:	e0 ec       	ldi	r30, 0xC0	; 192
    1948:	f1 e0       	ldi	r31, 0x01	; 1
    194a:	37 85       	ldd	r19, Z+15	; 0x0f
    194c:	37 fd       	sbrc	r19, 7
    194e:	fd cf       	rjmp	.-6      	; 0x194a <eeprom_mapen+0x4>
    1950:	34 85       	ldd	r19, Z+12	; 0x0c
    1952:	38 60       	ori	r19, 0x08	; 8
    1954:	34 87       	std	Z+12, r19	; 0x0c
    1956:	fc 01       	movw	r30, r24
    1958:	e0 50       	subi	r30, 0x00	; 0
    195a:	f0 4f       	sbci	r31, 0xF0	; 240
    195c:	08 95       	ret

0000195e <eeprom_read_word>:
    195e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <eeprom_mapen>
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	08 95       	ret

00001968 <eeprom_write_byte>:
    1968:	26 2f       	mov	r18, r22

0000196a <eeprom_write_r18>:
    196a:	e0 ec       	ldi	r30, 0xC0	; 192
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	37 85       	ldd	r19, Z+15	; 0x0f
    1970:	37 fd       	sbrc	r19, 7
    1972:	fd cf       	rjmp	.-6      	; 0x196e <eeprom_write_r18+0x4>
    1974:	34 85       	ldd	r19, Z+12	; 0x0c
    1976:	37 7f       	andi	r19, 0xF7	; 247
    1978:	34 87       	std	Z+12, r19	; 0x0c
    197a:	37 85       	ldd	r19, Z+15	; 0x0f
    197c:	31 ff       	sbrs	r19, 1
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <eeprom_write_r18+0x28>
    1980:	36 e3       	ldi	r19, 0x36	; 54
    1982:	32 87       	std	Z+10, r19	; 0x0a
    1984:	38 ed       	ldi	r19, 0xD8	; 216
    1986:	34 bf       	out	0x34, r19	; 52
    1988:	31 e0       	ldi	r19, 0x01	; 1
    198a:	33 87       	std	Z+11, r19	; 0x0b
    198c:	37 85       	ldd	r19, Z+15	; 0x0f
    198e:	37 fd       	sbrc	r19, 7
    1990:	fd cf       	rjmp	.-6      	; 0x198c <eeprom_write_r18+0x22>
    1992:	33 e3       	ldi	r19, 0x33	; 51
    1994:	32 87       	std	Z+10, r19	; 0x0a
    1996:	80 83       	st	Z, r24
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	12 82       	std	Z+2, r1	; 0x02
    199c:	24 83       	std	Z+4, r18	; 0x04
    199e:	25 e3       	ldi	r18, 0x35	; 53
    19a0:	22 87       	std	Z+10, r18	; 0x0a
    19a2:	28 ed       	ldi	r18, 0xD8	; 216
    19a4:	31 e0       	ldi	r19, 0x01	; 1
    19a6:	24 bf       	out	0x34, r18	; 52
    19a8:	33 87       	std	Z+11, r19	; 0x0b
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	08 95       	ret

000019ae <eeprom_write_word>:
    19ae:	0e 94 b4 0c 	call	0x1968	; 0x1968 <eeprom_write_byte>
    19b2:	27 2f       	mov	r18, r23
    19b4:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <eeprom_write_r18>

000019b8 <_exit>:
    19b8:	f8 94       	cli

000019ba <__stop_program>:
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <__stop_program>
